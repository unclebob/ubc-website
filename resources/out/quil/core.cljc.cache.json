["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$p5",["^ ","~$prototype",["^ "],"~$Shader",["^ "],"~$Image",["^ "]],"~$Object",["^ ","~$processing-obj",["^ "],"~$charCodeAt",["^ "]],"~$RESULT",["^ ","^4",["^ ","~$then",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$abs"]],"~:name","~$quil.core","~:imports",null,"~:requires",["^ ","~$clojure.string","^D","~$cljsjs.p5","^E","~$ap","~$quil.sketch","^G","^G","~$u","~$quil.util","^H","^H"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$rotate-x",["^ ","~:category","Transform","~:protocol-inline",null,"~:meta",["^ ","^M","Transform","~:p5js-name","rotateX()","~:added","1.0","~:subcategory",null,"~:file","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","~:end-column",11,"~:processing-name","rotateX()","~:column",3,"~:requires-bindings",true,"~:line",3589,"~:end-line",3589,"~:arglists",["~#list",["~$quote",["^[",[["~$angle"]]]]],"~:doc","Rotates a shape around the x-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0 to\n  (* PI 2)) or converted to radians with the [[radians]] function. Objects\n  are always rotated around their relative position to the origin and\n  positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling `(rotate-x HALF-PI)` and then `(rotate-x HALF-PI)` is\n  the same as `(rotate-x PI)`. If [[rotate-x]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function requires either the `:p3d` or `:opengl` renderer."],"^P","rotateX()","^Q","1.0","^@","~$quil.core/rotate-x","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","rotateX()","~:method-params",["^[",[["^11"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^V",1,"~:variadic?",false,"^W",true,"^X",3582,"~:ret-tag","~$any","^Y",3589,"~:max-fixed-arity",1,"~:fn-var",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Rotates a shape around the x-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0 to\n  (* PI 2)) or converted to radians with the [[radians]] function. Objects\n  are always rotated around their relative position to the origin and\n  positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling `(rotate-x HALF-PI)` and then `(rotate-x HALF-PI)` is\n  the same as `(rotate-x PI)`. If [[rotate-x]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function requires either the `:p3d` or `:opengl` renderer."],"~$set-uniform",["^ ","^M","Shader","^N",null,"^O",["^ ","^M","Shader","^P","Shader.setUniform()","^Q","3.0.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^V",6,"^W",true,"^X",253,"^Y",253,"^Z",["^[",["^10",["^[",[["~$shader","~$uniform-name","~$data"]]]]],"^12","Set a uniform variables inside a shader to modify the effect\n     while the program is running."],"^P","Shader.setUniform()","^Q","3.0.0","^@","~$quil.core/set-uniform","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^14",["^[",[["^1=","^1>","^1?"]]],"^15",null,"^16",["^[",[null,null]],"^V",4,"^17",false,"^W",true,"^X",247,"^18","^19","^Y",253,"^1:",3,"^1;",true,"^Z",["^[",["^10",["^[",[["^1=","^1>","^1?"]]]]],"^12","Set a uniform variables inside a shader to modify the effect\n     while the program is running."],"~$raw-key",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","key","^Q","1.0","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","key","^V",3,"^W",true,"^X",3335,"^Y",3335,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Contains the value of the most recent key on the keyboard that was\n  used (either pressed or released).\n\n  For non-ASCII keys, use [[key-code]]. The keys included in\n  the ASCII specification (`BACKSPACE`, `TAB`, `ENTER`, `RETURN`, `ESC`, and\n  `DELETE`) do not require checking to see if the key is coded, and you\n  should simply use [[raw-key]] instead of [[key-code]]. If you're\n  making cross-platform projects, note that the `ENTER` key is commonly\n  used on PCs and Unix and the `RETURN` key is used instead on\n  Macintosh. Check for both `ENTER` and `RETURN` to make sure your program\n  will work for all platforms."],"^P","key","^Q","1.0","^@","~$quil.core/raw-key","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","key","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3328,"^18","^19","^Y",3335,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Contains the value of the most recent key on the keyboard that was\n  used (either pressed or released).\n\n  For non-ASCII keys, use [[key-code]]. The keys included in\n  the ASCII specification (`BACKSPACE`, `TAB`, `ENTER`, `RETURN`, `ESC`, and\n  `DELETE`) do not require checking to see if the key is coded, and you\n  should simply use [[raw-key]] instead of [[key-code]]. If you're\n  making cross-platform projects, note that the `ENTER` key is commonly\n  used on PCs and Unix and the `RETURN` key is used instead on\n  Macintosh. Check for both `ENTER` and `RETURN` to make sure your program\n  will work for all platforms."],"~$text-char",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","text()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"~:top-fn",["^ ","^17",false,"~:fixed-arity",4,"^1:",4,"^14",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]],"^Z",["^[",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","text()","^V",3,"^W",true,"^X",4249,"^Y",4249,"^Z",["^[",["^10",["^[",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]]]],"^12","Draws a char to the screen in the specified position. See the\n  [[text]] function for more details."],"^P","text()","^Q","1.0","^@","~$quil.core/text-char","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]],"^Z",["^[",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","text()","^14",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]],"^15",null,"^1E",4,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"~:methods",[["^ ","^1E",3,"^17",false,"~:tag",["^>",["^19","~$clj-nil"]]],["^ ","^1E",4,"^17",false,"^1H",["^>",["^19","^1I"]]]],"^X",4242,"^Y",4249,"^1:",4,"^1;",true,"^Z",["^[",[["~$c","~$x","~$y"],["~$c","~$x","~$y","~$z"]]],"^12","Draws a char to the screen in the specified position. See the\n  [[text]] function for more details."],"~$display-filter",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","filter()","^Q","1.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["~$mode"],["^1K","~$level"]],"^Z",["^[",[["^1K"],["^1K","^1L"]]],"^16",["^[",[null,null]]],"^U","filter()","^V",3,"^W",true,"^X",1767,"^Y",1767,"^Z",["^[",["^10",["^[",[["^1K"],["^1K","^1L"]]]]],"^12","Originally named filter in Processing Language.\n  Filters the display window with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of the\n  following keywords:\n\n  * `:threshold` - converts the image to black and white pixels depending\n                   if they are above or below the threshold defined by\n                   the level parameter. The level must be between\n                   0.0 (black) and 1.0 (white). If no level is specified,\n                   0.5 is used.\n  * `:gray`      - converts any colors in the image to grayscale\n                   equivalents. Doesn't work with level.\n  * `:invert`    - sets each pixel to its inverse value. Doesn't work with\n                   level.\n  * `:posterize` - limits each channel of the image to the number of\n                   colors specified as the level parameter. The parameter can\n                   be set to values between 2 and 255, but results are most\n                   noticeable in the lower ranges.\n  * `:blur`      - executes a Gaussian blur with the level parameter\n                   specifying the extent of the blurring. If no level\n                   parameter is used, the blur is equivalent to Gaussian\n                   blur of radius 1.\n  * `:opaque`    - sets the alpha channel to entirely opaque. Doesn't work\n                   with level.\n  * `:erode`     - reduces the light areas. Doesn't work with level.\n  * `:dilate`    - increases the light areas. Doesn't work with level."],"^P","filter()","^Q","1.0","^@","~$quil.core/display-filter","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^1K"],["^1K","^1L"]],"^Z",["^[",[["^1K"],["^1K","^1L"]]],"^16",["^[",[null,null]]],"^U","filter()","^14",[["^1K"],["^1K","^1L"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"]],"^X",1760,"^Y",1767,"^1:",2,"^1;",true,"^Z",["^[",[["^1K"],["^1K","^1L"]]],"^12","Originally named filter in Processing Language.\n  Filters the display window with the specified mode and level.\n  Level defines the quality of the filter and mode may be one of the\n  following keywords:\n\n  * `:threshold` - converts the image to black and white pixels depending\n                   if they are above or below the threshold defined by\n                   the level parameter. The level must be between\n                   0.0 (black) and 1.0 (white). If no level is specified,\n                   0.5 is used.\n  * `:gray`      - converts any colors in the image to grayscale\n                   equivalents. Doesn't work with level.\n  * `:invert`    - sets each pixel to its inverse value. Doesn't work with\n                   level.\n  * `:posterize` - limits each channel of the image to the number of\n                   colors specified as the level parameter. The parameter can\n                   be set to values between 2 and 255, but results are most\n                   noticeable in the lower ranges.\n  * `:blur`      - executes a Gaussian blur with the level parameter\n                   specifying the extent of the blurring. If no level\n                   parameter is used, the blur is equivalent to Gaussian\n                   blur of radius 1.\n  * `:opaque`    - sets the alpha channel to entirely opaque. Doesn't work\n                   with level.\n  * `:erode`     - reduces the light areas. Doesn't work with level.\n  * `:dilate`    - increases the light areas. Doesn't work with level."],"~$rotate-z",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","rotateZ()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","rotateZ()","^V",3,"^W",true,"^X",3633,"^Y",3633,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Rotates a shape around the z-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the [[radians]] function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling `(rotate-z HALF-PI)` and then `(rotate-z HALF-PI)` is\n  the same as `(rotate-z PI)`. If [[rotate-y]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function requires either the `:p3d` or `:opengl` renderer."],"^P","rotateZ()","^Q","1.0","^@","~$quil.core/rotate-z","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","rotateZ()","^14",["^[",[["^11"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3626,"^18","^19","^Y",3633,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Rotates a shape around the z-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the [[radians]] function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling `(rotate-z HALF-PI)` and then `(rotate-z HALF-PI)` is\n  the same as `(rotate-z PI)`. If [[rotate-y]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function requires either the `:p3d` or `:opengl` renderer."],"~$random-gaussian",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","randomGaussian()","^Q","2.0","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^U","randomGaussian()","^V",3,"^W",true,"^X",3302,"^Y",3302,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns a `float` from a random series of numbers having a mean of 0 and\n  standard deviation of 1. Each time the [[random-gaussian]] function is called,\n  it returns a number fitting a Gaussian, or normal, distribution.\n  There is theoretically no minimum or maximum value that [[random-gaussian]]\n  might return. Rather, there is just a very low probability that values far\n  from the mean will be returned; and a higher probability that numbers near\n  the mean will be returned."],"^P","randomGaussian()","^Q","2.0","^@","~$quil.core/random-gaussian","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^U","randomGaussian()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3295,"^18","^19","^Y",3302,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns a `float` from a random series of numbers having a mean of 0 and\n  standard deviation of 1. Each time the [[random-gaussian]] function is called,\n  it returns a number fitting a Gaussian, or normal, distribution.\n  There is theoretically no minimum or maximum value that [[random-gaussian]]\n  might return. Rather, there is just a very low probability that values far\n  from the mean will be returned; and a higher probability that numbers near\n  the mean will be returned."],"~$blend",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","blend()","^Q","1.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",11,"^1:",11,"^14",[["~$x","~$y","~$width","~$height","~$dx","~$dy","~$dwidth","~$dheight","^1K"],["~$src-img","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","~$dest-img","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"]],"^Z",["^[",[["~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","^1Z","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"]]],"^16",["^[",[null,null,null]]],"^U","blend()","^V",3,"^W",true,"^X",737,"^Y",737,"^Z",["^[",["^10",["^[",[["~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","^1Z","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"]]]]],"^12","Blends a region of pixels from one image into another with full alpha\n  channel support. If `src-img` is not specified it defaults to\n  [[current-graphics]]. If `dest-img` is not specified it defaults to\n  [[current-graphics]].\n\n  Note: it is recommended to use [[blend-mode]] instead of [[blend]].\n\n  Available blend modes are:\n\n  * `:blend`      - linear interpolation of colours: C = A*factor + B\n  * `:add`        - additive blending with white clip:\n                                                C = min(A*factor + B, 255)\n  * `:darkest`    - only the darkest colour succeeds:\n                                                C = min(A*factor, B)\n  * `:lightest`   - only the lightest colour succeeds:\n                                                C = max(A*factor, B)\n  * `:difference` - subtract colors from underlying image.\n  * `:exclusion`  - similar to `:difference`, but less extreme.\n  * `:multiply`   - Multiply the colors, result will always be darker.\n  * `:screen`     - Opposite multiply, uses inverse values of the colors.\n  * `:overlay`    - A mix of `:multiply` and `:screen`. Multiplies dark values\n                    and screens light values.\n  * `:hard-light` - `:screen` when greater than 50% gray, `:multiply` when\n                    lower.\n  * `:soft-light` - Mix of `:darkest` and `:lightest`. Works like :overlay,\n                    but not as harsh.\n  * `:dodge`      - Lightens light tones and increases contrast, ignores\n                    darks.\n                    Called \"Color Dodge\" in Illustrator and Photoshop.\n  * `:burn`       - Darker areas are applied, increasing contrast, ignores\n                    lights. Called \"Color Burn\" in Illustrator and\n                    Photoshop.\n\n  In clj the following blend modes are also supported:\n  `:subtract`   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n\n  In cljs the following blend modes are also supported:\n  `:replace`    - the pixels entirely replace the others and don't utilize\n                  alpha (transparency) values."],"^P","blend()","^Q","1.0","^@","~$quil.core/blend","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",11,"^1:",11,"^14",[["~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","^1Z","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"]],"^Z",["^[",[["~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","^1Z","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"]]],"^16",["^[",[null,null,null]]],"^U","blend()","^14",[["~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","^1Z","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"]],"^15",null,"^1E",11,"^16",["^[",[null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",9,"^17",false,"^1H","^19"],["^ ","^1E",10,"^17",false,"^1H","^19"],["^ ","^1E",11,"^17",false,"^1H","^19"]],"^X",730,"^Y",737,"^1:",11,"^1;",true,"^Z",["^[",[["~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"],["^1Y","^1Z","~$x","~$y","^1S","^1T","^1U","^1V","^1W","^1X","^1K"]]],"^12","Blends a region of pixels from one image into another with full alpha\n  channel support. If `src-img` is not specified it defaults to\n  [[current-graphics]]. If `dest-img` is not specified it defaults to\n  [[current-graphics]].\n\n  Note: it is recommended to use [[blend-mode]] instead of [[blend]].\n\n  Available blend modes are:\n\n  * `:blend`      - linear interpolation of colours: C = A*factor + B\n  * `:add`        - additive blending with white clip:\n                                                C = min(A*factor + B, 255)\n  * `:darkest`    - only the darkest colour succeeds:\n                                                C = min(A*factor, B)\n  * `:lightest`   - only the lightest colour succeeds:\n                                                C = max(A*factor, B)\n  * `:difference` - subtract colors from underlying image.\n  * `:exclusion`  - similar to `:difference`, but less extreme.\n  * `:multiply`   - Multiply the colors, result will always be darker.\n  * `:screen`     - Opposite multiply, uses inverse values of the colors.\n  * `:overlay`    - A mix of `:multiply` and `:screen`. Multiplies dark values\n                    and screens light values.\n  * `:hard-light` - `:screen` when greater than 50% gray, `:multiply` when\n                    lower.\n  * `:soft-light` - Mix of `:darkest` and `:lightest`. Works like :overlay,\n                    but not as harsh.\n  * `:dodge`      - Lightens light tones and increases contrast, ignores\n                    darks.\n                    Called \"Color Dodge\" in Illustrator and Photoshop.\n  * `:burn`       - Darker areas are applied, increasing contrast, ignores\n                    lights. Called \"Color Burn\" in Illustrator and\n                    Photoshop.\n\n  In clj the following blend modes are also supported:\n  `:subtract`   - subtractive blending with black clip:\n                                            C = max(B - A*factor, 0)\n\n  In cljs the following blend modes are also supported:\n  `:replace`    - the pixels entirely replace the others and don't utilize\n                  alpha (transparency) values."],"~$frame-count",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","frameCount","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","frameCount","^V",3,"^W",true,"^X",1858,"^Y",1858,"^Z",["^[",["^10",["^[",[[]]]]],"^12","The system variable frameCount contains the number of frames\n  displayed since the program started. Inside setup() the value is 0\n  and after the first iteration of draw it is 1, etc."],"^P","frameCount","^Q","1.0","^@","~$quil.core/frame-count","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","frameCount","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1851,"^18","^19","^Y",1858,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","The system variable frameCount contains the number of frames\n  displayed since the program started. Inside setup() the value is 0\n  and after the first iteration of draw it is 1, etc."],"~$fract",["^ ","^M","Calculation","^N",null,"^O",["^ ","^M","Calculation","^P","fract","^Q","4.3","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^V",3,"^W",true,"^X",1845,"^Y",1845,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","Returns the fractional component of a number."],"^P","fract","^Q","4.3","^@","~$quil.core/fract","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^14",["^[",[["~$n"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1839,"^18","^19","^Y",1845,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","Returns the fractional component of a number."],"~$with-graphics",["^ ","^M","Rendering","^N",null,"^O",["^ ","^M","Rendering","^Q","1.7","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["~$graphics","~$body"]]]],"^Z",["^[",[["^25","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^V",3,"^W",true,"^X",4857,"~:macro",true,"^Y",4857,"^Z",["^[",["^10",["^[",[["^25","~$&","^26"]]]]],"^12","All subsequent calls of any drawing function will draw on given\n  graphics. [[with-graphics]] cannot be nested (you can draw simultaneously\n  only on 1 graphics)"],"^Q","1.7","^@","~$quil.core/with-graphics","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^25","^26"]]]],"^Z",["^[",[["^25","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^14",["^[",[["^[",["^25","^26"]]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["~$seq","~$cljs.core/IList"]]]],"^X",4852,"^27",true,"^18","^19","^Y",4857,"^1:",1,"^1;",false,"^Z",["^[",[["^25","~$&","^26"]]],"^12","All subsequent calls of any drawing function will draw on given\n  graphics. [[with-graphics]] cannot be nested (you can draw simultaneously\n  only on 1 graphics)"],"~$loaded?",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^Q","3.0.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U",null,"^V",3,"^W",false,"^X",2472,"^Y",2472,"^Z",["^[",["^10",["^[",[["~$object"]]]]],"^12","Returns true if object is loaded."],"^Q","3.0.0","^@","~$quil.core/loaded?","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U",null,"^14",["^[",[["^2<"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",2466,"^18",["^>",["~$boolean","^19"]],"^Y",2472,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^2<"]]]]],"^12","Returns true if object is loaded."],"~$set-image",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","set()","^Q","1.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","set()","^V",3,"^W",true,"^X",3820,"^Y",3820,"^Z",["^[",["^10",["^[",[["~$x","~$y","~$src"]]]]],"^12","Writes an image directly into the display window. The `x` and `y`\n  parameters define the coordinates for the upper-left corner of the\n  image."],"^P","set()","^Q","1.0","^@","~$quil.core/set-image","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","set()","^14",["^[",[["~$x","~$y","^2@"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3813,"^18","^19","^Y",3820,"^1:",3,"^1;",true,"^Z",["^[",["^10",["^[",[["~$x","~$y","^2@"]]]]],"^12","Writes an image directly into the display window. The `x` and `y`\n  parameters define the coordinates for the upper-left corner of the\n  image."],"~$angle-modes",["^ ","^@","~$quil.core/angle-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",52,"^T",24,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",52,"^V",13,"^Y",52,"^T",24],"^1H","~$cljs.core/IMap"],"~$create-graphics",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","createGraphics()","^Q","1.0","^R","Rendering","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$w","~$h"],["~$w","~$h","~$renderer"]],"^Z",["^[",[["~$w","~$h"],["~$w","~$h","^2F"]]],"^16",["^[",[null,null]]],"^U","createGraphics()","^V",3,"^W",true,"^X",1191,"^Y",1191,"^Z",["^[",["^10",["^[",[["~$w","~$h"],["~$w","~$h","^2F"]]]]],"^12","Creates and returns a new `PGraphics` object of the types `:p2d`, `:p3d`,\n  `:java2d`, `:pdf`. By default `:java2d` is used. Use this class if you\n  need to draw into an off-screen graphics buffer. It's not possible\n  to use [[create-graphics]] with the `:opengl` renderer, because it doesn't\n  allow offscreen use. The `:pdf` renderer requires the filename parameter.\n\n  Note: don't use [[create-graphics]] in draw in Clojurescript, it leaks memory.\n  You should create graphic in setup and reuse it in draw instead of creating\n  a new one.\n\n  It's important to call any drawing commands between `(.beginDraw graphics)`\n  and `(.endDraw graphics)` statements or use [[with-graphics]] macro. This is\n  also true for any commands that affect drawing, such as [[smooth]] or\n  [[color-mode]].\n\n  If you're using `:pdf` renderer - don't forget to call `(.dispose graphics)`\n  as last command inside [[with-graphics]] macro, otherwise graphics won't be\n  saved.\n\n  Unlike the main drawing surface which is completely opaque, surfaces\n  created with [[create-graphics]] can have transparency. This makes it\n  possible to draw into a graphics and maintain the alpha channel. By\n  using save to write a `PNG` or `TGA` file, the transparency of the\n  graphics object will be honored."],"^P","createGraphics()","^Q","1.0","^@","~$quil.core/create-graphics","^R","Rendering","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$w","~$h"],["~$w","~$h","^2F"]],"^Z",["^[",[["~$w","~$h"],["~$w","~$h","^2F"]]],"^16",["^[",[null,null]]],"^U","createGraphics()","^14",[["~$w","~$h"],["~$w","~$h","^2F"]],"^15",null,"^1E",3,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",1184,"^Y",1191,"^1:",3,"^1;",true,"^Z",["^[",[["~$w","~$h"],["~$w","~$h","^2F"]]],"^12","Creates and returns a new `PGraphics` object of the types `:p2d`, `:p3d`,\n  `:java2d`, `:pdf`. By default `:java2d` is used. Use this class if you\n  need to draw into an off-screen graphics buffer. It's not possible\n  to use [[create-graphics]] with the `:opengl` renderer, because it doesn't\n  allow offscreen use. The `:pdf` renderer requires the filename parameter.\n\n  Note: don't use [[create-graphics]] in draw in Clojurescript, it leaks memory.\n  You should create graphic in setup and reuse it in draw instead of creating\n  a new one.\n\n  It's important to call any drawing commands between `(.beginDraw graphics)`\n  and `(.endDraw graphics)` statements or use [[with-graphics]] macro. This is\n  also true for any commands that affect drawing, such as [[smooth]] or\n  [[color-mode]].\n\n  If you're using `:pdf` renderer - don't forget to call `(.dispose graphics)`\n  as last command inside [[with-graphics]] macro, otherwise graphics won't be\n  saved.\n\n  Unlike the main drawing surface which is completely opaque, surfaces\n  created with [[create-graphics]] can have transparency. This makes it\n  possible to draw into a graphics and maintain the alpha channel. By\n  using save to write a `PNG` or `TGA` file, the transparency of the\n  graphics object will be honored."],"~$update-pixels",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","updatePixels()","^Q","1.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["~$img"]],"^Z",["^[",[[],["^2I"]]],"^16",["^[",[null,null]]],"^U","updatePixels()","^V",3,"^W",true,"^X",4662,"^Y",4662,"^Z",["^[",["^10",["^[",[[],["^2I"]]]]],"^12","Updates the display window or image with the data in the pixels array.\n  Use in conjunction with [[pixels]]. If you're only reading pixels from\n  the array, there's no need to call [[update-pixels]] unless there are\n  changes.\n\n  Certain renderers may or may not seem to require [[pixels]] or\n  [[update-pixels]]. However, the rule is that any time you want to\n  manipulate the `pixels` array, you must first call [[pixels]], and\n  after changes have been made, call [[update-pixels]]. Even if the\n  renderer may not seem to use this function in the current Processing\n  release, this will always be subject to change."],"^P","updatePixels()","^Q","1.0","^@","~$quil.core/update-pixels","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^2I"]],"^Z",["^[",[[],["^2I"]]],"^16",["^[",[null,null]]],"^U","updatePixels()","^14",[[],["^2I"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^19"]],"^X",4655,"^Y",4662,"^1:",1,"^1;",true,"^Z",["^[",[[],["^2I"]]],"^12","Updates the display window or image with the data in the pixels array.\n  Use in conjunction with [[pixels]]. If you're only reading pixels from\n  the array, there's no need to call [[update-pixels]] unless there are\n  changes.\n\n  Certain renderers may or may not seem to require [[pixels]] or\n  [[update-pixels]]. However, the rule is that any time you want to\n  manipulate the `pixels` array, you must first call [[pixels]], and\n  after changes have been made, call [[update-pixels]]. Even if the\n  renderer may not seem to use this function in the current Processing\n  release, this will always be subject to change."],"~$text-size",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","textSize()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","textSize()","^V",3,"^W",true,"^X",4452,"^Y",4452,"^Z",["^[",["^10",["^[",[["~$size"]]]]],"^12","Sets the current font size. This size will be used in all\n  subsequent calls to the [[text]] function. Font size is measured in\n  units of pixels."],"^P","textSize()","^Q","1.0","^@","~$quil.core/text-size","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","textSize()","^14",["^[",[["^2L"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4445,"^18","^19","^Y",4452,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^2L"]]]]],"^12","Sets the current font size. This size will be used in all\n  subsequent calls to the [[text]] function. Font size is measured in\n  units of pixels."],"~$pixels",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","pixels","^Q","1.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^2I"]],"^Z",["^[",[[],["^2I"]]],"^16",["^[",[null,null]]],"^U","pixels[]","^V",3,"^W",true,"^X",2963,"^Y",2963,"^Z",["^[",["^10",["^[",[[],["^2I"]]]]],"^12","Array containing the values for all the pixels in the display\n  window or image. This array is therefore the size of the display window. If\n  this array is modified, the [[update-pixels]] function must be called to\n  update the changes. Calls `.loadPixels` before obtaining the pixel array."],"^P","pixels","^Q","1.0","^@","~$quil.core/pixels","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^2I"]],"^Z",["^[",[[],["^2I"]]],"^16",["^[",[null,null]]],"^U","pixels[]","^14",[[],["^2I"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^19"]],"^X",2956,"^Y",2963,"^1:",1,"^1;",true,"^Z",["^[",[[],["^2I"]]],"^12","Array containing the values for all the pixels in the display\n  window or image. This array is therefore the size of the display window. If\n  this array is modified, the [[update-pixels]] function must be called to\n  update the changes. Calls `.loadPixels` before obtaining the pixel array."],"~$constrain",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","constrain()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","constrain()","^V",3,"^W",false,"^X",1079,"^Y",1079,"^Z",["^[",["^10",["^[",[["~$amt","~$low","~$high"]]]]],"^12","Constrains a value to not exceed a maximum and minimum value."],"^P","constrain()","^Q","1.0","^@","~$quil.core/constrain","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","constrain()","^14",["^[",[["^2Q","^2R","^2S"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",1072,"^18","^19","^Y",1079,"^1:",3,"^1;",true,"^Z",["^[",["^10",["^[",[["^2Q","^2R","^2S"]]]]],"^12","Constrains a value to not exceed a maximum and minimum value."],"~$rect",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","rect()","^Q","1.0","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",8,"^1:",8,"^14",[["~$x","~$y","^1S","^1T"],["~$x","~$y","^1S","^1T","~$r"],["~$x","~$y","^1S","^1T","~$top-left-r","~$top-right-r","~$bottom-right-r","~$bottom-left-r"]],"^Z",["^[",[["~$x","~$y","^1S","^1T"],["~$x","~$y","^1S","^1T","~$r"],["~$x","~$y","^1S","^1T","^2V","^2W","^2X","^2Y"]]],"^16",["^[",[null,null,null]]],"^U","rect()","^V",3,"^W",true,"^X",3357,"^Y",3357,"^Z",["^[",["^10",["^[",[["~$x","~$y","^1S","^1T"],["~$x","~$y","^1S","^1T","~$r"],["~$x","~$y","^1S","^1T","^2V","^2W","^2X","^2Y"]]]]],"^12","Draws a rectangle to the screen. A rectangle is a four-sided shape\n  with every angle at ninety degrees. By default, the first two\n  parameters set the location of the upper-left corner, the third\n  sets the width, and the fourth sets the height. These parameters\n  may be changed with [[rect-mode]].\n\n  To draw a rounded rectangle, add a fifth parameter, which is used as\n  the radius value for all four corners. To use a different radius value\n  for each corner, include eight parameters."],"^P","rect()","^Q","1.0","^@","~$quil.core/rect","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",8,"^1:",8,"^14",[["~$x","~$y","^1S","^1T"],["~$x","~$y","^1S","^1T","~$r"],["~$x","~$y","^1S","^1T","^2V","^2W","^2X","^2Y"]],"^Z",["^[",[["~$x","~$y","^1S","^1T"],["~$x","~$y","^1S","^1T","~$r"],["~$x","~$y","^1S","^1T","^2V","^2W","^2X","^2Y"]]],"^16",["^[",[null,null,null]]],"^U","rect()","^14",[["~$x","~$y","^1S","^1T"],["~$x","~$y","^1S","^1T","~$r"],["~$x","~$y","^1S","^1T","^2V","^2W","^2X","^2Y"]],"^15",null,"^1E",8,"^16",["^[",[null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",5,"^17",false,"^1H","^19"],["^ ","^1E",8,"^17",false,"^1H","^19"]],"^X",3350,"^Y",3357,"^1:",8,"^1;",true,"^Z",["^[",[["~$x","~$y","^1S","^1T"],["~$x","~$y","^1S","^1T","~$r"],["~$x","~$y","^1S","^1T","^2V","^2W","^2X","^2Y"]]],"^12","Draws a rectangle to the screen. A rectangle is a four-sided shape\n  with every angle at ninety degrees. By default, the first two\n  parameters set the location of the upper-left corner, the third\n  sets the width, and the fourth sets the height. These parameters\n  may be changed with [[rect-mode]].\n\n  To draw a rounded rectangle, add a fifth parameter, which is used as\n  the radius value for all four corners. To use a different radius value\n  for each corner, include eight parameters."],"~$log",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","log()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","log()","^V",3,"^W",false,"^X",2489,"^Y",2489,"^Z",["^[",["^10",["^[",[["~$val"]]]]],"^12","Calculates the natural logarithm (the base-e logarithm) of a\n  number. This function expects the values greater than 0.0."],"^P","log()","^Q","1.0","^@","~$quil.core/log","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","log()","^14",["^[",[["^30"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",2482,"^18","^19","^Y",2489,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^30"]]]]],"^12","Calculates the natural logarithm (the base-e logarithm) of a\n  number. This function expects the values greater than 0.0."],"~$with-stroke",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^Q","1.7","^R","Utility Macros","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["~$stroke","^26"]]]],"^Z",["^[",[["^33","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^V",3,"^W",true,"^X",4772,"^27",true,"^Y",4772,"^Z",["^[",["^10",["^[",[["^33","~$&","^26"]]]]],"^12","Temporarily set the stroke color for the body of this macro.\n   The code outside of the [[with-stroke]] form will have the previous\n   stroke color set.\n\n   A stroke argument of nil disables the stroke.\n\n   Examples:\n   ```\n   (with-stroke 255 ...)\n   (with-stroke [10 80 98] ...)\n   (with-stroke nil ...)\n   ```"],"^Q","1.7","^@","~$quil.core/with-stroke","^R","Utility Macros","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^33","^26"]]]],"^Z",["^[",[["^33","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^14",["^[",[["^[",["^33","^26"]]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^29","^2:"]]]],"^X",4766,"^27",true,"^18","^19","^Y",4772,"^1:",1,"^1;",false,"^Z",["^[",[["^33","~$&","^26"]]],"^12","Temporarily set the stroke color for the body of this macro.\n   The code outside of the [[with-stroke]] form will have the previous\n   stroke color set.\n\n   A stroke argument of nil disables the stroke.\n\n   Examples:\n   ```\n   (with-stroke 255 ...)\n   (with-stroke [10 80 98] ...)\n   (with-stroke nil ...)\n   ```"],"~$radians",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","radians()","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","radians()","^V",3,"^W",false,"^X",3234,"^Y",3234,"^Z",["^[",["^10",["^[",[["~$degrees"]]]]],"^12","Converts a `degrees` measurement to its corresponding value in\n  radians. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and `2*PI` radians in a\n  circle. For example, `90° = PI/2 = 1.5707964`. All\n  trigonometric methods require their parameters to be specified in\n  radians."],"^P","radians()","^Q","1.0","^@","~$quil.core/radians","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","radians()","^14",["^[",[["^36"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",3227,"^18","^19","^Y",3234,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^36"]]]]],"^12","Converts a `degrees` measurement to its corresponding value in\n  radians. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and `2*PI` radians in a\n  circle. For example, `90° = PI/2 = 1.5707964`. All\n  trigonometric methods require their parameters to be specified in\n  radians."],"^36",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","degrees()","^V",3,"^W",false,"^X",1458,"^Y",1458,"^Z",["^[",["^10",["^[",[["^35"]]]]],"^12","Converts a `radians` measurement to its corresponding value in\n  degrees. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and `2*PI` radians in a\n  circle. For example, `90° = PI/2 = 1.5707964`. All\n  trigonometric methods in Processing require their parameters to be\n  specified in radians.","~:p5j-name","degrees()"],"^Q","1.0","^@","~$quil.core/degrees","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","degrees()","^14",["^[",[["^35"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",1451,"^18","^19","^Y",1458,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^35"]]]]],"^12","Converts a `radians` measurement to its corresponding value in\n  degrees. Radians and degrees are two ways of measuring the same\n  thing. There are 360 degrees in a circle and `2*PI` radians in a\n  circle. For example, `90° = PI/2 = 1.5707964`. All\n  trigonometric methods in Processing require their parameters to be\n  specified in radians.","^38","degrees()"],"~$acos",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","acos()","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","acos()","^V",3,"^W",false,"^X",285,"^Y",285,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","The inverse of [[cos]], returns the arc cosine of a value. This\n  function expects the values in the range of -1 to 1 and values are\n  returned in the range 0 to `Math/PI` (3.1415927)."],"^P","acos()","^Q","1.0","^@","~$quil.core/acos","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","acos()","^14",["^[",[["~$n"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",278,"^18","^19","^Y",285,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","The inverse of [[cos]], returns the arc cosine of a value. This\n  function expects the values in the range of -1 to 1 and values are\n  returned in the range 0 to `Math/PI` (3.1415927)."],"~$angle-mode",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","angleMode()","^Q","2.8.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^V",6,"^W",true,"^X",356,"^Y",356,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Sets the current mode of p5 to given `mode`.\n     Options are:\n     * `:radians` **(default)**\n     * `:degrees`"],"^P","angleMode()","^Q","2.8.0","^@","~$quil.core/angle-mode","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^14",["^[",[["^1K"]]],"^15",null,"^16",["^[",[null,null]],"^V",4,"^17",false,"^W",true,"^X",350,"^18","^19","^Y",356,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Sets the current mode of p5 to given `mode`.\n     Options are:\n     * `:radians` **(default)**\n     * `:degrees`"],"~$bezier-detail",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","bezierDetail()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","bezierDetail()","^V",3,"^W",true,"^X",646,"^Y",646,"^Z",["^[",["^10",["^[",[["~$detail"]]]]],"^12","Sets the resolution at which Beziers display. The **default** value is\n  20. This function is only useful when using the `:p3d` or `:opengl`\n  renderer as the default (`:java2d`) renderer does not use this\n  information."],"^P","bezierDetail()","^Q","1.0","^@","~$quil.core/bezier-detail","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","bezierDetail()","^14",["^[",[["^3?"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",639,"^18","^19","^Y",646,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^3?"]]]]],"^12","Sets the resolution at which Beziers display. The **default** value is\n  20. This function is only useful when using the `:p3d` or `:opengl`\n  renderer as the default (`:java2d`) renderer does not use this\n  information."],"~$texture",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","texture()","^Q","1.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","texture()","^V",3,"^W",true,"^X",4483,"^Y",4483,"^Z",["^[",["^10",["^[",[["^2I"]]]]],"^12","Sets a texture to be applied to vertex points. The [[texture]] function must\n  be called between [[begin-shape]] and [[end-shape]] and before any calls to\n  [[vertex]].\n\n  When textures are in use, the fill color is ignored. Instead, use\n  [[tint]] to specify the color of the texture as it is applied to the\n  shape."],"^P","texture()","^Q","1.0","^@","~$quil.core/texture","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","texture()","^14",["^[",[["^2I"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4476,"^18","^19","^Y",4483,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^2I"]]]]],"^12","Sets a texture to be applied to vertex points. The [[texture]] function must\n  be called between [[begin-shape]] and [[end-shape]] and before any calls to\n  [[vertex]].\n\n  When textures are in use, the fill color is ignored. Instead, use\n  [[tint]] to specify the color of the texture as it is applied to the\n  shape."],"~$floor",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","floor()","^Q","2.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","floor()","^V",3,"^W",false,"^X",1821,"^Y",1821,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","Calculates the closest `int` value that is less than or equal to the\n  value of the parameter. For example, `(floor 9.03)` returns the value 9."],"^P","floor()","^Q","2.0","^@","~$quil.core/floor","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","floor()","^14",["^[",[["~$n"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",1814,"^18","^19","^Y",1821,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","Calculates the closest `int` value that is less than or equal to the\n  value of the parameter. For example, `(floor 9.03)` returns the value 9."],"~$atan2",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","atan2()","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","atan2()","^V",3,"^W",false,"^X",462,"^Y",462,"^Z",["^[",["^10",["^[",[["~$y","~$x"]]]]],"^12","Calculates the angle (in radians) from a specified point to the\n  coordinate origin as measured from the positive x-axis. Values are\n  returned as a `float` in the range from `PI` to `-PI`. The [[atan2]] function\n  is most often used for orienting geometry to the position of the\n  cursor. Note: The `y` coordinate of the point is the first parameter\n  and the `x` coordinate is the second due to the structure of\n  calculating the tangent."],"^P","atan2()","^Q","1.0","^@","~$quil.core/atan2","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","atan2()","^14",["^[",[["~$y","~$x"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",455,"^18","^19","^Y",462,"^1:",2,"^1;",true,"^Z",["^[",["^10",["^[",[["~$y","~$x"]]]]],"^12","Calculates the angle (in radians) from a specified point to the\n  coordinate origin as measured from the positive x-axis. Values are\n  returned as a `float` in the range from `PI` to `-PI`. The [[atan2]] function\n  is most often used for orienting geometry to the position of the\n  cursor. Note: The `y` coordinate of the point is the first parameter\n  and the `x` coordinate is the second due to the structure of\n  calculating the tangent."],"^1=",["^ ","^M","Rendering","^N",null,"^O",["^ ","^M","Rendering","^Q","2.0","^R","Shaders","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","shader()","^V",3,"^W",true,"^X",3833,"^Y",3833,"^Z",["^[",["^10",["^[",[["^1="]]]]],"^12","Applies the shader specified by the parameters. It's compatible with the `:p2d`\n  and `:p3d` renderers, but not with the default `:java2d` renderer.\n  In clj mode you can pass an optional `kind` parameter that specifies\n  the type of shader, either `:points`, `:lines`, or `:triangles`"],"^Q","2.0","^@","~$quil.core/shader","^R","Shaders","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","shader()","^14",["^[",[["^1="]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3827,"^18","^19","^Y",3833,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1="]]]]],"^12","Applies the shader specified by the parameters. It's compatible with the `:p2d`\n  and `:p3d` renderers, but not with the default `:java2d` renderer.\n  In clj mode you can pass an optional `kind` parameter that specifies\n  the type of shader, either `:points`, `:lines`, or `:triangles`"],"~$millis",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","millis()","^Q","1.0","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","millis()","^V",3,"^W",true,"^X",2568,"^Y",2568,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the number of milliseconds (thousandths of a second) since\n  starting the sketch. This information is often used for timing\n  animation sequences."],"^P","millis()","^Q","1.0","^@","~$quil.core/millis","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","millis()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2561,"^18","^19","^Y",2568,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the number of milliseconds (thousandths of a second) since\n  starting the sketch. This information is often used for timing\n  animation sequences."],"~$lerp-color",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","lerpColor()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","lerpColor()","^V",3,"^W",true,"^X",2291,"^Y",2291,"^Z",["^[",["^10",["^[",[["~$c1","~$c2","^2Q"]]]]],"^12","Calculates a color or colors between two color at a specific\n  increment. The `amt` parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc."],"^P","lerpColor()","^Q","1.0","^@","~$quil.core/lerp-color","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","lerpColor()","^14",["^[",[["^3K","^3L","^2Q"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2284,"^18","^19","^Y",2291,"^1:",3,"^1;",true,"^Z",["^[",["^10",["^[",[["^3K","^3L","^2Q"]]]]],"^12","Calculates a color or colors between two color at a specific\n  increment. The `amt` parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc."],"~$image-modes",["^ ","^@","~$quil.core/image-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",69,"^T",13,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",69,"^V",2,"^Y",69,"^T",13],"^1H","^2D"],"~$color-mode",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","colorMode()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["^1K"],["^1K","~$max"],["^1K","~$max-x","~$max-y","~$max-z"],["^1K","^3R","^3S","^3T","~$max-a"]],"^Z",["^[",[["^1K"],["^1K","^3Q"],["^1K","^3R","^3S","^3T"],["^1K","^3R","^3S","^3T","^3U"]]],"^16",["^[",[null,null,null,null]]],"^U","colorMode()","^V",3,"^W",true,"^X",1025,"^Y",1025,"^Z",["^[",["^10",["^[",[["^1K"],["^1K","^3Q"],["^1K","^3R","^3S","^3T"],["^1K","^3R","^3S","^3T","^3U"]]]]],"^12","Changes the way Processing interprets color data. Available modes\n  are `:rgb` and `:hsb` (and `:hsl` in Clojurescript).\n  By default, the parameters for [[fill]], [[stroke]],\n  [[background]], and [[color]] are defined by values between 0 and 255 using\n  the `:rgb` color model. The [[color-mode]] function is used to change the\n  numerical range used for specifying colors and to switch color\n  systems. For example, calling\n  `(color-mode :rgb 1.0)` will specify that values are specified between\n  0 and 1. The limits for defining colors are altered by setting the\n  parameters range1, range2, range3, and range 4."],"^P","colorMode()","^Q","1.0","^@","~$quil.core/color-mode","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["^1K"],["^1K","^3Q"],["^1K","^3R","^3S","^3T"],["^1K","^3R","^3S","^3T","^3U"]],"^Z",["^[",[["^1K"],["^1K","^3Q"],["^1K","^3R","^3S","^3T"],["^1K","^3R","^3S","^3T","^3U"]]],"^16",["^[",[null,null,null,null]]],"^U","colorMode()","^14",[["^1K"],["^1K","^3Q"],["^1K","^3R","^3S","^3T"],["^1K","^3R","^3S","^3T","^3U"]],"^15",null,"^1E",5,"^16",["^[",[null,null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",5,"^17",false,"^1H","^19"]],"^X",1018,"^Y",1025,"^1:",5,"^1;",true,"^Z",["^[",[["^1K"],["^1K","^3Q"],["^1K","^3R","^3S","^3T"],["^1K","^3R","^3S","^3T","^3U"]]],"^12","Changes the way Processing interprets color data. Available modes\n  are `:rgb` and `:hsb` (and `:hsl` in Clojurescript).\n  By default, the parameters for [[fill]], [[stroke]],\n  [[background]], and [[color]] are defined by values between 0 and 255 using\n  the `:rgb` color model. The [[color-mode]] function is used to change the\n  numerical range used for specifying colors and to switch color\n  systems. For example, calling\n  `(color-mode :rgb 1.0)` will specify that values are specified between\n  0 and 1. The limits for defining colors are altered by setting the\n  parameters range1, range2, range3, and range 4."],"~$create-image",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","createImage()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","createImage()","^V",3,"^W",true,"^X",1233,"^Y",1233,"^Z",["^[",["^10",["^[",[["~$w","~$h"]]]]],"^12","Creates a new datatype for storing images (`PImage` for clj and\n  `Image` for cljs). This provides a fresh buffer of pixels to play\n  with. Set the size of the buffer with the `width` and `height`\n  parameters.\n\n  In clj the `format` parameter defines how the pixels are stored.\n  See the PImage reference for more information.\n  Possible formats: `:rgb`, `:argb`, `:alpha` (grayscale alpha channel)\n\n  Prefer using [[create-image]] over initialising new `PImage` (or `Image`)\n  instances directly."],"^P","createImage()","^Q","1.0","^@","~$quil.core/create-image","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","createImage()","^14",["^[",[["~$w","~$h"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1226,"^18","^19","^Y",1233,"^1:",2,"^1;",true,"^Z",["^[",["^10",["^[",[["~$w","~$h"]]]]],"^12","Creates a new datatype for storing images (`PImage` for clj and\n  `Image` for cljs). This provides a fresh buffer of pixels to play\n  with. Set the size of the buffer with the `width` and `height`\n  parameters.\n\n  In clj the `format` parameter defines how the pixels are stored.\n  See the PImage reference for more information.\n  Possible formats: `:rgb`, `:argb`, `:alpha` (grayscale alpha channel)\n\n  Prefer using [[create-image]] over initialising new `PImage` (or `Image`)\n  instances directly."],"~$sq",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","sq()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",5,"^U","sq()","^V",3,"^W",false,"^X",4089,"^Y",4089,"^Z",["^[",["^10",["^[",[["~$a"]]]]],"^12","Squares a number (multiplies a number by itself). The result is\n  always a positive number, as multiplying two negative numbers always\n  yields a positive result. For example, -1 * -1 = 1."],"^P","sq()","^Q","1.0","^@","~$quil.core/sq","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",5,"^U","sq()","^14",["^[",[["~$a"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",4082,"^18","^19","^Y",4089,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$a"]]]]],"^12","Squares a number (multiplies a number by itself). The result is\n  always a positive number, as multiplying two negative numbers always\n  yields a positive result. For example, -1 * -1 = 1."],"^1T",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","height","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","height","^V",3,"~:processing-link",null,"^W",true,"^X",1993,"^Y",1993,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Height of the display window. The value of height is zero until\n  size is called."],"^P","height","^Q","1.0","^@","~$quil.core/height","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","height","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^3[",null,"^17",false,"^W",true,"^X",1985,"^18","^19","^Y",1993,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Height of the display window. The value of height is zero until\n  size is called."],"~$no-loop",["^ ","^M","Structure","^N",null,"^O",["^ ","^M","Structure","^P","noLoop()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","noLoop()","^V",3,"^W",true,"^X",2809,"^Y",2809,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Stops Processing from continuously executing the code within\n  `draw`. If [[start-loop]] is called, the code in `draw` will begin to run\n  continuously again. If using [[no-loop]] in setup, it should be the last\n  line inside the block.\n\n  When [[no-loop]] is used, it's not possible to manipulate or access the\n  screen inside event handling functions such as [[mouse-pressed?]] or\n  [[key-pressed?]]. Instead, use those functions to call [[redraw]] or\n  loop which will run `draw`, which can update the screen\n  properly. This means that when [[no-loop]] has been called, no drawing\n  can happen, and functions like [[save-frame]] may not be used.\n\n  Note that if the sketch is resized, [[redraw]] will be called to\n  update the sketch, even after [[no-loop]] has been\n  specified. Otherwise, the sketch would enter an odd state until\n  loop was called."],"^P","noLoop()","^Q","1.0","^@","~$quil.core/no-loop","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","noLoop()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2802,"^18",["^>",[null,"^19"]],"^Y",2809,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Stops Processing from continuously executing the code within\n  `draw`. If [[start-loop]] is called, the code in `draw` will begin to run\n  continuously again. If using [[no-loop]] in setup, it should be the last\n  line inside the block.\n\n  When [[no-loop]] is used, it's not possible to manipulate or access the\n  screen inside event handling functions such as [[mouse-pressed?]] or\n  [[key-pressed?]]. Instead, use those functions to call [[redraw]] or\n  loop which will run `draw`, which can update the screen\n  properly. This means that when [[no-loop]] has been called, no drawing\n  can happen, and functions like [[save-frame]] may not be used.\n\n  Note that if the sketch is resized, [[redraw]] will be called to\n  update the sketch, even after [[no-loop]] has been\n  specified. Otherwise, the sketch would enter an odd state until\n  loop was called."],"~$minute",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","minute()","^Q","1.0","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","minute()","^V",3,"^W",false,"^X",2582,"^Y",2582,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current minute as a value from 0 - 59"],"^P","minute()","^Q","1.0","^@","~$quil.core/minute","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","minute()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",2575,"^18","^19","^Y",2582,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current minute as a value from 0 - 59"],"~$text",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","text()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["~$s","~$x","~$y"],["~$s","~$x1","~$y1","~$x2","~$y2"]],"^Z",["^[",[["~$s","~$x","~$y"],["~$s","^46","^47","^48","^49"]]],"^16",["^[",[null,null]]],"^U","text()","^V",3,"^W",true,"^X",4283,"^Y",4283,"^Z",["^[",["^10",["^[",[["~$s","~$x","~$y"],["~$s","^46","^47","^48","^49"]]]]],"^12","Draws text to the screen in the position specified by the `x` and `y`\n  parameters (and the optional `z` parameter in clj). A default font\n  will be used unless a font is set with the [[text-font]]\n  function. Change the color of the text with the [[fill]]\n  function. The text displays in relation to the\n  [[text-align]] function, which gives the option to draw to the left,\n  right, and center of the coordinates.\n\n  The `x1`, `y1`, `x2` and `y2` parameters define a rectangular area\n  to display within and may only be used with string data. For text\n  drawn inside a rectangle, the coordinates are interpreted based on\n  the current [[rect-mode]] setting."],"^P","text()","^Q","1.0","^@","~$quil.core/text","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["~$s","~$x","~$y"],["~$s","^46","^47","^48","^49"]],"^Z",["^[",[["~$s","~$x","~$y"],["~$s","^46","^47","^48","^49"]]],"^16",["^[",[null,null]]],"^U","text()","^14",[["~$s","~$x","~$y"],["~$s","^46","^47","^48","^49"]],"^15",null,"^1E",5,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",3,"^17",false,"^1H",["^>",["^19","^1I"]]],["^ ","^1E",5,"^17",false,"^1H",["^>",["^19","^1I"]]]],"^X",4276,"^Y",4283,"^1:",5,"^1;",true,"^Z",["^[",[["~$s","~$x","~$y"],["~$s","^46","^47","^48","^49"]]],"^12","Draws text to the screen in the position specified by the `x` and `y`\n  parameters (and the optional `z` parameter in clj). A default font\n  will be used unless a font is set with the [[text-font]]\n  function. Change the color of the text with the [[fill]]\n  function. The text displays in relation to the\n  [[text-align]] function, which gives the option to draw to the left,\n  right, and center of the coordinates.\n\n  The `x1`, `y1`, `x2` and `y2` parameters define a rectangular area\n  to display within and may only be used with string data. For text\n  drawn inside a rectangle, the coordinates are interpreted based on\n  the current [[rect-mode]] setting."],"~$print-every-n-millisec",["^ ","^M","Debugging","^N",null,"^O",["^ ","^M","Debugging","^P",null,"^Q","3.1.0","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",25,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",[["^[",["~$n","~$more"]]],"^Z",["^[",[["~$n","~$&","^4<"]]],"^16",["^[",[null]]],"^U",null,"^V",3,"^W",true,"^X",3421,"^Y",3421,"^Z",["^[",["^10",["^[",[["~$n","~$&","^4<"]]]]],"^12","Prints the provided arguments every `n` milliseconds."],"^P",null,"^Q","3.1.0","^@","~$quil.core/print-every-n-millisec","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",25,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",[["^[",["~$n","^4<"]]],"^Z",["^[",[["~$n","~$&","^4<"]]],"^16",["^[",[null]]],"^U",null,"^14",[["^[",["~$n","^4<"]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^19","^1I"]]]],"^X",3415,"^18","^19","^Y",3421,"^1:",1,"^1;",true,"^Z",["^[",[["~$n","~$&","^4<"]]],"^12","Prints the provided arguments every `n` milliseconds."],"~$rect-modes",["^ ","^@","~$quil.core/rect-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",70,"^T",12,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",70,"^V",2,"^Y",70,"^T",12],"^1H","^2D"],"~$THIRD-PI",["^ ","^@","~$quil.core/THIRD-PI","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",87,"^V",1,"^Y",87,"^T",14,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",87,"^V",6,"^Y",87,"^T",14],"^1H","~$number"],"~$clear",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","clear()","^Q","2.4.0","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","clear()","^V",3,"^W",true,"^X",969,"^Y",969,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Clears the pixels within a buffer. This function only works on\n  graphics objects created with the [[create-graphics]] function meaning\n  that you should call it only inside [[with-graphics]] macro. Unlike\n  the main graphics context (the display window), pixels in additional\n  graphics areas created with [[create-graphics]] can be entirely or\n  partially transparent. This function clears everything in a graphics\n  object to make all of the pixels 100% transparent."],"^P","clear()","^Q","2.4.0","^@","~$quil.core/clear","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","clear()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",962,"^18","^19","^Y",969,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Clears the pixels within a buffer. This function only works on\n  graphics objects created with the [[create-graphics]] function meaning\n  that you should call it only inside [[with-graphics]] macro. Unlike\n  the main graphics context (the display window), pixels in additional\n  graphics areas created with [[create-graphics]] can be entirely or\n  partially transparent. This function clears everything in a graphics\n  object to make all of the pixels 100% transparent."],"~$binary",["^ ","^M","Data","^N",null,"^O",["^ ","^M","Data","~:require-binding",false,"^Q","1.0","^R","Conversion","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^30"],["^30","~$num-digits"]],"^Z",["^[",[["^30"],["^30","^4G"]]],"^16",["^[",[null,null]]],"^U","binary()","^V",3,"^X",718,"^Y",718,"^Z",["^[",["^10",["^[",[["^30"],["^30","^4G"]]]]],"^12","Returns a `string` representing the binary value of an `int`, `char` or\n  `byte`. When converting an `int` to a `string`, it is possible to specify\n  the number of digits used."],"^4F",false,"^Q","1.0","^@","~$quil.core/binary","^R","Conversion","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^30"],["^30","^4G"]],"^Z",["^[",[["^30"],["^30","^4G"]]],"^16",["^[",[null,null]]],"^U","binary()","^14",[["^30"],["^30","^4G"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","~$string"]],"^X",712,"^Y",718,"^1:",2,"^1;",true,"^Z",["^[",[["^30"],["^30","^4G"]]],"^12","Returns a `string` representing the binary value of an `int`, `char` or\n  `byte`. When converting an `int` to a `string`, it is possible to specify\n  the number of digits used."],"~$random-2d",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^Q","2.6.1","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U",null,"^V",3,"^W",true,"^X",3271,"^Y",3271,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns a new 2D unit vector with a random direction"],"^Q","2.6.1","^@","~$quil.core/random-2d","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U",null,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3265,"^18","~$cljs.core/IVector","^Y",3271,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns a new 2D unit vector with a random direction"],"~$pop-matrix",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","pop()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","popMatrix()","^V",3,"^W",true,"^X",3055,"^Y",3055,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Pops the current transformation matrix off the matrix\n  stack. Understanding pushing and popping requires understanding the\n  concept of a matrix stack. The [[push-matrix]] function saves the current\n  coordinate system to the stack and [[pop-matrix]] restores the prior\n  coordinate system. [[push-matrix]] and [[pop-matrix]] are used in conjunction\n  with the other transformation methods and may be embedded to control\n  the scope of the transformations."],"^P","pop()","^Q","1.0","^@","~$quil.core/pop-matrix","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","popMatrix()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3048,"^18","^19","^Y",3055,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Pops the current transformation matrix off the matrix\n  stack. Understanding pushing and popping requires understanding the\n  concept of a matrix stack. The [[push-matrix]] function saves the current\n  coordinate system to the stack and [[pop-matrix]] restores the prior\n  coordinate system. [[push-matrix]] and [[pop-matrix]] are used in conjunction\n  with the other transformation methods and may be embedded to control\n  the scope of the transformations."],"~$ceil",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","ceil()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","ceil()","^V",3,"^W",false,"^X",954,"^Y",954,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","Calculates the closest `int` value that is greater than or equal to\n  the value of the parameter. For example, `(ceil 9.03)` returns the\n  value 10."],"^P","ceil()","^Q","1.0","^@","~$quil.core/ceil","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","ceil()","^14",["^[",[["~$n"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",947,"^18","^19","^Y",954,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","Calculates the closest `int` value that is greater than or equal to\n  the value of the parameter. For example, `(ceil 9.03)` returns the\n  value 10."],"~$key-code",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","keyCode","^Q","1.0","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","keyCode","^V",3,"^W",true,"^X",2191,"^Y",2191,"^Z",["^[",["^10",["^[",[[]]]]],"^12","The variable keyCode is used to detect special keys such as the UP,\n  DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\n  for these keys, it's first necessary to check and see if the key is\n  coded. This is done with the conditional `(= (key) CODED)`.\n\n  The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n  RETURN, ESC, and DELETE) do not require checking to see if they key\n  is coded, and you should simply use the key variable instead of\n  [[key-code]]. If you're making cross-platform projects, note that the\n  ENTER key is commonly used on PCs and Unix and the RETURN key is\n  used instead on Macintosh. Check for both ENTER and RETURN to make\n  sure your program will work for all platforms.\n\n  For users familiar with Java, the values for UP and DOWN are simply\n  shorter versions of Java's `KeyEvent.VK_UP` and\n  `KeyEvent.VK_DOWN`. Other keyCode values can be found in the Java\n  KeyEvent reference."],"^P","keyCode","^Q","1.0","^@","~$quil.core/key-code","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","keyCode","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2184,"^18","^19","^Y",2191,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","The variable keyCode is used to detect special keys such as the UP,\n  DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\n  for these keys, it's first necessary to check and see if the key is\n  coded. This is done with the conditional `(= (key) CODED)`.\n\n  The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n  RETURN, ESC, and DELETE) do not require checking to see if they key\n  is coded, and you should simply use the key variable instead of\n  [[key-code]]. If you're making cross-platform projects, note that the\n  ENTER key is commonly used on PCs and Unix and the RETURN key is\n  used instead on Macintosh. Check for both ENTER and RETURN to make\n  sure your program will work for all platforms.\n\n  For users familiar with Java, the values for UP and DOWN are simply\n  shorter versions of Java's `KeyEvent.VK_UP` and\n  `KeyEvent.VK_DOWN`. Other keyCode values can be found in the Java\n  KeyEvent reference."],"~$sphere",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","sphere()","^Q","1.0","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","sphere()","^V",3,"^W",true,"^X",4034,"^Y",4034,"^Z",["^[",["^10",["^[",[["~$radius"]]]]],"^12","Generates a hollow ball made from tessellated triangles."],"^P","sphere()","^Q","1.0","^@","~$quil.core/sphere","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","sphere()","^14",["^[",[["^4T"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4027,"^18","^19","^Y",4034,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^4T"]]]]],"^12","Generates a hollow ball made from tessellated triangles."],"~$hue",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","hue()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","hue()","^V",3,"^W",true,"^X",2090,"^Y",2090,"^Z",["^[",["^10",["^[",[["~$col"]]]]],"^12","Extracts the hue value from a color."],"^P","hue()","^Q","1.0","^@","~$quil.core/hue","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","hue()","^14",["^[",[["^4W"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2083,"^18","^19","^Y",2090,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^4W"]]]]],"^12","Extracts the hue value from a color."],"~$start-loop",["^ ","^M","Structure","^N",null,"^O",["^ ","^M","Structure","^P","loop()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","loop()","^V",3,"^W",true,"^X",4120,"^Y",4120,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Causes Processing to continuously execute the code within\n  draw. If [[no-loop]] is called, the code in draw stops executing."],"^P","loop()","^Q","1.0","^@","~$quil.core/start-loop","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","loop()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4113,"^18",["^>",[null,"^19"]],"^Y",4120,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Causes Processing to continuously execute the code within\n  draw. If [[no-loop]] is called, the code in draw stops executing."],"~$orbit-control",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","orbitControl()","^Q","3.0.0","^R","Camera","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^V",6,"^W",true,"^X",2889,"^Y",2889,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Allows the camera to orbit around a target using mouse."],"^P","orbitControl()","^Q","3.0.0","^@","~$quil.core/orbit-control","^R","Camera","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",4,"^17",false,"^W",true,"^X",2883,"^18","^19","^Y",2889,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Allows the camera to orbit around a target using mouse."],"~$curve-vertex",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","curveVertex()","^Q","1.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$x","~$y"],["~$x","~$y","~$z"]],"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","curveVertex()","^V",3,"^W",true,"^X",1410,"^Y",1410,"^Z",["^[",["^10",["^[",[["~$x","~$y"],["~$x","~$y","~$z"]]]]],"^12","Specifies vertex coordinates for curves. This function may only be\n  used between [[begin-shape]] and [[end-shape]] and only when there is no\n  `mode` keyword specified to [[begin-shape]]. The first and last points in a\n  series of [[curve-vertex]] lines will be used to guide the beginning and\n  end of a the curve. A minimum of four points is required to draw a\n  tiny curve between the second and third points. Adding a fifth point\n  with [[curve-vertex]] will draw the curve between the second, third, and\n  fourth points. The [[curve-vertex]] function is an implementation of\n  Catmull-Rom splines."],"^P","curveVertex()","^Q","1.0","^@","~$quil.core/curve-vertex","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$x","~$y"],["~$x","~$y","~$z"]],"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","curveVertex()","^14",[["~$x","~$y"],["~$x","~$y","~$z"]],"^15",null,"^1E",3,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",1403,"^Y",1410,"^1:",3,"^1;",true,"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^12","Specifies vertex coordinates for curves. This function may only be\n  used between [[begin-shape]] and [[end-shape]] and only when there is no\n  `mode` keyword specified to [[begin-shape]]. The first and last points in a\n  series of [[curve-vertex]] lines will be used to guide the beginning and\n  end of a the curve. A minimum of four points is required to draw a\n  tiny curve between the second and third points. Adding a fifth point\n  with [[curve-vertex]] will draw the curve between the second, third, and\n  fourth points. The [[curve-vertex]] function is an implementation of\n  Catmull-Rom splines."],"~$state-atom",["^ ","^M","State","^N",null,"^O",["^ ","^M","State","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^V",3,"^W",true,"^X",180,"^Y",180,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Retrieve sketch-specific state-atom. All changes to the\n  atom will be reflected in the state.\n\n  Example:\n  ```\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (swap! (state-atom) update-in [:foo] inc)\n  (state :foo) ;=> 2\n  ```"],"^Q","1.0","^@","~$quil.core/state-atom","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",175,"^18","^19","^Y",180,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Retrieve sketch-specific state-atom. All changes to the\n  atom will be reflected in the state.\n\n  Example:\n  ```\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (swap! (state-atom) update-in [:foo] inc)\n  (state :foo) ;=> 2\n  ```"],"~$load-image",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","loadImage()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","loadImage()","^V",3,"^W",true,"^X",2418,"^Y",2418,"^Z",["^[",["^10",["^[",[["~$filename"]]]]],"^12","Loads an image into a variable of type `PImage`. Four types of\n  images (`.gif`, `.jpg`, `.tga`, `.png`) may be loaded. To load\n  correctly, images must be located in the data directory of the\n  current sketch. In most cases, load all images in `setup` to preload\n  them at the start of the program. Loading images inside `draw` will\n  reduce the speed of a program.\n\n  The filename parameter can also be a URL to a file found online.\n\n  Image is loaded asynchronously. In order to check whether image\n  finished loading use [[loaded?]]."],"^P","loadImage()","^Q","1.0","^@","~$quil.core/load-image","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","loadImage()","^14",["^[",[["^56"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2411,"^18","^19","^Y",2418,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^56"]]]]],"^12","Loads an image into a variable of type `PImage`. Four types of\n  images (`.gif`, `.jpg`, `.tga`, `.png`) may be loaded. To load\n  correctly, images must be located in the data directory of the\n  current sketch. In most cases, load all images in `setup` to preload\n  them at the start of the program. Loading images inside `draw` will\n  reduce the speed of a program.\n\n  The filename parameter can also be a URL to a file found online.\n\n  Image is loaded asynchronously. In order to check whether image\n  finished loading use [[loaded?]]."],"~$bezier",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","bezier()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",12,"^1:",12,"^14",[["^46","^47","~$cx1","~$cy1","~$cx2","~$cy2","^48","^49"],["^46","^47","~$z1","^59","^5:","~$cz1","^5;","^5<","~$cz2","^48","^49","~$z2"]],"^Z",["^[",[["^46","^47","^59","^5:","^5;","^5<","^48","^49"],["^46","^47","^5=","^59","^5:","^5>","^5;","^5<","^5?","^48","^49","^5@"]]],"^16",["^[",[null,null]]],"^U","bezier()","^V",3,"^W",true,"^X",620,"^Y",620,"^Z",["^[",["^10",["^[",[["^46","^47","^59","^5:","^5;","^5<","^48","^49"],["^46","^47","^5=","^59","^5:","^5>","^5;","^5<","^5?","^48","^49","^5@"]]]]],"^12","Draws a Bezier curve on the screen. These curves are defined by a\n  series of anchor and control points. The first two parameters\n  specify the first anchor point and the last two parameters specify\n  the other anchor point. The middle parameters specify the control\n  points which define the shape of the curve."],"^P","bezier()","^Q","1.0","^@","~$quil.core/bezier","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",12,"^1:",12,"^14",[["^46","^47","^59","^5:","^5;","^5<","^48","^49"],["^46","^47","^5=","^59","^5:","^5>","^5;","^5<","^5?","^48","^49","^5@"]],"^Z",["^[",[["^46","^47","^59","^5:","^5;","^5<","^48","^49"],["^46","^47","^5=","^59","^5:","^5>","^5;","^5<","^5?","^48","^49","^5@"]]],"^16",["^[",[null,null]]],"^U","bezier()","^14",[["^46","^47","^59","^5:","^5;","^5<","^48","^49"],["^46","^47","^5=","^59","^5:","^5>","^5;","^5<","^5?","^48","^49","^5@"]],"^15",null,"^1E",12,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",8,"^17",false,"^1H","^19"],["^ ","^1E",12,"^17",false,"^1H","^19"]],"^X",613,"^Y",620,"^1:",12,"^1;",true,"^Z",["^[",[["^46","^47","^59","^5:","^5;","^5<","^48","^49"],["^46","^47","^5=","^59","^5:","^5>","^5;","^5<","^5?","^48","^49","^5@"]]],"^12","Draws a Bezier curve on the screen. These curves are defined by a\n  series of anchor and control points. The first two parameters\n  specify the first anchor point and the last two parameters specify\n  the other anchor point. The middle parameters specify the control\n  points which define the shape of the curve."],"~$smooth",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","smooth()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^1L"]],"^Z",["^[",[[],["^1L"]]],"^16",["^[",[null,null]]],"^U","smooth()","^V",3,"^W",true,"^X",3982,"^Y",3982,"^Z",["^[",["^10",["^[",[[],["^1L"]]]]],"^12","Draws all geometry with smooth (anti-aliased) edges. This will slow\n  down the frame rate of the application, but will enhance the visual\n  refinement.\n\n  Must be called inside `:settings` handler.\n\n  The `level` parameter (int) increases the level of smoothness with the\n  `:p2d` and `:p3d` renderers. This is the level of over sampling applied to\n  the graphics buffer. The value `2` will double the rendering size\n  before scaling it down to the display size. This is called `2x\n  anti-aliasing`. The value `4` is used for `4x anti-aliasing` and `8` is\n  specified for `8x anti-aliasing`. If level is set to `0`, it will disable\n  all smoothing; it's the equivalent of the function [[no-smooth]].\n  The maximum anti-aliasing level is determined by the hardware of the\n  machine that is running the software.\n\n  Note that smooth will also improve image quality of resized images."],"^P","smooth()","^Q","1.0","^@","~$quil.core/smooth","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^1L"]],"^Z",["^[",[[],["^1L"]]],"^16",["^[",[null,null]]],"^U","smooth()","^14",[[],["^1L"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^19"]],"^X",3975,"^Y",3982,"^1:",1,"^1;",true,"^Z",["^[",[[],["^1L"]]],"^12","Draws all geometry with smooth (anti-aliased) edges. This will slow\n  down the frame rate of the application, but will enhance the visual\n  refinement.\n\n  Must be called inside `:settings` handler.\n\n  The `level` parameter (int) increases the level of smoothness with the\n  `:p2d` and `:p3d` renderers. This is the level of over sampling applied to\n  the graphics buffer. The value `2` will double the rendering size\n  before scaling it down to the display size. This is called `2x\n  anti-aliasing`. The value `4` is used for `4x anti-aliasing` and `8` is\n  specified for `8x anti-aliasing`. If level is set to `0`, it will disable\n  all smoothing; it's the equivalent of the function [[no-smooth]].\n  The maximum anti-aliasing level is determined by the hardware of the\n  machine that is running the software.\n\n  Note that smooth will also improve image quality of resized images."],"~$filter-modes",["^ ","^@","~$quil.core/filter-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",80,"^T",14,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",80,"^V",2,"^Y",80,"^T",14],"^1H","^2D"],"~$shear-x",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","shearX()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","shearX()","^V",3,"^W",true,"^X",3880,"^Y",3880,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Shears a shape around the x-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the [[radians]] function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling `(shear-x (/ PI 2))` and then `(shear-x (/ PI 2))` is\n  the same as `(shear-x PI)`. If [[shear-x]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, [[shear-x]] multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  [[push-matrix]] and [[pop-matrix]] functions."],"^P","shearX()","^Q","1.0","^@","~$quil.core/shear-x","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","shearX()","^14",["^[",[["^11"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3873,"^18","^19","^Y",3880,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Shears a shape around the x-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the [[radians]] function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling `(shear-x (/ PI 2))` and then `(shear-x (/ PI 2))` is\n  the same as `(shear-x PI)`. If [[shear-x]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, [[shear-x]] multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  [[push-matrix]] and [[pop-matrix]] functions."],"~$stroke-weight",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","strokeWeight()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","strokeWeight()","^V",3,"^W",true,"^X",4210,"^Y",4210,"^Z",["^[",["^10",["^[",[["~$weight"]]]]],"^12","Sets the width of the stroke used for lines, points, and the border\n  around shapes. All widths are set in units of pixels. "],"^P","strokeWeight()","^Q","1.0","^@","~$quil.core/stroke-weight","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","strokeWeight()","^14",["^[",[["^5I"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4203,"^18","^19","^Y",4210,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^5I"]]]]],"^12","Sets the width of the stroke used for lines, points, and the border\n  around shapes. All widths are set in units of pixels. "],"~$directional-light",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","directionalLight()","^Q","1.0","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",20,"^U","directionalLight()","^V",3,"^W",true,"^X",1495,"^Y",1495,"^Z",["^[",["^10",["^[",[["~$r","~$g","~$b","~$nx","~$ny","~$nz"]]]]],"^12","Adds a directional light. Directional light comes from one\n  direction and is stronger when hitting a surface squarely and weaker\n  if it hits at a gentle angle. After hitting a surface, a\n  directional lights scatters in all directions. Lights need to be\n  included in the `draw` function to remain persistent in a looping\n  program. Placing them in the `setup` function of a looping program will cause\n  them to only have an effect the first time through the loop. The\n  affect of the `r`, `g`, and `b` parameters is determined by the current\n  color mode. The `nx`, `ny`, and `nz` parameters specify the direction the\n  light is facing. For example, setting `ny` to -1 will cause the\n  geometry to be lit from below (the light is facing directly upward)."],"^P","directionalLight()","^Q","1.0","^@","~$quil.core/directional-light","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",20,"^U","directionalLight()","^14",["^[",[["~$r","~$g","~$b","^5L","^5M","^5N"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1488,"^18","^19","^Y",1495,"^1:",6,"^1;",true,"^Z",["^[",["^10",["^[",[["~$r","~$g","~$b","^5L","^5M","^5N"]]]]],"^12","Adds a directional light. Directional light comes from one\n  direction and is stronger when hitting a surface squarely and weaker\n  if it hits at a gentle angle. After hitting a surface, a\n  directional lights scatters in all directions. Lights need to be\n  included in the `draw` function to remain persistent in a looping\n  program. Placing them in the `setup` function of a looping program will cause\n  them to only have an effect the first time through the loop. The\n  affect of the `r`, `g`, and `b` parameters is determined by the current\n  color mode. The `nx`, `ny`, and `nz` parameters specify the direction the\n  light is facing. For example, setting `ny` to -1 will cause the\n  geometry to be lit from below (the light is facing directly upward)."],"~$frame-rate",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","frameRate()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","frameRate()","^V",3,"^W",true,"^X",1896,"^Y",1896,"^Z",["^[",["^10",["^[",[["~$new-rate"]]]]],"^12","Specifies a new target framerate (number of frames to be displayed every\n  second). If the processor is not fast enough to maintain the\n  specified rate, it will not be achieved. For example, the function\n  call `(frame-rate 30)` will attempt to refresh 30 times a second. It\n  is recommended to set the frame rate within setup. The default rate\n  is 60 frames per second."],"^P","frameRate()","^Q","1.0","^@","~$quil.core/frame-rate","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","frameRate()","^14",["^[",[["^5Q"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1889,"^18","^19","^Y",1896,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^5Q"]]]]],"^12","Specifies a new target framerate (number of frames to be displayed every\n  second). If the processor is not fast enough to maintain the\n  specified rate, it will not be achieved. For example, the function\n  call `(frame-rate 30)` will attempt to refresh 30 times a second. It\n  is recommended to set the frame rate within setup. The default rate\n  is 60 frames per second."],"~$hour",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","hour()","^Q","1.0","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","hour()","^V",3,"^W",false,"^X",2077,"^Y",2077,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current hour as a value from 0 - 23."],"^P","hour()","^Q","1.0","^@","~$quil.core/hour","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","hour()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",2070,"^18","^19","^Y",2077,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current hour as a value from 0 - 23."],"~$atan",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","atan()","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","atan()","^V",3,"^W",false,"^X",446,"^Y",446,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","The inverse of [[tan]], returns the arc tangent of a value. This\n  function expects the values in the range of -Infinity to\n  Infinity (exclusive) and values are returned in the range `-PI/2` to\n  `PI/2`."],"^P","atan()","^Q","1.0","^@","~$quil.core/atan","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","atan()","^14",["^[",[["~$n"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",439,"^18","^19","^Y",446,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","The inverse of [[tan]], returns the arc tangent of a value. This\n  function expects the values in the range of -Infinity to\n  Infinity (exclusive) and values are returned in the range `-PI/2` to\n  `PI/2`."],"~$stroke-join-modes",["^ ","^@","~$quil.core/stroke-join-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",73,"^T",19,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",73,"^V",2,"^Y",73,"^T",19],"^1H","^2D"],"~$rotate-y",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","rotateY()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","rotateY()","^V",3,"^W",true,"^X",3611,"^Y",3611,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Rotates a shape around the y-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the [[radians]] function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling `(rotate-y HALF-PI)` and then `(rotate-y HALF-PI)` is\n  the same as `(rotate-y PI)`. If [[rotate-y]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function requires either the `:p3d` or `:opengl` renderer."],"^P","rotateY()","^Q","1.0","^@","~$quil.core/rotate-y","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","rotateY()","^14",["^[",[["^11"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3604,"^18","^19","^Y",3611,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Rotates a shape around the y-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0\n  to (* PI 2)) or converted to radians with the [[radians]] function.\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a counterclockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling `(rotate-y HALF-PI)` and then `(rotate-y HALF-PI)` is\n  the same as `(rotate-y PI)`. If [[rotate-y]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function requires either the `:p3d` or `:opengl` renderer."],"~$day",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","day()","^Q","1.0","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","day()","^V",3,"^W",false,"^X",1445,"^Y",1445,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Get the current day of the month (1 through 31)."],"^P","day()","^Q","1.0","^@","~$quil.core/day","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","day()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",1438,"^18","^19","^Y",1445,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Get the current day of the month (1 through 31)."],"~$point-light",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","pointLight()","^Q","1.0","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","pointLight()","^V",3,"^W",true,"^X",3038,"^Y",3038,"^Z",["^[",["^10",["^[",[["~$r","~$g","~$b","~$x","~$y","~$z"]]]]],"^12","Adds a point light. Lights need to be included in the draw() to\n  remain persistent in a looping program. Placing them in the setup()\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the `r`, `g`, and `b`\n  parameters is determined by the current [[color-mode]]. The `x`, `y`, and `z`\n  parameters set the position of the light"],"^P","pointLight()","^Q","1.0","^@","~$quil.core/point-light","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","pointLight()","^14",["^[",[["~$r","~$g","~$b","~$x","~$y","~$z"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3031,"^18","^19","^Y",3038,"^1:",6,"^1;",true,"^Z",["^[",["^10",["^[",[["~$r","~$g","~$b","~$x","~$y","~$z"]]]]],"^12","Adds a point light. Lights need to be included in the draw() to\n  remain persistent in a looping program. Placing them in the setup()\n  of a looping program will cause them to only have an effect the\n  first time through the loop. The affect of the `r`, `g`, and `b`\n  parameters is determined by the current [[color-mode]]. The `x`, `y`, and `z`\n  parameters set the position of the light"],"~$pmouse-x",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","pmouseX","^Q","1.0","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","pmouseX","^V",3,"^W",true,"^X",2993,"^Y",2993,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Horizontal coordinate of the mouse in the previous frame"],"^P","pmouseX","^Q","1.0","^@","~$quil.core/pmouse-x","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","pmouseX","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2986,"^18","^19","^Y",2993,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Horizontal coordinate of the mouse in the previous frame"],"~$get-sketch-by-id",["^ ","^M",null,"^N",null,"^O",["^ ","^M",null,"^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",22,"^V",6,"^W",true,"^X",164,"^Y",164,"^Z",["^[",["^10",["^[",[["~$id"]]]]],"^12","Returns sketch object by id of canvas element of sketch."],"^Q","1.0","^@","~$quil.core/get-sketch-by-id","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",22,"^14",["^[",[["^66"]]],"^15",null,"^16",["^[",[null,null]],"^V",4,"^17",false,"^W",true,"^X",159,"^18",["^>",["~$js","^1I"]],"^Y",164,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^66"]]]]],"^12","Returns sketch object by id of canvas element of sketch."],"^33",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","stroke()","^Q","1.0","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["~$gray"],["^69","~$alpha"],["~$x","~$y","~$z"],["~$x","~$y","~$z","^6:"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$x","~$y","~$z"],["~$x","~$y","~$z","^6:"]]],"^16",["^[",[null,null,null,null]]],"^U","stroke()","^V",3,"^W",true,"^X",4140,"^Y",4140,"^Z",["^[",["^10",["^[",[["^69"],["^69","^6:"],["~$x","~$y","~$z"],["~$x","~$y","~$z","^6:"]]]]],"^12","Sets the color used to draw lines and borders around shapes. This\n  color is either specified in terms of the RGB or HSB color depending\n  on the current [[color-mode]] (the default color space is RGB, with\n  each value in the range from 0 to 255).\n  If nil is passed it removes any stroke color; equivalent to [[no-stroke]]."],"^P","stroke()","^Q","1.0","^@","~$quil.core/stroke","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$x","~$y","~$z"],["~$x","~$y","~$z","^6:"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$x","~$y","~$z"],["~$x","~$y","~$z","^6:"]]],"^16",["^[",[null,null,null,null]]],"^U","stroke()","^14",[["^69"],["^69","^6:"],["~$x","~$y","~$z"],["~$x","~$y","~$z","^6:"]],"^15",null,"^1E",4,"^16",["^[",[null,null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H",["^>",[null,"^19"]]],["^ ","^1E",2,"^17",false,"^1H",["^>",[null,"^19"]]],["^ ","^1E",3,"^17",false,"^1H",["^>",[null,"^19"]]],["^ ","^1E",4,"^17",false,"^1H",["^>",[null,"^19"]]]],"^X",4133,"^Y",4140,"^1:",4,"^1;",true,"^Z",["^[",[["^69"],["^69","^6:"],["~$x","~$y","~$z"],["~$x","~$y","~$z","^6:"]]],"^12","Sets the color used to draw lines and borders around shapes. This\n  color is either specified in terms of the RGB or HSB color depending\n  on the current [[color-mode]] (the default color space is RGB, with\n  each value in the range from 0 to 255).\n  If nil is passed it removes any stroke color; equivalent to [[no-stroke]]."],"~$mouse-pressed?",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","mouseIsPressed","^Q","1.0","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^U","mousePressed","^V",3,"^W",true,"^X",2634,"^Y",2634,"^Z",["^[",["^10",["^[",[[]]]]],"^12","true if a mouse button is pressed, false otherwise."],"^P","mouseIsPressed","^Q","1.0","^@","~$quil.core/mouse-pressed?","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^U","mousePressed","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2627,"^18","^19","^Y",2634,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","true if a mouse button is pressed, false otherwise."],"~$key-pressed?",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","keyIsPressed","^Q","1.0","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","keyPressed","^V",3,"^W",true,"^X",2241,"^Y",2241,"^Z",["^[",["^10",["^[",[[]]]]],"^12","true if any key is currently pressed, false otherwise."],"^P","keyIsPressed","^Q","1.0","^@","~$quil.core/key-pressed?","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","keyPressed","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2234,"^18","^19","^Y",2241,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","true if any key is currently pressed, false otherwise."],"~$display-density",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","displayDensity()","^Q","2.4.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["~$display"]],"^Z",["^[",[[],["^6A"]]],"^16",["^[",[null,null]]],"^U","displayDensity()","^V",3,"^W",true,"^X",1751,"^Y",1751,"^Z",["^[",["^10",["^[",[[],["^6A"]]]]],"^12","This function returns the number 2 if the screen is a high-density\n  screen (called a Retina display on OS X or high-dpi on Windows and\n  Linux) and a 1 if not. This information is useful for a program to\n  adapt to run at double the pixel density on a screen that supports\n  it. Can be used in conjunction with [[pixel-density]]."],"^P","displayDensity()","^Q","2.4.0","^@","~$quil.core/display-density","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^6A"]],"^Z",["^[",[[],["^6A"]]],"^16",["^[",[null,null]]],"^U","displayDensity()","^14",[[],["^6A"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^19"]],"^X",1744,"^Y",1751,"^1:",1,"^1;",true,"^Z",["^[",[[],["^6A"]]],"^12","This function returns the number 2 if the screen is a high-density\n  screen (called a Retina display on OS X or high-dpi on Windows and\n  Linux) and a 1 if not. This information is useful for a program to\n  adapt to run at double the pixel density on a screen that supports\n  it. Can be used in conjunction with [[pixel-density]]."],"~$quadratic-vertex",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","quadraticVertex()","^Q","2.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["~$cx","~$cy","~$x3","~$y3"],["^6D","^6E","~$cz","^6F","^6G","~$z3"]],"^Z",["^[",[["^6D","^6E","^6F","^6G"],["^6D","^6E","^6H","^6F","^6G","^6I"]]],"^16",["^[",[null,null]]],"^U","quadraticVertex()","^V",3,"^W",true,"^X",3213,"^Y",3213,"^Z",["^[",["^10",["^[",[["^6D","^6E","^6F","^6G"],["^6D","^6E","^6H","^6F","^6G","^6I"]]]]],"^12","Specifies vertex coordinates for quadratic Bezier curves. Each call to\n  [[quadratic-vertex]] defines the position of one control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or shape.\n  The first time [[quadratic-vertex]] is used within a [[begin-shape]] call, it\n  must be prefaced with a call to [[vertex]] to set the first anchor point.\n  This function must be used between [[begin-shape]] and [[end-shape]] and only\n  when there is no MODE parameter specified to begin-shape. Using the 3D\n  version requires rendering with `:p3d`."],"^P","quadraticVertex()","^Q","2.0","^@","~$quil.core/quadratic-vertex","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["^6D","^6E","^6F","^6G"],["^6D","^6E","^6H","^6F","^6G","^6I"]],"^Z",["^[",[["^6D","^6E","^6F","^6G"],["^6D","^6E","^6H","^6F","^6G","^6I"]]],"^16",["^[",[null,null]]],"^U","quadraticVertex()","^14",[["^6D","^6E","^6F","^6G"],["^6D","^6E","^6H","^6F","^6G","^6I"]],"^15",null,"^1E",6,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",6,"^17",false,"^1H","^19"]],"^X",3206,"^Y",3213,"^1:",6,"^1;",true,"^Z",["^[",[["^6D","^6E","^6F","^6G"],["^6D","^6E","^6H","^6F","^6G","^6I"]]],"^12","Specifies vertex coordinates for quadratic Bezier curves. Each call to\n  [[quadratic-vertex]] defines the position of one control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or shape.\n  The first time [[quadratic-vertex]] is used within a [[begin-shape]] call, it\n  must be prefaced with a call to [[vertex]] to set the first anchor point.\n  This function must be used between [[begin-shape]] and [[end-shape]] and only\n  when there is no MODE parameter specified to begin-shape. Using the 3D\n  version requires rendering with `:p3d`."],"~$pixel-density",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","pixelDensity()","^Q","2.4.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","pixelDensity()","^V",3,"^W",true,"^X",2947,"^Y",2947,"^Z",["^[",["^10",["^[",[["~$density"]]]]],"^12","It makes it possible for Processing to render using all of the pixels\n  on high resolutions screens like Apple Retina displays and Windows\n  High-DPI displays. Possible values 1 or 2. Must be called only from\n  `:settings` handler. To get density of the current screen you can use\n  the [[display-density]] function."],"^P","pixelDensity()","^Q","2.4.0","^@","~$quil.core/pixel-density","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","pixelDensity()","^14",["^[",[["^6L"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2940,"^18","^19","^Y",2947,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^6L"]]]]],"^12","It makes it possible for Processing to render using all of the pixels\n  on high resolutions screens like Apple Retina displays and Windows\n  High-DPI displays. Possible values 1 or 2. Must be called only from\n  `:settings` handler. To get density of the current screen you can use\n  the [[display-density]] function."],"~$texture-wrap-modes",["^ ","^@","~$quil.core/texture-wrap-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",79,"^T",20,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",79,"^V",2,"^Y",79,"^T",20],"^1H","^2D"],"~$noise-seed",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","noiseSeed()","^Q","1.0","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","noiseSeed()","^V",3,"^W",true,"^X",2779,"^Y",2779,"^Z",["^[",["^10",["^[",[["^30"]]]]],"^12","Sets the seed value for noise. By default, noise produces different\n  results each time the program is run. Set the `val` parameter to a\n  constant to return the same pseudo-random numbers each time the\n  software is run."],"^P","noiseSeed()","^Q","1.0","^@","~$quil.core/noise-seed","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","noiseSeed()","^14",["^[",[["^30"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2772,"^18","^19","^Y",2779,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^30"]]]]],"^12","Sets the seed value for noise. By default, noise produces different\n  results each time the program is run. Set the `val` parameter to a\n  constant to return the same pseudo-random numbers each time the\n  software is run."],"~$apply-matrix",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","applyMatrix()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","applyMatrix()","^V",3,"^W",true,"^X",372,"^Y",372,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$e","~$f"]]]]],"^12","Multiplies the current matrix by the one specified through the\n  parameters. This is very slow because it will try to calculate the\n  inverse of the transform, so avoid it whenever possible. The\n  equivalent function in OpenGL is `glMultMatrix()`.\n\n  Note that cljs has only 2d version and arguments differ see\n  https://p5js.org/reference/#/p5/applyMatrix"],"^P","applyMatrix()","^Q","1.0","^@","~$quil.core/apply-matrix","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","applyMatrix()","^14",["^[",[["~$a","~$b","~$c","~$d","~$e","~$f"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",365,"^18","^19","^Y",372,"^1:",6,"^1;",true,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$e","~$f"]]]]],"^12","Multiplies the current matrix by the one specified through the\n  parameters. This is very slow because it will try to calculate the\n  inverse of the transform, so avoid it whenever possible. The\n  equivalent function in OpenGL is `glMultMatrix()`.\n\n  Note that cljs has only 2d version and arguments differ see\n  https://p5js.org/reference/#/p5/applyMatrix"],"~$copy",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","copy()","^Q","1.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[[["~$sx","~$sy","~$swidth","~$sheight"],["^1U","^1V","^1W","^1X"]],["^1Y",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y","^1Z",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]]],"^Z",["^[",[[["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y","^1Z",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]]]],"^16",["^[",[null,null,null]]],"^U","copy()","^V",3,"^W",true,"^X",1095,"^Y",1095,"^Z",["^[",["^10",["^[",[[["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y","^1Z",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]]]]]],"^12","Copies a region of pixels from one image to another. If `src-img`\n  is not specified it defaults to [[current-graphics]]. If `dest-img` is not\n  specified - it defaults to [[current-graphics]]. If the source\n  and destination regions aren't the same size, it will automatically\n  resize the source pixels to fit the specified target region. No\n  alpha information is used in the process, however if the source\n  image has an alpha channel set, it will be copied as well. "],"^P","copy()","^Q","1.0","^@","~$quil.core/copy","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[[["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y","^1Z",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]]],"^Z",["^[",[[["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y","^1Z",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]]]],"^16",["^[",[null,null,null]]],"^U","copy()","^14",[[["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y","^1Z",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]]],"^15",null,"^1E",4,"^16",["^[",[null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"]],"^X",1088,"^Y",1095,"^1:",4,"^1;",true,"^Z",["^[",[[["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]],["^1Y","^1Z",["^6U","^6V","^6W","^6X"],["^1U","^1V","^1W","^1X"]]]],"^12","Copies a region of pixels from one image to another. If `src-img`\n  is not specified it defaults to [[current-graphics]]. If `dest-img` is not\n  specified - it defaults to [[current-graphics]]. If the source\n  and destination regions aren't the same size, it will automatically\n  resize the source pixels to fit the specified target region. No\n  alpha information is used in the process, however if the source\n  image has an alpha channel set, it will be copied as well. "],"~$random-3d",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^Q","2.6.1","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U",null,"^V",3,"^W",true,"^X",3283,"^Y",3283,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns a new 3D unit vector with a random direction"],"^Q","2.6.1","^@","~$quil.core/random-3d","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U",null,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3277,"^18","^4L","^Y",3283,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns a new 3D unit vector with a random direction"],"~$begin-shape",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","beginShape()","^Q","1.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^1K"]],"^Z",["^[",[[],["^1K"]]],"^16",["^[",[null,null]]],"^U","beginShape()","^V",3,"^W",true,"^X",589,"^Y",589,"^Z",["^[",["^10",["^[",[[],["^1K"]]]]],"^12","Enables the creation of complex forms. [[begin-shape]] begins recording\n  vertices. With no mode specified, the shape can be any irregular\n  polygon.\n\n  The available mode keywords are `:points`, `:lines`, `:triangles`,\n                                  `:triangle-fan`, `:triangle-strip`,\n                                  `:quads`, `:quad-strip`.\n\n  After calling the [[begin-shape]] function, a series of vertex commands\n  must follow. To stop drawing the shape, call [[end-shape]]. The [[vertex]]\n  function with two parameters specifies a position in 2D and the\n  [[vertex]] function with three parameters specifies a position in\n  3D. Each shape will be outlined with the [[current-stroke]] color and\n  filled with the [[fill]] color.\n\n  Transformations such as [[translate]], [[rotate]], and [[scale]] do not work\n  within [[begin-shape]]. It is also not possible to use other shapes,\n  such as [[ellipse]] or [[rect]] within [[begin-shape]]."],"^P","beginShape()","^Q","1.0","^@","~$quil.core/begin-shape","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^1K"]],"^Z",["^[",[[],["^1K"]]],"^16",["^[",[null,null]]],"^U","beginShape()","^14",[[],["^1K"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^19"]],"^X",582,"^Y",589,"^1:",1,"^1;",true,"^Z",["^[",[[],["^1K"]]],"^12","Enables the creation of complex forms. [[begin-shape]] begins recording\n  vertices. With no mode specified, the shape can be any irregular\n  polygon.\n\n  The available mode keywords are `:points`, `:lines`, `:triangles`,\n                                  `:triangle-fan`, `:triangle-strip`,\n                                  `:quads`, `:quad-strip`.\n\n  After calling the [[begin-shape]] function, a series of vertex commands\n  must follow. To stop drawing the shape, call [[end-shape]]. The [[vertex]]\n  function with two parameters specifies a position in 2D and the\n  [[vertex]] function with three parameters specifies a position in\n  3D. Each shape will be outlined with the [[current-stroke]] color and\n  filled with the [[fill]] color.\n\n  Transformations such as [[translate]], [[rotate]], and [[scale]] do not work\n  within [[begin-shape]]. It is also not possible to use other shapes,\n  such as [[ellipse]] or [[rect]] within [[begin-shape]]."],"~$set-state!",["^ ","^M","State","^N",null,"^O",["^ ","^M","State","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",true,"^1E",0,"^1:",0,"^14",[["^[",["~$state-vals"]]],"^Z",["^[",[["~$&","^73"]]],"^16",["^[",[null]]],"^V",3,"^W",true,"^X",232,"^Y",232,"^Z",["^[",["^10",["^[",[["~$&","^73"]]]]],"^12","Set sketch-specific state. May only be called once (ideally in the\n  setup function). Subsequent calls have no effect.\n\n  Example:\n  ```\n  (set-state! :foo 1 :bar (atom true) :baz (/ (width) 2))\n  ```"],"^Q","1.0","^@","~$quil.core/set-state!","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",true,"^1E",0,"^1:",0,"^14",[["^[",["^73"]]],"^Z",["^[",[["~$&","^73"]]],"^16",["^[",[null]]],"^14",[["^[",["^73"]]],"^15",null,"^1E",0,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",0,"^17",true,"^1H",["^>",[null,"^19","^1I"]]]],"^X",227,"^18","^19","^Y",232,"^1:",0,"^1;",true,"^Z",["^[",[["~$&","^73"]]],"^12","Set sketch-specific state. May only be called once (ideally in the\n  setup function). Subsequent calls have no effect.\n\n  Example:\n  ```\n  (set-state! :foo 1 :bar (atom true) :baz (/ (width) 2))\n  ```"],"~$stroke-join",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","strokeJoin()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","strokeJoin()","^V",3,"^W",true,"^X",4189,"^Y",4189,"^Z",["^[",["^10",["^[",[["~$join-mode"]]]]],"^12","Sets the style of the joints which connect line\n  segments. These joints are either mitered, beveled, or rounded and\n  specified with the corresponding parameters `:miter`, `:bevel`, and\n  `:round`. The default joint is `:miter`.\n\n  This function is not available with the `:p2d`, `:p3d`, or `:opengl`\n  renderers."],"^P","strokeJoin()","^Q","1.0","^@","~$quil.core/stroke-join","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","strokeJoin()","^14",["^[",[["^76"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4182,"^18","^19","^Y",4189,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^76"]]]]],"^12","Sets the style of the joints which connect line\n  segments. These joints are either mitered, beveled, or rounded and\n  specified with the corresponding parameters `:miter`, `:bevel`, and\n  `:round`. The default joint is `:miter`.\n\n  This function is not available with the `:p2d`, `:p3d`, or `:opengl`\n  renderers."],"~$cos",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","cos()","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","cos()","^V",3,"^W",false,"^X",1123,"^Y",1123,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Calculates the cosine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  Math/PI*2). Values are returned in the range -1 to 1."],"^P","cos()","^Q","1.0","^@","~$quil.core/cos","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","cos()","^14",["^[",[["^11"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",1116,"^18","^19","^Y",1123,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Calculates the cosine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  Math/PI*2). Values are returned in the range -1 to 1."],"~$curve-tightness",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","curveTightness()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^U","curveTightness()","^V",3,"^W",true,"^X",1391,"^Y",1391,"^Z",["^[",["^10",["^[",[["~$tightness"]]]]],"^12","Modifies the quality of forms created with curve and\n  [[curve-vertex]]. The parameter `tightness` determines how the curve fits\n  to the vertex points. The value 0.0 is the default value for\n  `tightness` (this value defines the curves to be Catmull-Rom splines)\n  and the value 1.0 connects all the points with straight\n  lines. Values within the range -5.0 and 5.0 will deform the curves\n  but will leave them recognizable and as values increase in\n  magnitude, they will continue to deform."],"^P","curveTightness()","^Q","1.0","^@","~$quil.core/curve-tightness","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^U","curveTightness()","^14",["^[",[["^7;"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1384,"^18","^19","^Y",1391,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^7;"]]]]],"^12","Modifies the quality of forms created with curve and\n  [[curve-vertex]]. The parameter `tightness` determines how the curve fits\n  to the vertex points. The value 0.0 is the default value for\n  `tightness` (this value defines the curves to be Catmull-Rom splines)\n  and the value 1.0 connects all the points with straight\n  lines. Values within the range -5.0 and 5.0 will deform the curves\n  but will leave them recognizable and as values increase in\n  magnitude, they will continue to deform."],"~$text-styles",["^ ","^@","~$quil.core/text-styles","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",77,"^T",24,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",77,"^V",13,"^Y",77,"^T",24],"^1H","^2D"],"~$internal-state",["^ ","^N",null,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",195,"^V",8,"^Y",195,"^T",22,"~:private",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns atom representing internal sketch state. Can be used by\n  functions to save implementation-specific state. This state is\n  supposed to be visible to users."],"^7@",true,"^@","~$quil.core/internal-state","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",22,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^X",195,"^18","^19","^Y",195,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns atom representing internal sketch state. Can be used by\n  functions to save implementation-specific state. This state is\n  supposed to be visible to users."],"~$end-draw",["^ ","^N",null,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",4849,"^V",7,"^Y",4849,"^T",15,"^Z",["^[",["^10",["^[",[["^25"]]]]]],"^@","~$quil.core/end-draw","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^14",["^[",[["^25"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^X",4849,"^18","^1I","^Y",4849,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^25"]]]]]],"~$tan",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","tan()","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","tan()","^V",3,"^W",false,"^X",4223,"^Y",4223,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Calculates the ratio of the sine and cosine of an angle. This\n  function expects the values of the angle parameter to be provided in\n  radians (values from 0 to PI*2). Values are returned in the range\n  infinity to -infinity."],"^P","tan()","^Q","1.0","^@","~$quil.core/tan","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","tan()","^14",["^[",[["^11"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",4216,"^18","^19","^Y",4223,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Calculates the ratio of the sine and cosine of an angle. This\n  function expects the values of the angle parameter to be provided in\n  radians (values from 0 to PI*2). Values are returned in the range\n  infinity to -infinity."],"~$triangle",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","triangle()","^Q","1.0","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","triangle()","^V",3,"^W",true,"^X",4618,"^Y",4618,"^Z",["^[",["^10",["^[",[["^46","^47","^48","^49","^6F","^6G"]]]]],"^12","A triangle is a plane created by connecting three points. The first\n  two arguments specify the first point, the middle two arguments\n  specify the second point, and the last two arguments specify the\n  third point."],"^P","triangle()","^Q","1.0","^@","~$quil.core/triangle","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","triangle()","^14",["^[",[["^46","^47","^48","^49","^6F","^6G"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4611,"^18","^19","^Y",4618,"^1:",6,"^1;",true,"^Z",["^[",["^10",["^[",[["^46","^47","^48","^49","^6F","^6G"]]]]],"^12","A triangle is a plane created by connecting three points. The first\n  two arguments specify the first point, the middle two arguments\n  specify the second point, and the last two arguments specify the\n  third point."],"~$sketch",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",true,"^1E",0,"^1:",0,"^14",[["^[",["~$opts"]]],"^Z",["^[",[["~$&","^7I"]]],"^16",["^[",[null]]],"^V",3,"^W",false,"^X",4872,"^Y",4872,"^Z",["^[",["^10",["^[",[["~$&","^7I"]]]]],"^12","Create and start a new visualisation applet. Can be used to create\n  new sketches programmatically. See documentation for [[defsketch]] for\n  list of available options."],"^Q","1.0","^@","~$quil.core/sketch","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",true,"^1E",0,"^1:",0,"^14",[["^[",["^7I"]]],"^Z",["^[",[["~$&","^7I"]]],"^16",["^[",[null]]],"^14",[["^[",["^7I"]]],"^15",null,"^1E",0,"^16",["^[",[null]],"^V",1,"^17",true,"^W",false,"^1G",[["^ ","^1E",0,"^17",true,"^1H","^19"]],"^X",4868,"^18","^19","^Y",4872,"^1:",0,"^1;",true,"^Z",["^[",[["~$&","^7I"]]],"^12","Create and start a new visualisation applet. Can be used to create\n  new sketches programmatically. See documentation for [[defsketch]] for\n  list of available options."],"~$color",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","color()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^16",["^[",[null,null,null,null]]],"^U","color()","^V",3,"^W",true,"^X",1002,"^Y",1002,"^Z",["^[",["^10",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^12","Creates an integer representation of a color. The parameters are\n  interpreted as RGB or HSB values depending on the current\n  [[color-mode]]. The default mode is RGB values from 0 to 255 and\n  therefore, the function call `(color 255 204 0)` will return a bright\n  yellow. Args are cast to floats.\n\n  * `r` - red or hue value\n  * `g` - green or saturation value\n  * `b` - blue or brightness value\n  * `a` - alpha value"],"^P","color()","^Q","1.0","^@","~$quil.core/color","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^16",["^[",[null,null,null,null]]],"^U","color()","^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^15",null,"^1E",4,"^16",["^[",[null,null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"]],"^X",995,"^Y",1002,"^1:",4,"^1;",true,"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^12","Creates an integer representation of a color. The parameters are\n  interpreted as RGB or HSB values depending on the current\n  [[color-mode]]. The default mode is RGB values from 0 to 255 and\n  therefore, the function call `(color 255 204 0)` will return a bright\n  yellow. Args are cast to floats.\n\n  * `r` - red or hue value\n  * `g` - green or saturation value\n  * `b` - blue or brightness value\n  * `a` - alpha value"],"~$arc",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","arc()","^Q","1.0","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^1D",["^ ","^17",false,"^1E",7,"^1:",7,"^14",[["~$x","~$y","^1S","^1T","~$start","~$stop"],["~$x","~$y","^1S","^1T","^7N","^7O","^1K"]],"^Z",["^[",[["~$x","~$y","^1S","^1T","^7N","^7O"],["~$x","~$y","^1S","^1T","^7N","^7O","^1K"]]],"^16",["^[",[null,null]]],"^U","arc()","^V",3,"^W",true,"^X",408,"^Y",408,"^Z",["^[",["^10",["^[",[["~$x","~$y","^1S","^1T","^7N","^7O"],["~$x","~$y","^1S","^1T","^7N","^7O","^1K"]]]]],"^12","Draws an arc in the display window. Arcs are drawn along the outer\n  edge of an ellipse defined by the `x`, `y`, `width` and `height`\n  parameters. The origin or the arc's ellipse may be changed with the\n  [[ellipse-mode]] function. The `start` and `stop` parameters specify\n  the angles at which to draw the arc. The `mode` is either `:open`,\n  `:chord` or `:pie`."],"^P","arc()","^Q","1.0","^@","~$quil.core/arc","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^1D",["^ ","^17",false,"^1E",7,"^1:",7,"^14",[["~$x","~$y","^1S","^1T","^7N","^7O"],["~$x","~$y","^1S","^1T","^7N","^7O","^1K"]],"^Z",["^[",[["~$x","~$y","^1S","^1T","^7N","^7O"],["~$x","~$y","^1S","^1T","^7N","^7O","^1K"]]],"^16",["^[",[null,null]]],"^U","arc()","^14",[["~$x","~$y","^1S","^1T","^7N","^7O"],["~$x","~$y","^1S","^1T","^7N","^7O","^1K"]],"^15",null,"^1E",7,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",6,"^17",false,"^1H","^19"],["^ ","^1E",7,"^17",false,"^1H","^19"]],"^X",401,"^Y",408,"^1:",7,"^1;",true,"^Z",["^[",[["~$x","~$y","^1S","^1T","^7N","^7O"],["~$x","~$y","^1S","^1T","^7N","^7O","^1K"]]],"^12","Draws an arc in the display window. Arcs are drawn along the outer\n  edge of an ellipse defined by the `x`, `y`, `width` and `height`\n  parameters. The origin or the arc's ellipse may be changed with the\n  [[ellipse-mode]] function. The `start` and `stop` parameters specify\n  the angles at which to draw the arc. The `mode` is either `:open`,\n  `:chord` or `:pie`."],"~$text-align",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","textAlign()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["~$align"],["~$align-x","~$align-y"]],"^Z",["^[",[["^7R"],["^7S","^7T"]]],"^16",["^[",[null,null]]],"^U","textAlign()","^V",3,"^W",true,"^X",4314,"^Y",4314,"^Z",["^[",["^10",["^[",[["^7R"],["^7S","^7T"]]]]],"^12","Sets the current alignment for drawing text. Available modes are:\n\n  horizontal - `:left`, `:center`, and `:right`\n  vertical   - `:top`, `:bottom`, `:center`, and `:baseline`\n\n  An optional second parameter specifies the vertical alignment\n  mode. `:baseline` is the default. The `:top` and `:center` parameters are\n  straightforward. The `:bottom` parameter offsets the line based on the\n  current [[text-descent]]. For multiple lines, the final line will be\n  aligned to the bottom, with the previous lines appearing above it.\n\n  When using text with width and height parameters, `:baseline` is\n  ignored, and treated as `:top`. (Otherwise, text would by default draw\n  outside the box, since `:baseline` is the default setting. `:baseline` is\n  not a useful drawing mode for text drawn in a rectangle.)\n\n  The vertical alignment is based on the value of [[text-ascent]], which\n  many fonts do not specify correctly. It may be necessary to use a\n  hack and offset by a few pixels by hand so that the offset looks\n  correct. To do this as less of a hack, use some percentage of\n  [[text-ascent]] or [[text-descent]] so that the hack works even if you\n  change the size of the font."],"^P","textAlign()","^Q","1.0","^@","~$quil.core/text-align","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^7R"],["^7S","^7T"]],"^Z",["^[",[["^7R"],["^7S","^7T"]]],"^16",["^[",[null,null]]],"^U","textAlign()","^14",[["^7R"],["^7S","^7T"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"]],"^X",4307,"^Y",4314,"^1:",2,"^1;",true,"^Z",["^[",[["^7R"],["^7S","^7T"]]],"^12","Sets the current alignment for drawing text. Available modes are:\n\n  horizontal - `:left`, `:center`, and `:right`\n  vertical   - `:top`, `:bottom`, `:center`, and `:baseline`\n\n  An optional second parameter specifies the vertical alignment\n  mode. `:baseline` is the default. The `:top` and `:center` parameters are\n  straightforward. The `:bottom` parameter offsets the line based on the\n  current [[text-descent]]. For multiple lines, the final line will be\n  aligned to the bottom, with the previous lines appearing above it.\n\n  When using text with width and height parameters, `:baseline` is\n  ignored, and treated as `:top`. (Otherwise, text would by default draw\n  outside the box, since `:baseline` is the default setting. `:baseline` is\n  not a useful drawing mode for text drawn in a rectangle.)\n\n  The vertical alignment is based on the value of [[text-ascent]], which\n  many fonts do not specify correctly. It may be necessary to use a\n  hack and offset by a few pixels by hand so that the offset looks\n  correct. To do this as less of a hack, use some percentage of\n  [[text-ascent]] or [[text-descent]] so that the hack works even if you\n  change the size of the font."],"~$text-width",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","textWidth()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","textWidth()","^V",3,"^W",true,"^X",4538,"^Y",4538,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^12","Calculates and returns the width of any text string."],"^P","textWidth()","^Q","1.0","^@","~$quil.core/text-width","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","textWidth()","^14",["^[",[["^1?"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4531,"^18","^19","^Y",4538,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^12","Calculates and returns the width of any text string."],"~$mouse-x",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","mouseX","^Q","1.0","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","mouseX","^V",3,"^W",true,"^X",2647,"^Y",2647,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Current horizontal coordinate of the mouse."],"^P","mouseX","^Q","1.0","^@","~$quil.core/mouse-x","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","mouseX","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2640,"^18","^19","^Y",2647,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Current horizontal coordinate of the mouse."],"~$TWO-PI",["^ ","^@","~$quil.core/TWO-PI","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",89,"^V",1,"^Y",89,"^T",12,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",89,"^V",6,"^Y",89,"^T",12],"^1H","^4B"],"~$mag",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","mag()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","mag()","^V",3,"^W",false,"^X",2503,"^Y",2503,"^Z",["^[",["^10",["^[",[["~$a","~$b"]]]]],"^12","Calculates the magnitude (or length) of a vector. A vector is a\n  direction in space commonly used in computer graphics and linear\n  algebra. Because it has no start position, the magnitude of a vector\n  can be thought of as the distance from coordinate `(0,0)` to its `(x,y)`\n  value. Therefore, [[mag]] is a shortcut for writing `(dist 0 0 x y)`."],"^P","mag()","^Q","1.0","^@","~$quil.core/mag","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","mag()","^14",["^[",[["~$a","~$b"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",2496,"^18","^19","^Y",2503,"^1:",2,"^1;",true,"^Z",["^[",["^10",["^[",[["~$a","~$b"]]]]],"^12","Calculates the magnitude (or length) of a vector. A vector is a\n  direction in space commonly used in computer graphics and linear\n  algebra. Because it has no start position, the magnitude of a vector\n  can be thought of as the distance from coordinate `(0,0)` to its `(x,y)`\n  value. Therefore, [[mag]] is a shortcut for writing `(dist 0 0 x y)`."],"~$exit",["^ ","^M","Structure","^N",null,"^O",["^ ","^M","Structure","^P","remove()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","exit()","^V",3,"^W",true,"^X",1680,"^Y",1680,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Quits/stops/exits the program. Rather than terminating\n  immediately, [[exit]] will cause the sketch to exit after `draw` has\n  completed (or after `setup` completes if called during the `setup`\n  method). "],"^P","remove()","^Q","1.0","^@","~$quil.core/exit","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","exit()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1673,"^18","^19","^Y",1680,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Quits/stops/exits the program. Rather than terminating\n  immediately, [[exit]] will cause the sketch to exit after `draw` has\n  completed (or after `setup` completes if called during the `setup`\n  method). "],"~$map-range",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","map()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","map()","^V",3,"^W",false,"^X",2522,"^Y",2522,"^Z",["^[",["^10",["^[",[["^30","~$low1","~$high1","~$low2","~$high2"]]]]],"^12","Re-maps a number from one range to another.\n\n  Numbers outside the range are not clamped to 0 and 1, because\n  out-of-range values are often intentional and useful."],"^P","map()","^Q","1.0","^@","~$quil.core/map-range","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","map()","^14",["^[",[["^30","^85","^86","^87","^88"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",2515,"^18","^19","^Y",2522,"^1:",5,"^1;",true,"^Z",["^[",["^10",["^[",[["^30","^85","^86","^87","^88"]]]]],"^12","Re-maps a number from one range to another.\n\n  Numbers outside the range are not clamped to 0 and 1, because\n  out-of-range values are often intentional and useful."],"~$sqrt",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","sqrt()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","sqrt()","^V",3,"^W",false,"^X",4104,"^Y",4104,"^Z",["^[",["^10",["^[",[["~$a"]]]]],"^12","Calculates the square root of a number. The square root of a number\n  is always positive, even though there may be a valid negative\n  root. The square root s of number a is such that (= a (* s s)). It\n  is the opposite of squaring."],"^P","sqrt()","^Q","1.0","^@","~$quil.core/sqrt","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","sqrt()","^14",["^[",[["~$a"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",4097,"^18","^19","^Y",4104,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$a"]]]]],"^12","Calculates the square root of a number. The square root of a number\n  is always positive, even though there may be a valid negative\n  root. The square root s of number a is such that (= a (* s s)). It\n  is the opposite of squaring."],"~$saturation",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","saturation()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","saturation()","^V",3,"^W",true,"^X",3669,"^Y",3669,"^Z",["^[",["^10",["^[",[["~$c"]]]]],"^12","Extracts the saturation value from a color."],"^P","saturation()","^Q","1.0","^@","~$quil.core/saturation","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","saturation()","^14",["^[",[["~$c"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3662,"^18","^19","^Y",3669,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$c"]]]]],"^12","Extracts the saturation value from a color."],"~$text-font",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","textFont()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["~$font"],["^8?","^2L"]],"^Z",["^[",[["^8?"],["^8?","^2L"]]],"^16",["^[",[null,null]]],"^U","textFont()","^V",3,"^W",true,"^X",4382,"^Y",4382,"^Z",["^[",["^10",["^[",[["^8?"],["^8?","^2L"]]]]],"^12","Sets the current font that will be drawn with the text\n  function. Fonts must be loaded with [[load-font]] before it can be\n  used. This font will be used in all subsequent calls to the [[text]]\n  function. If no `size` parameter is input, the font will appear at its\n  original size until it is changed with [[text-size]].\n\n  Because fonts are usually bitmaped, you should create fonts at the\n  sizes that will be used most commonly. Using [[text-font]] without the\n  `size` parameter will result in the cleanest-looking text.\n\n  With the default (JAVA2D) and PDF renderers, it's also possible to\n  enable the use of native fonts via the command\n  `(hint :enable-native-fonts)`. This will produce vector text in JAVA2D\n  sketches and PDF output in cases where the vector data is available:\n  when the font is still installed, or the font is created via the\n  [[create-font]] function."],"^P","textFont()","^Q","1.0","^@","~$quil.core/text-font","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^8?"],["^8?","^2L"]],"^Z",["^[",[["^8?"],["^8?","^2L"]]],"^16",["^[",[null,null]]],"^U","textFont()","^14",[["^8?"],["^8?","^2L"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"]],"^X",4375,"^Y",4382,"^1:",2,"^1;",true,"^Z",["^[",[["^8?"],["^8?","^2L"]]],"^12","Sets the current font that will be drawn with the text\n  function. Fonts must be loaded with [[load-font]] before it can be\n  used. This font will be used in all subsequent calls to the [[text]]\n  function. If no `size` parameter is input, the font will appear at its\n  original size until it is changed with [[text-size]].\n\n  Because fonts are usually bitmaped, you should create fonts at the\n  sizes that will be used most commonly. Using [[text-font]] without the\n  `size` parameter will result in the cleanest-looking text.\n\n  With the default (JAVA2D) and PDF renderers, it's also possible to\n  enable the use of native fonts via the command\n  `(hint :enable-native-fonts)`. This will produce vector text in JAVA2D\n  sketches and PDF output in cases where the vector data is available:\n  when the font is still installed, or the font is created via the\n  [[create-font]] function."],"~$scale",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","scale()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$s"],["^6U","^6V"],["^6U","^6V","~$sz"]],"^Z",["^[",[["~$s"],["^6U","^6V"],["^6U","^6V","^8B"]]],"^16",["^[",[null,null,null]]],"^U","scale()","^V",3,"^W",true,"^X",3721,"^Y",3721,"^Z",["^[",["^10",["^[",[["~$s"],["^6U","^6V"],["^6U","^6V","^8B"]]]]],"^12","Increases or decreases the size of a shape by expanding and\n  contracting vertices. Objects always scale from their relative\n  origin to the coordinate system. Scale values are specified as\n  decimal percentages. For example, the function call `(scale 2)`\n  increases the dimension of a shape by 200%. Transformations apply to\n  everything that happens after and subsequent calls to the function\n  multiply the effect. For example, calling `(scale 2)` and then\n  `(scale 1.5)` is the same as `(scale 3)`. If scale is called within\n  draw, the transformation is reset when the loop begins again. Using\n  this function with the `sz` parameter requires specifying `:p3d` or `:opengl`\n  as the renderer. This function can be further controlled by\n  [[push-matrix]] and [[pop-matrix]]."],"^P","scale()","^Q","1.0","^@","~$quil.core/scale","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$s"],["^6U","^6V"],["^6U","^6V","^8B"]],"^Z",["^[",[["~$s"],["^6U","^6V"],["^6U","^6V","^8B"]]],"^16",["^[",[null,null,null]]],"^U","scale()","^14",[["~$s"],["^6U","^6V"],["^6U","^6V","^8B"]],"^15",null,"^1E",3,"^16",["^[",[null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",3714,"^Y",3721,"^1:",3,"^1;",true,"^Z",["^[",[["~$s"],["^6U","^6V"],["^6U","^6V","^8B"]]],"^12","Increases or decreases the size of a shape by expanding and\n  contracting vertices. Objects always scale from their relative\n  origin to the coordinate system. Scale values are specified as\n  decimal percentages. For example, the function call `(scale 2)`\n  increases the dimension of a shape by 200%. Transformations apply to\n  everything that happens after and subsequent calls to the function\n  multiply the effect. For example, calling `(scale 2)` and then\n  `(scale 1.5)` is the same as `(scale 3)`. If scale is called within\n  draw, the transformation is reset when the loop begins again. Using\n  this function with the `sz` parameter requires specifying `:p3d` or `:opengl`\n  as the renderer. This function can be further controlled by\n  [[push-matrix]] and [[pop-matrix]]."],"~$defsketch",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["~$app-name","~$options"]]]],"^Z",["^[",[["^8E","~$&","^8F"]]],"^16",["^[",[null]]],"^V",3,"^W",false,"^X",4884,"^27",true,"^Y",4884,"^Z",["^[",["^10",["^[",[["^8E","~$&","^8F"]]]]],"^12","Define and start a sketch and bind it to a var with the symbol\n  `app-name`. If any of the options to the various callbacks are\n  symbols, it wraps them in a call to var to ensure they aren't\n  inlined and that redefinitions to the original functions are reflected in\n  the visualisation.\n\n  * `:size`           - A vector of width and height for the sketch or\n                        `:fullscreen`. Defaults to `[500 300]`. If you're using\n                        `:fullscreen` you may  want to enable present mode using\n                        `:features [:present]`. `:fullscreen` size works only in\n                        Clojure. In ClojureScript all sketches support\n                        fullscreen when you press `F11`.\n  * `:renderer`       - Specifies the renderer type. One of `:p2d`, `:p3d`,\n                        `:java2d`, `:opengl`, `:pdf`, `:svg`, `:fx2d`). Defaults\n                        to `:java2d` in Clojure and `:p2d` in ClojureScript.\n                        `:dxf` renderer can't be used as sketch renderer.\n                        Use [[begin-raw]] method instead. In Clojurescript only\n                        `:p2d` and `:p3d` renderers are supported.\n                        More info on Clojure renderers:\n                        https://processing.org/reference/environment/#Renderers\n  * `:output-file`    - Specifies an output file path. Only used in `:pdf` and\n                        `:svg` modes. Not supported in Clojurescript. When\n                        writing to a file, call [[exit]] at the end of the\n                        `draw` call to end the sketch and not write repeatedly\n                        to the file.\n  * `:title`          - A string which will be displayed at the top of\n                        the sketch window. Not supported in Clojurescript.\n  * `:features`       - A vector of keywords customizing sketch behaviour.\n                        Supported features:\n    - `:keep-on-top`   - Sketch window will always be above other windows.\n                         Note: some platforms might not support always-on-top\n                         windows. Not supported in clojurescript.\n    - `:exit-on-close` - Shutdown JVM  when sketch is closed.\n                         Not supported in Clojurescript.\n    - `:resizable`     - Makes sketch resizable. Not supported in Clojurescript.\n    - `:no-safe-fns`   - Do not catch and print exceptions thrown inside\n                         functions provided to sketch (like draw,\n                         [[mouse-pressed?]], [[key-pressed?]] and others). By\n                         default all exceptions thrown inside these functions\n                         are caught. This prevents the sketch from breaking when\n                         a bad function is provided and allows you to fix it and\n                         reload it on the fly. You can disable this behaviour by\n                         enabling the `:no-safe-fns` feature. Not supported in\n                         Clojurescript.\n    - `:present`       - Switch to present mode (fullscreen without borders, OS\n                         panels). You may want to use this feature together with\n                         `:size :fullscreen`. Not supported in ClojureScript. In\n                         ClojureScript fullscreen is enabled by pressing F11 and\n                         it's enabled on all sketches automatically.\n    - `:no-start`      - Disables autostart if sketch was created using the\n                         [[defsketch]] macro. To start sketch you have to call\n                         function created [[defsketch]]. Supported only in\n                         ClojureScript.\n                        Usage example: `:features [:keep-on-top :present]`\n  * `:bgcolor`        - Sets background color for unused space in present mode.\n                        Color is specified in hex format for example\n                        `:bgcolor \"#00FFFF\"` (cyan background)\n                        Not supported in ClojureScript.\n  * `:display`        - Sets what display should be used by this sketch.\n                        Displays are numbered starting from 0.\n                        Example: `:display 1`.\n                        Not supported in ClojureScript.\n  * `:setup`          - A function to be called once when setting the sketch up.\n  * `:draw`           - A function to be repeatedly called at most n times per\n                        second where n is the target [[frame-rate]] set for\n                        the visualisation.\n  * `:host`           - String id of canvas element or DOM element itself.\n                        Specifies host for the sketch. Must be specified in\n                        sketch, may be omitted in defsketch. If omitted in\n                        [[defsketch]], `:host` is set to the name of the sketch.\n                        If element with specified id is not found on the page\n                        and page is empty, a new canvas element will be created.\n                        Used in ClojureScript.\n  * `:focus-gained`   - Called when the sketch gains focus.\n                        Not supported in ClojureScript.\n  * `:focus-lost`     - Called when the sketch loses focus. Not supported in\n                        ClojureScript.\n  * `:mouse-entered`  - Called when the mouse enters the sketch window.\n  * `:mouse-exited`   - Called when the mouse leaves the sketch window\n  * `:mouse-pressed`  - Called every time a mouse button is pressed.\n  * `:mouse-released` - Called every time a mouse button is released.\n  * `:mouse-clicked`  - Called once after a mouse button has been pressed\n                        and then released.\n  * `:mouse-moved`    - Called every time the mouse moves and a button is\n                        not pressed.\n  * `:mouse-dragged`  - Called every time the mouse moves and a button is\n                        pressed.\n  * `:mouse-wheel`    - Called every time mouse wheel is rotated.\n                        Takes 1 argument - wheel rotation, an `int`.\n                        Negative values if the mouse wheel was rotated\n                        up/away from the user, and positive values\n                        if the mouse wheel was rotated down/towards the user.\n  * `:key-pressed`    - Called every time any key is pressed.\n  * `:key-released`   - Called every time any key is released.\n  * `:key-typed`      - Called once every time non-modifier keys are\n                        pressed.\n  * `:on-close`       - Called once, when sketch is closed.\n                        Not supported in ClojureScript.\n  * `:middleware`     - Vector of middleware to be applied to the sketch.\n                        Middleware will be applied in the same order as in\n                        `comp` function: `[f g]` will be applied as\n                        `(f (g options))`.\n  * `:settings`       - Cousin of `:setup`. A function to be called once when\n                        setting sketch up. Should be used only for [[smooth]]\n                        and [[no-smooth]]. Due to Processing limitations these\n                        functions cannot be used neither in `:setup` nor in\n                        `:draw`."],"^Q","1.0","^@","~$quil.core/defsketch","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^8E","^8F"]]]],"^Z",["^[",[["^8E","~$&","^8F"]]],"^16",["^[",[null]]],"^14",["^[",[["^[",["^8E","^8F"]]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",false,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^29","^2:"]]]],"^X",4880,"^27",true,"^18","^19","^Y",4884,"^1:",1,"^1;",false,"^Z",["^[",[["^8E","~$&","^8F"]]],"^12","Define and start a sketch and bind it to a var with the symbol\n  `app-name`. If any of the options to the various callbacks are\n  symbols, it wraps them in a call to var to ensure they aren't\n  inlined and that redefinitions to the original functions are reflected in\n  the visualisation.\n\n  * `:size`           - A vector of width and height for the sketch or\n                        `:fullscreen`. Defaults to `[500 300]`. If you're using\n                        `:fullscreen` you may  want to enable present mode using\n                        `:features [:present]`. `:fullscreen` size works only in\n                        Clojure. In ClojureScript all sketches support\n                        fullscreen when you press `F11`.\n  * `:renderer`       - Specifies the renderer type. One of `:p2d`, `:p3d`,\n                        `:java2d`, `:opengl`, `:pdf`, `:svg`, `:fx2d`). Defaults\n                        to `:java2d` in Clojure and `:p2d` in ClojureScript.\n                        `:dxf` renderer can't be used as sketch renderer.\n                        Use [[begin-raw]] method instead. In Clojurescript only\n                        `:p2d` and `:p3d` renderers are supported.\n                        More info on Clojure renderers:\n                        https://processing.org/reference/environment/#Renderers\n  * `:output-file`    - Specifies an output file path. Only used in `:pdf` and\n                        `:svg` modes. Not supported in Clojurescript. When\n                        writing to a file, call [[exit]] at the end of the\n                        `draw` call to end the sketch and not write repeatedly\n                        to the file.\n  * `:title`          - A string which will be displayed at the top of\n                        the sketch window. Not supported in Clojurescript.\n  * `:features`       - A vector of keywords customizing sketch behaviour.\n                        Supported features:\n    - `:keep-on-top`   - Sketch window will always be above other windows.\n                         Note: some platforms might not support always-on-top\n                         windows. Not supported in clojurescript.\n    - `:exit-on-close` - Shutdown JVM  when sketch is closed.\n                         Not supported in Clojurescript.\n    - `:resizable`     - Makes sketch resizable. Not supported in Clojurescript.\n    - `:no-safe-fns`   - Do not catch and print exceptions thrown inside\n                         functions provided to sketch (like draw,\n                         [[mouse-pressed?]], [[key-pressed?]] and others). By\n                         default all exceptions thrown inside these functions\n                         are caught. This prevents the sketch from breaking when\n                         a bad function is provided and allows you to fix it and\n                         reload it on the fly. You can disable this behaviour by\n                         enabling the `:no-safe-fns` feature. Not supported in\n                         Clojurescript.\n    - `:present`       - Switch to present mode (fullscreen without borders, OS\n                         panels). You may want to use this feature together with\n                         `:size :fullscreen`. Not supported in ClojureScript. In\n                         ClojureScript fullscreen is enabled by pressing F11 and\n                         it's enabled on all sketches automatically.\n    - `:no-start`      - Disables autostart if sketch was created using the\n                         [[defsketch]] macro. To start sketch you have to call\n                         function created [[defsketch]]. Supported only in\n                         ClojureScript.\n                        Usage example: `:features [:keep-on-top :present]`\n  * `:bgcolor`        - Sets background color for unused space in present mode.\n                        Color is specified in hex format for example\n                        `:bgcolor \"#00FFFF\"` (cyan background)\n                        Not supported in ClojureScript.\n  * `:display`        - Sets what display should be used by this sketch.\n                        Displays are numbered starting from 0.\n                        Example: `:display 1`.\n                        Not supported in ClojureScript.\n  * `:setup`          - A function to be called once when setting the sketch up.\n  * `:draw`           - A function to be repeatedly called at most n times per\n                        second where n is the target [[frame-rate]] set for\n                        the visualisation.\n  * `:host`           - String id of canvas element or DOM element itself.\n                        Specifies host for the sketch. Must be specified in\n                        sketch, may be omitted in defsketch. If omitted in\n                        [[defsketch]], `:host` is set to the name of the sketch.\n                        If element with specified id is not found on the page\n                        and page is empty, a new canvas element will be created.\n                        Used in ClojureScript.\n  * `:focus-gained`   - Called when the sketch gains focus.\n                        Not supported in ClojureScript.\n  * `:focus-lost`     - Called when the sketch loses focus. Not supported in\n                        ClojureScript.\n  * `:mouse-entered`  - Called when the mouse enters the sketch window.\n  * `:mouse-exited`   - Called when the mouse leaves the sketch window\n  * `:mouse-pressed`  - Called every time a mouse button is pressed.\n  * `:mouse-released` - Called every time a mouse button is released.\n  * `:mouse-clicked`  - Called once after a mouse button has been pressed\n                        and then released.\n  * `:mouse-moved`    - Called every time the mouse moves and a button is\n                        not pressed.\n  * `:mouse-dragged`  - Called every time the mouse moves and a button is\n                        pressed.\n  * `:mouse-wheel`    - Called every time mouse wheel is rotated.\n                        Takes 1 argument - wheel rotation, an `int`.\n                        Negative values if the mouse wheel was rotated\n                        up/away from the user, and positive values\n                        if the mouse wheel was rotated down/towards the user.\n  * `:key-pressed`    - Called every time any key is pressed.\n  * `:key-released`   - Called every time any key is released.\n  * `:key-typed`      - Called once every time non-modifier keys are\n                        pressed.\n  * `:on-close`       - Called once, when sketch is closed.\n                        Not supported in ClojureScript.\n  * `:middleware`     - Vector of middleware to be applied to the sketch.\n                        Middleware will be applied in the same order as in\n                        `comp` function: `[f g]` will be applied as\n                        `(f (g options))`.\n  * `:settings`       - Cousin of `:setup`. A function to be called once when\n                        setting sketch up. Should be used only for [[smooth]]\n                        and [[no-smooth]]. Due to Processing limitations these\n                        functions cannot be used neither in `:setup` nor in\n                        `:draw`."],"~$no-stroke",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","noStroke()","^Q","1.0","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","noStroke()","^V",3,"^W",true,"^X",2862,"^Y",2862,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Disables drawing the stroke (outline). If both [[no-stroke]] and\n  [[no-fill]] are called, nothing will be drawn to the screen."],"^P","noStroke()","^Q","1.0","^@","~$quil.core/no-stroke","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","noStroke()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2855,"^18",["^>",[null,"^19"]],"^Y",2862,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Disables drawing the stroke (outline). If both [[no-stroke]] and\n  [[no-fill]] are called, nothing will be drawn to the screen."],"~$random-seed",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","randomSeed()","^Q","1.0","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","randomSeed()","^V",3,"^W",true,"^X",3320,"^Y",3320,"^Z",["^[",["^10",["^[",[["~$w"]]]]],"^12","Sets the seed value for random. By default, random produces\n  different results each time the program is run. Set the value\n  parameter to a constant to return the same pseudo-random numbers\n  each time the software is run."],"^P","randomSeed()","^Q","1.0","^@","~$quil.core/random-seed","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","randomSeed()","^14",["^[",[["~$w"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3313,"^18","^19","^Y",3320,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$w"]]]]],"^12","Sets the seed value for random. By default, random produces\n  different results each time the program is run. Set the value\n  parameter to a constant to return the same pseudo-random numbers\n  each time the software is run."],"~$plane",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","plane()","^Q","3.0.0","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^V",6,"^W",true,"^X",2981,"^Y",2981,"^Z",["^[",["^10",["^[",[["^1S","^1T"]]]]],"^12","Draw a plane with given `width` and `height`."],"^P","plane()","^Q","3.0.0","^@","~$quil.core/plane","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^14",["^[",[["^1S","^1T"]]],"^15",null,"^16",["^[",[null,null]],"^V",4,"^17",false,"^W",true,"^X",2975,"^18","^19","^Y",2981,"^1:",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^1S","^1T"]]]]],"^12","Draw a plane with given `width` and `height`."],"~$key-as-keyword",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^Q","1.6","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^U",null,"^V",3,"^W",true,"^X",5019,"^Y",5019,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns a keyword representing the currently pressed key. Modifier\n  keys are represented as: `:up`, `:down`, `:left`, `:right`, `:alt`,\n  `:control`, `:shift`, `:command`, `:f1-24`"],"^Q","1.6","^@","~$quil.core/key-as-keyword","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^U",null,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",5014,"^18",["^>",[null,"^19","~$cljs.core/Keyword","^1I"]],"^Y",5019,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns a keyword representing the currently pressed key. Modifier\n  keys are represented as: `:up`, `:down`, `:left`, `:right`, `:alt`,\n  `:control`, `:shift`, `:command`, `:f1-24`"],"~$blend-mode",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","blendMode()","^Q","2.0","^R","Rendering","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","blendMode()","^V",3,"^W",true,"^X",838,"^Y",838,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Blends the pixels in the display window according to the defined `mode`.\n  There is a choice of the following modes to blend the source pixels (A)\n  with the ones of pixels already in the display window (B):\n\n  * `:blend`      - linear interpolation of colours: `C = A*factor + B`\n  * `:add`        - additive blending with white clip:\n                                                `C = min(A*factor + B, 255)`\n  * `:subtract`   - subtractive blending with black clip:\n                                                `C = max(B - A*factor, 0)`\n  * `:darkest`    - only the darkest colour succeeds:\n                                                `C = min(A*factor, B)`\n  * `:lightest`   - only the lightest colour succeeds:\n                                                `C = max(A*factor, B)`\n  * `:difference` - subtract colors from underlying image.\n  * `:exclusion`  - similar to `:difference`, but less extreme.\n  * `:multiply`   - multiply the colors, result will always be darker.\n  * `:screen`     - opposite of `:multiply`, uses inverse values of the colors.\n  * `:replace`    - the pixels entirely replace the others and don't utilize\n                    alpha (transparency) values.\n  * `:overlay`    - mix of `:multiply` and `:screen`. Multiplies dark values,\n                    and screens light values.\n  * `:hard-light` - `:screen` when greater than 50% gray, `:multiply` when\n                    lower.\n  * `:soft-light` - mix of `:darkest` and `:lightest`. Works like :overlay, but\n                    not as harsh.\n  * `:dodge`      - lightens light tones and increases contrast, ignores darks.\n  * `:burn`       - darker areas are applied, increasing contrast, ignores\n                    lights.\n\n  Note: in clj `:hard-light`, `:soft-light`, `:overlay`, `:dodge`, `:burn`\n  modes are not supported. In cljs `:subtract` mode is not supported.\n\n  `factor` is the alpha value of the pixel being drawn"],"^P","blendMode()","^Q","2.0","^@","~$quil.core/blend-mode","^R","Rendering","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","blendMode()","^14",["^[",[["^1K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",831,"^18","^19","^Y",838,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Blends the pixels in the display window according to the defined `mode`.\n  There is a choice of the following modes to blend the source pixels (A)\n  with the ones of pixels already in the display window (B):\n\n  * `:blend`      - linear interpolation of colours: `C = A*factor + B`\n  * `:add`        - additive blending with white clip:\n                                                `C = min(A*factor + B, 255)`\n  * `:subtract`   - subtractive blending with black clip:\n                                                `C = max(B - A*factor, 0)`\n  * `:darkest`    - only the darkest colour succeeds:\n                                                `C = min(A*factor, B)`\n  * `:lightest`   - only the lightest colour succeeds:\n                                                `C = max(A*factor, B)`\n  * `:difference` - subtract colors from underlying image.\n  * `:exclusion`  - similar to `:difference`, but less extreme.\n  * `:multiply`   - multiply the colors, result will always be darker.\n  * `:screen`     - opposite of `:multiply`, uses inverse values of the colors.\n  * `:replace`    - the pixels entirely replace the others and don't utilize\n                    alpha (transparency) values.\n  * `:overlay`    - mix of `:multiply` and `:screen`. Multiplies dark values,\n                    and screens light values.\n  * `:hard-light` - `:screen` when greater than 50% gray, `:multiply` when\n                    lower.\n  * `:soft-light` - mix of `:darkest` and `:lightest`. Works like :overlay, but\n                    not as harsh.\n  * `:dodge`      - lightens light tones and increases contrast, ignores darks.\n  * `:burn`       - darker areas are applied, increasing contrast, ignores\n                    lights.\n\n  Note: in clj `:hard-light`, `:soft-light`, `:overlay`, `:dodge`, `:burn`\n  modes are not supported. In cljs `:subtract` mode is not supported.\n\n  `factor` is the alpha value of the pixel being drawn"],"~$dist",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","dist()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]],"^Z",["^[",[["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]]],"^16",["^[",[null,null]]],"^U","dist()","^V",3,"^W",false,"^X",1518,"^Y",1518,"^Z",["^[",["^10",["^[",[["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]]]]],"^12","Calculates the distance between two points."],"^P","dist()","^Q","1.0","^@","~$quil.core/dist","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]],"^Z",["^[",[["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]]],"^16",["^[",[null,null]]],"^U","dist()","^14",[["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]],"^15",null,"^1E",6,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^1G",[["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",6,"^17",false,"^1H","^19"]],"^X",1511,"^Y",1518,"^1:",6,"^1;",true,"^Z",["^[",[["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]]],"^12","Calculates the distance between two points."],"~$PI",["^ ","^@","~$quil.core/PI","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",85,"^V",10,"^Y",85,"^T",17,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",85,"^V",15,"^Y",85,"^T",17],"^1H","~$js/Number"],"~$norm",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","norm()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","norm()","^V",3,"^W",true,"^X",2837,"^Y",2837,"^Z",["^[",["^10",["^[",[["^30","^7N","^7O"]]]]],"^12","Normalize a value to exist between 0 and 1 (inclusive)."],"^P","norm()","^Q","1.0","^@","~$quil.core/norm","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","norm()","^14",["^[",[["^30","^7N","^7O"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2830,"^18","^19","^Y",2837,"^1:",3,"^1;",true,"^Z",["^[",["^10",["^[",[["^30","^7N","^7O"]]]]],"^12","Normalize a value to exist between 0 and 1 (inclusive)."],"~$end-shape",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","endShape()","^Q","1.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^1K"]],"^Z",["^[",[[],["^1K"]]],"^16",["^[",[null,null]]],"^U","endShape()","^V",3,"^W",true,"^X",1659,"^Y",1659,"^Z",["^[",["^10",["^[",[[],["^1K"]]]]],"^12","May only be called after [[begin-shape]]. When [[end-shape]] is called,\n  all of image data defined since the previous call to [[begin-shape]] is\n  written into the image buffer. The keyword `:close` may be passed to\n  close the shape (to connect the beginning and the end)."],"^P","endShape()","^Q","1.0","^@","~$quil.core/end-shape","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^1K"]],"^Z",["^[",[[],["^1K"]]],"^16",["^[",[null,null]]],"^U","endShape()","^14",[[],["^1K"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^19"]],"^X",1652,"^Y",1659,"^1:",1,"^1;",true,"^Z",["^[",[[],["^1K"]]],"^12","May only be called after [[begin-shape]]. When [[end-shape]] is called,\n  all of image data defined since the previous call to [[begin-shape]] is\n  written into the image buffer. The keyword `:close` may be passed to\n  close the shape (to connect the beginning and the end)."],"~$fill",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","fill()","^Q","1.0","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^6:"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^6:"]]],"^16",["^[",[null,null,null,null]]],"^U","fill()","^V",3,"^W",true,"^X",1717,"^Y",1717,"^Z",["^[",["^10",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^6:"]]]]],"^12","Sets the color used to fill shapes. For example, if you run `(fill 204 102 0)`,\n  all subsequent shapes will be filled with orange.  This function casts all\n  input as a `float`. If nil is passed it removes any fill color; equivalent to\n  calling [[no-fill]]."],"^P","fill()","^Q","1.0","^@","~$quil.core/fill","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^6:"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^6:"]]],"^16",["^[",[null,null,null,null]]],"^U","fill()","^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^6:"]],"^15",null,"^1E",4,"^16",["^[",[null,null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H",["^>",[null,"^19"]]],["^ ","^1E",2,"^17",false,"^1H",["^>",[null,"^19"]]],["^ ","^1E",3,"^17",false,"^1H",["^>",[null,"^19"]]],["^ ","^1E",4,"^17",false,"^1H",["^>",[null,"^19"]]]],"^X",1710,"^Y",1717,"^1:",4,"^1;",true,"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","^6:"]]],"^12","Sets the color used to fill shapes. For example, if you run `(fill 204 102 0)`,\n  all subsequent shapes will be filled with orange.  This function casts all\n  input as a `float`. If nil is passed it removes any fill color; equivalent to\n  calling [[no-fill]]."],"~$with-translation",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^Q","1.0","^R","Utility Macros","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["~$translation-vector","^26"]]]],"^Z",["^[",[["^93","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^V",3,"^W",true,"^X",4805,"^27",true,"^Y",4805,"^Z",["^[",["^10",["^[",[["^93","~$&","^26"]]]]],"^12","Performs body with translation, restores current transformation on\n  exit."],"^Q","1.0","^@","~$quil.core/with-translation","^R","Utility Macros","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^93","^26"]]]],"^Z",["^[",[["^93","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^14",["^[",[["^[",["^93","^26"]]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^29","^2:"]]]],"^X",4799,"^27",true,"^18","^19","^Y",4805,"^1:",1,"^1;",false,"^Z",["^[",[["^93","~$&","^26"]]],"^12","Performs body with translation, restores current transformation on\n  exit."],"~$reset-matrix",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","resetMatrix()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","resetMatrix()","^V",3,"^W",true,"^X",3482,"^Y",3482,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Replaces the current matrix with the identity matrix. The\n  equivalent function in OpenGL is `glLoadIdentity()`"],"^P","resetMatrix()","^Q","1.0","^@","~$quil.core/reset-matrix","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","resetMatrix()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3475,"^18","^19","^Y",3482,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Replaces the current matrix with the identity matrix. The\n  equivalent function in OpenGL is `glLoadIdentity()`"],"~$mask-image",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","Image.mask()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["~$mask"],["^2I","^98"]],"^Z",["^[",[["^98"],["^2I","^98"]]],"^16",["^[",[null,null]]],"^U","PImage.mask()","^V",3,"^W",false,"^X",2538,"^Y",2538,"^Z",["^[",["^10",["^[",[["^98"],["^2I","^98"]]]]],"^12","Masks part of an image from displaying by loading another image and\n  using it as an alpha channel. This mask image should only contain\n  grayscale data. The mask image needs to be the same size as the image\n  to which it is applied.\n\n  If single argument function is used - masked image is sketch itself\n  or graphics if used inside [[with-graphics]] macro. If you're passing\n  graphics to this function - it works only with `:p3d` and `:opengl` renderers.\n\n  This method is useful for creating dynamically generated alpha\n  masks."],"^P","Image.mask()","^Q","1.0","^@","~$quil.core/mask-image","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^98"],["^2I","^98"]],"^Z",["^[",[["^98"],["^2I","^98"]]],"^16",["^[",[null,null]]],"^U","PImage.mask()","^14",[["^98"],["^2I","^98"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"]],"^X",2531,"^Y",2538,"^1:",2,"^1;",true,"^Z",["^[",[["^98"],["^2I","^98"]]],"^12","Masks part of an image from displaying by loading another image and\n  using it as an alpha channel. This mask image should only contain\n  grayscale data. The mask image needs to be the same size as the image\n  to which it is applied.\n\n  If single argument function is used - masked image is sketch itself\n  or graphics if used inside [[with-graphics]] macro. If you're passing\n  graphics to this function - it works only with `:p3d` and `:opengl` renderers.\n\n  This method is useful for creating dynamically generated alpha\n  masks."],"~$shape-modes",["^ ","^@","~$quil.core/shape-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",53,"^T",13,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",53,"^V",2,"^Y",53,"^T",13],"^1H","^2D"],"~$green",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","green()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","green()","^V",3,"^W",true,"^X",1960,"^Y",1960,"^Z",["^[",["^10",["^[",[["^4W"]]]]],"^12","Extracts the green value from a color, scaled to match current\n  [[color-mode]]. This value is always returned as a `float` so be careful\n  not to assign it to an `int` value."],"^P","green()","^Q","1.0","^@","~$quil.core/green","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","green()","^14",["^[",[["^4W"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1953,"^18","^19","^Y",1960,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^4W"]]]]],"^12","Extracts the green value from a color, scaled to match current\n  [[color-mode]]. This value is always returned as a `float` so be careful\n  not to assign it to an `int` value."],"~$HALF-PI",["^ ","^@","~$quil.core/HALF-PI","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",86,"^V",1,"^Y",86,"^T",13,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",86,"^V",6,"^Y",86,"^T",13],"^1H","^4B"],"~$begin-contour",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","beginContour()","^Q","2.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","beginContour()","^V",3,"^W",true,"^X",555,"^Y",555,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Use the [[begin-contour]] and [[end-contour]] function to create\n  negative shapes within shapes. These functions can only be used\n  within a [[begin-shape]]/[[end-shape]] pair and they only work with\n  the `:p2d` and `:p3d` renderers."],"^P","beginContour()","^Q","2.0","^@","~$quil.core/begin-contour","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","beginContour()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",548,"^18","^19","^Y",555,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Use the [[begin-contour]] and [[end-contour]] function to create\n  negative shapes within shapes. These functions can only be used\n  within a [[begin-shape]]/[[end-shape]] pair and they only work with\n  the `:p2d` and `:p3d` renderers."],"~$DEG-TO-RAD",["^ ","^@","~$quil.core/DEG-TO-RAD","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",91,"^V",1,"^Y",91,"^T",16,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",91,"^V",6,"^Y",91,"^T",16],"^1H","^4B"],"~$pow",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","pow()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","pow()","^V",3,"^W",false,"^X",3092,"^Y",3092,"^Z",["^[",["^10",["^[",[["~$num","~$exponent"]]]]],"^12","Facilitates exponential expressions. The [[pow]] function is an\n  efficient way of multiplying numbers by themselves (or their\n  reciprocal) in large quantities. For example, `(pow 3 5)` is\n  equivalent to the expression `(* 3 3 3 3 3)` and `(pow 3 -5)` is\n  equivalent to `(/ 1 (* 3 3 3 3 3))`."],"^P","pow()","^Q","1.0","^@","~$quil.core/pow","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","pow()","^14",["^[",[["^9E","^9F"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",3085,"^18","^19","^Y",3092,"^1:",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^9E","^9F"]]]]],"^12","Facilitates exponential expressions. The [[pow]] function is an\n  efficient way of multiplying numbers by themselves (or their\n  reciprocal) in large quantities. For example, `(pow 3 5)` is\n  equivalent to the expression `(* 3 3 3 3 3)` and `(pow 3 -5)` is\n  equivalent to `(/ 1 (* 3 3 3 3 3))`."],"~$box",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","box()","^Q","1.0","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["^2L"],["^1S","^1T","~$depth"]],"^Z",["^[",[["^2L"],["^1S","^1T","^9I"]]],"^16",["^[",[null,null]]],"^U","box()","^V",3,"^W",true,"^X",896,"^Y",896,"^Z",["^[",["^10",["^[",[["^2L"],["^1S","^1T","^9I"]]]]],"^12","Creates an extruded rectangle."],"^P","box()","^Q","1.0","^@","~$quil.core/box","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["^2L"],["^1S","^1T","^9I"]],"^Z",["^[",[["^2L"],["^1S","^1T","^9I"]]],"^16",["^[",[null,null]]],"^U","box()","^14",[["^2L"],["^1S","^1T","^9I"]],"^15",null,"^1E",3,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",889,"^Y",896,"^1:",3,"^1;",true,"^Z",["^[",[["^2L"],["^1S","^1T","^9I"]]],"^12","Creates an extruded rectangle."],"~$exp",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","exp()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","exp()","^V",3,"^W",false,"^X",1696,"^Y",1696,"^Z",["^[",["^10",["^[",[["^30"]]]]],"^12","Returns Euler's number `e` (2.71828...) raised to the power of the\n  `val` parameter."],"^P","exp()","^Q","1.0","^@","~$quil.core/exp","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","exp()","^14",["^[",[["^30"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",1689,"^18","^19","^Y",1696,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^30"]]]]],"^12","Returns Euler's number `e` (2.71828...) raised to the power of the\n  `val` parameter."],"~$with-sketch",["^ ","^N",null,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",171,"^V",11,"^Y",171,"^T",22,"^27",true,"^Z",["^[",["^10",["^[",[["~$applet","~$&","^26"]]]]],"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^9N","^26"]]]],"^Z",["^[",[["^9N","~$&","^26"]]],"^16",["^[",[null]]]],"^@","~$quil.core/with-sketch","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",22,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^9N","^26"]]]],"^Z",["^[",[["^9N","~$&","^26"]]],"^16",["^[",[null]]],"^14",["^[",[["^[",["^9N","^26"]]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^29","^2:","^1I"]]]],"^X",171,"^27",true,"^18","^19","^Y",171,"^1:",1,"^1;",false,"^Z",["^[",[["^9N","~$&","^26"]]]],"~$save-current-fill",["^ ","^N",null,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",1703,"^V",8,"^Y",1703,"^T",25,"^7@",true,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Save current fill color vector in the internal state. It can be accessed using [[current-fill]] function."],"^7@",true,"^@","~$quil.core/save-current-fill","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",25,"^14",["^[",[["^7K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^X",1703,"^18",["^>",[null,"^19"]],"^Y",1703,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Save current fill color vector in the internal state. It can be accessed using [[current-fill]] function."],"~$text-ascent",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","textAscent()","^Q","1.0","^R","Metrics","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","textAscent()","^V",3,"^W",true,"^X",4352,"^Y",4352,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the ascent of the current font at its current size. This\n  information is useful for determining the height of the font above\n  the baseline. For example, adding the [[text-ascent]] and [[text-descent]]\n  values will give you the total height of the line."],"^P","textAscent()","^Q","1.0","^@","~$quil.core/text-ascent","^R","Metrics","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","textAscent()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4345,"^18","^19","^Y",4352,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the ascent of the current font at its current size. This\n  information is useful for determining the height of the font above\n  the baseline. For example, adding the [[text-ascent]] and [[text-descent]]\n  values will give you the total height of the line."],"~$shininess",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^Q","1.0","^R","Material Properties","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","shininess()","^V",3,"^W",true,"^X",3953,"^Y",3953,"^Z",["^[",["^10",["^[",[["~$shine"]]]]],"^12","Sets the amount of gloss in the surface of shapes. Used in\n  combination with [[ambient]], [[specular]], and [[emissive]] in setting\n  the material properties of shapes."],"^Q","1.0","^@","~$quil.core/shininess","^R","Material Properties","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","shininess()","^14",["^[",[["^9U"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3947,"^18","^19","^Y",3953,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^9U"]]]]],"^12","Sets the amount of gloss in the surface of shapes. Used in\n  combination with [[ambient]], [[specular]], and [[emissive]] in setting\n  the material properties of shapes."],"~$rect-mode",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","rectMode()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","rectMode()","^V",3,"^W",true,"^X",3382,"^Y",3382,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Modifies the location from which rectangles draw. The default `mode`\n  is `:corner`. Available modes are:\n\n  * `:corner`  - Specifies the location to be the upper left corner of the\n                 shape and uses the third and fourth parameters of [[rect]] to\n                 specify the width and height.\n  * `:corners` - Uses the first and second parameters of [[rect]] to set the\n                 location of one corner and uses the third and fourth\n                 parameters to set the opposite corner.\n  * `:center`  - Draws the image from its center point and uses the third\n                 and fourth parameters of [[rect]] to specify the image's width\n                 and height.\n  * `:radius`  - Draws the image from its center point and uses the third\n                 and forth parameters of [[rect]] to specify half of the\n                 image's width and height."],"^P","rectMode()","^Q","1.0","^@","~$quil.core/rect-mode","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","rectMode()","^14",["^[",[["^1K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3375,"^18","^19","^Y",3382,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Modifies the location from which rectangles draw. The default `mode`\n  is `:corner`. Available modes are:\n\n  * `:corner`  - Specifies the location to be the upper left corner of the\n                 shape and uses the third and fourth parameters of [[rect]] to\n                 specify the width and height.\n  * `:corners` - Uses the first and second parameters of [[rect]] to set the\n                 location of one corner and uses the third and fourth\n                 parameters to set the opposite corner.\n  * `:center`  - Draws the image from its center point and uses the third\n                 and fourth parameters of [[rect]] to specify the image's width\n                 and height.\n  * `:radius`  - Draws the image from its center point and uses the third\n                 and forth parameters of [[rect]] to specify half of the\n                 image's width and height."],"~$ellipse-mode",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","ellipseMode()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","ellipseMode()","^V",3,"^W",true,"^X",1571,"^Y",1571,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Modifies the origin of the ellipse according to the specified `mode`:\n\n   * `:center`  - specifies the location of the ellipse as\n                  the center of the shape **(default)**.\n   * `:radius`  - similar to center, but the width and height parameters to\n                  ellipse specify the radius of the ellipse, rather than the\n                  diameter.\n   * `:corner`  - draws the shape from the upper-left corner of its bounding\n                  box.\n   * `:corners` - uses the four parameters to ellipse to set two opposing\n                  corners of the ellipse's bounding box."],"^P","ellipseMode()","^Q","1.0","^@","~$quil.core/ellipse-mode","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","ellipseMode()","^14",["^[",[["^1K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1564,"^18","^19","^Y",1571,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Modifies the origin of the ellipse according to the specified `mode`:\n\n   * `:center`  - specifies the location of the ellipse as\n                  the center of the shape **(default)**.\n   * `:radius`  - similar to center, but the width and height parameters to\n                  ellipse specify the radius of the ellipse, rather than the\n                  diameter.\n   * `:corner`  - draws the shape from the upper-left corner of its bounding\n                  box.\n   * `:corners` - uses the four parameters to ellipse to set two opposing\n                  corners of the ellipse's bounding box."],"~$month",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","month()","^Q","1.0","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","month()","^V",3,"^W",false,"^X",2595,"^Y",2595,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current month as a value from 1 - 12."],"^P","month()","^Q","1.0","^@","~$quil.core/month","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","month()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",2588,"^18","^19","^Y",2595,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current month as a value from 1 - 12."],"~$texture-modes",["^ ","^@","~$quil.core/texture-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",78,"^T",15,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",78,"^V",2,"^Y",78,"^T",15],"^1H","^2D"],"^1S",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","width","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","width","^V",3,"^3[",null,"^W",true,"^X",4727,"^Y",4727,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Width of the display window. The value of width is zero until size is\n  called."],"^P","width","^Q","1.0","^@","~$quil.core/width","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","width","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^3[",null,"^17",false,"^W",true,"^X",4719,"^18","^19","^Y",4727,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Width of the display window. The value of width is zero until size is\n  called."],"~$background",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","background()","^Q","1.0","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^16",["^[",[null,null,null,null]]],"^U","background()","^V",3,"^W",true,"^X",520,"^Y",520,"^Z",["^[",["^10",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^12","Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  [[create-graphics]]. Converts args to `floats`."],"^P","background()","^Q","1.0","^@","~$quil.core/background","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^16",["^[",[null,null,null,null]]],"^U","background()","^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^15",null,"^1E",4,"^16",["^[",[null,null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"]],"^X",513,"^Y",520,"^1:",4,"^1;",true,"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^12","Sets the color used for the background of the Processing\n  window. The default background is light gray. In the draw function,\n  the background color is used to clear the display window at the\n  beginning of each frame.\n\n  It is not possible to use transparency (alpha) in background colors\n  with the main drawing surface, however they will work properly with\n  [[create-graphics]]. Converts args to `floats`."],"~$ortho",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","ortho()","^Q","1.0","^R","Camera","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[[],["~$left","~$right","~$bottom","~$top"],["^:7","^:8","^:9","^::","~$near","~$far"]],"^Z",["^[",[[],["^:7","^:8","^:9","^::"],["^:7","^:8","^:9","^::","^:;","^:<"]]],"^16",["^[",[null,null,null]]],"^U","ortho()","^V",3,"^W",true,"^X",2901,"^Y",2901,"^Z",["^[",["^10",["^[",[[],["^:7","^:8","^:9","^::"],["^:7","^:8","^:9","^::","^:;","^:<"]]]]],"^12","Sets an orthographic projection and defines a parallel clipping\n  volume. All objects with the same dimension appear the same size,\n  regardless of whether they are near or far from the camera. The\n  parameters to this function specify the clipping volume where `left`\n  and `right` are the minimum and maximum x values, `top` and `bottom` are\n  the minimum and maximum y values, and `near` and `far` are the minimum\n  and maximum z values. If no parameters are given, the default is\n  used: `(ortho 0 width 0 height -10 10)`"],"^P","ortho()","^Q","1.0","^@","~$quil.core/ortho","^R","Camera","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[[],["^:7","^:8","^:9","^::"],["^:7","^:8","^:9","^::","^:;","^:<"]],"^Z",["^[",[[],["^:7","^:8","^:9","^::"],["^:7","^:8","^:9","^::","^:;","^:<"]]],"^16",["^[",[null,null,null]]],"^U","ortho()","^14",[[],["^:7","^:8","^:9","^::"],["^:7","^:8","^:9","^::","^:;","^:<"]],"^15",null,"^1E",6,"^16",["^[",[null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",6,"^17",false,"^1H","^19"]],"^X",2894,"^Y",2901,"^1:",6,"^1;",true,"^Z",["^[",[[],["^:7","^:8","^:9","^::"],["^:7","^:8","^:9","^::","^:;","^:<"]]],"^12","Sets an orthographic projection and defines a parallel clipping\n  volume. All objects with the same dimension appear the same size,\n  regardless of whether they are near or far from the camera. The\n  parameters to this function specify the clipping volume where `left`\n  and `right` are the minimum and maximum x values, `top` and `bottom` are\n  the minimum and maximum y values, and `near` and `far` are the minimum\n  and maximum z values. If no parameters are given, the default is\n  used: `(ortho 0 width 0 height -10 10)`"],"~$hint-options",["^ ","^@","~$quil.core/hint-options","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",60,"^T",14,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",60,"^V",2,"^Y",60,"^T",14],"^1H","^2D"],"~$KEY-MAP",["^ ","^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",154,"^V",3,"^Y",154,"^T",10,"^7@",true],"^7@",true,"^@","~$quil.core/KEY-MAP","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^V",1,"^X",153,"^Y",154,"^1H","^2D"],"~$brightness",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","brightness()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","brightness()","^V",3,"^W",true,"^X",908,"^Y",908,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Extracts the brightness value from a color. Returns a `float`."],"^P","brightness()","^Q","1.0","^@","~$quil.core/brightness","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","brightness()","^14",["^[",[["^7K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",901,"^18","^19","^Y",908,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Extracts the brightness value from a color. Returns a `float`."],"~$arc-modes",["^ ","^@","~$quil.core/arc-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",51,"^T",11,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",51,"^V",2,"^Y",51,"^T",11],"^1H","^2D"],"~$specular",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","specularMaterial()","^Q","1.0","^R","Material Properties","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["^69"],["~$x","~$y","~$z"]],"^Z",["^[",[["^69"],["~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","specular()","^V",3,"^W",true,"^X",4013,"^Y",4013,"^Z",["^[",["^10",["^[",[["^69"],["~$x","~$y","~$z"]]]]],"^12","Sets the specular color of the materials used for shapes drawn to\n  the screen, which sets the color of highlights. Specular refers to\n  light which bounces off a surface in a preferred direction (rather\n  than bouncing in all directions like a diffuse light). Used in\n  combination with [[emissive]], [[ambient]], and [[shininess]] in setting\n  the material properties of shapes."],"^P","specularMaterial()","^Q","1.0","^@","~$quil.core/specular","^R","Material Properties","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["^69"],["~$x","~$y","~$z"]],"^Z",["^[",[["^69"],["~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","specular()","^14",[["^69"],["~$x","~$y","~$z"]],"^15",null,"^1E",3,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",4006,"^Y",4013,"^1:",3,"^1;",true,"^Z",["^[",[["^69"],["~$x","~$y","~$z"]]],"^12","Sets the specular color of the materials used for shapes drawn to\n  the screen, which sets the color of highlights. Specular refers to\n  light which bounces off a surface in a preferred direction (rather\n  than bouncing in all directions like a diffuse light). Used in\n  combination with [[emissive]], [[ambient]], and [[shininess]] in setting\n  the material properties of shapes."],"~$cursor",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","cursor()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["~$cursor-mode"]],"^Z",["^[",[[],["^:I"]]],"^16",["^[",[null,null]]],"^U","cursor()","^V",3,"^W",true,"^X",1282,"^Y",1282,"^Z",["^[",["^10",["^[",[[],["^:I"]]]]],"^12","Sets the cursor to a predefined symbol or makes it\n  visible if already hidden (after [[no-cursor]] was called).\n\n  Available modes: `:arrow`, `:cross`, `:hand`, `:move`, `:text`, `:wait`\n\n  See [[cursor-image]] for specifying a generic image as the cursor\n  symbol (clj only)."],"^P","cursor()","^Q","1.0","^@","~$quil.core/cursor","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^:I"]],"^Z",["^[",[[],["^:I"]]],"^16",["^[",[null,null]]],"^U","cursor()","^14",[[],["^:I"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^19"]],"^X",1275,"^Y",1282,"^1:",1,"^1;",true,"^Z",["^[",[[],["^:I"]]],"^12","Sets the cursor to a predefined symbol or makes it\n  visible if already hidden (after [[no-cursor]] was called).\n\n  Available modes: `:arrow`, `:cross`, `:hand`, `:move`, `:text`, `:wait`\n\n  See [[cursor-image]] for specifying a generic image as the cursor\n  symbol (clj only)."],"~$noise",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","noise()","^Q","1.0","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]],"^Z",["^[",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^16",["^[",[null,null,null]]],"^U","noise()","^V",3,"^W",true,"^X",2710,"^Y",2710,"^Z",["^[",["^10",["^[",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]]]],"^12","Returns the Perlin noise value at specified coordinates. Perlin\n  noise is a random sequence generator producing a more natural\n  ordered, harmonic succession of numbers compared to the standard\n  random function. It was invented by Ken Perlin in the 1980s and\n  been used since in graphical applications to produce procedural\n  textures, natural motion, shapes, terrains etc.\n\n  The main difference to the random function is that Perlin noise is\n  defined in an infinite n-dimensional space where each pair of\n  coordinates corresponds to a fixed semi-random value (fixed only for\n  the lifespan of the program). The resulting value will always be\n  between 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise,\n  depending on the number of coordinates given. The noise value can be\n  animated by moving through the noise space and the 2nd and 3rd\n  dimensions can also be interpreted as time.\n\n  The actual noise is structured similar to an audio signal, in\n  respect to the function's use of frequencies. Similar to the concept\n  of harmonics in physics, perlin noise is computed over several\n  octaves which are added together for the final result.\n\n  Another way to adjust the character of the resulting sequence is the\n  scale of the input coordinates. As the function works within an\n  infinite space the value of the coordinates doesn't matter as such,\n  only the distance between successive coordinates does (eg. when\n  using noise within a loop). As a general rule the smaller the\n  difference between coordinates, the smoother the resulting noise\n  sequence will be. Steps of 0.005-0.03 work best for most\n  applications, but this will differ depending on use."],"^P","noise()","^Q","1.0","^@","~$quil.core/noise","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]],"^Z",["^[",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^16",["^[",[null,null,null]]],"^U","noise()","^14",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]],"^15",null,"^1E",3,"^16",["^[",[null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",2703,"^Y",2710,"^1:",3,"^1;",true,"^Z",["^[",[["~$x"],["~$x","~$y"],["~$x","~$y","~$z"]]],"^12","Returns the Perlin noise value at specified coordinates. Perlin\n  noise is a random sequence generator producing a more natural\n  ordered, harmonic succession of numbers compared to the standard\n  random function. It was invented by Ken Perlin in the 1980s and\n  been used since in graphical applications to produce procedural\n  textures, natural motion, shapes, terrains etc.\n\n  The main difference to the random function is that Perlin noise is\n  defined in an infinite n-dimensional space where each pair of\n  coordinates corresponds to a fixed semi-random value (fixed only for\n  the lifespan of the program). The resulting value will always be\n  between 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise,\n  depending on the number of coordinates given. The noise value can be\n  animated by moving through the noise space and the 2nd and 3rd\n  dimensions can also be interpreted as time.\n\n  The actual noise is structured similar to an audio signal, in\n  respect to the function's use of frequencies. Similar to the concept\n  of harmonics in physics, perlin noise is computed over several\n  octaves which are added together for the final result.\n\n  Another way to adjust the character of the resulting sequence is the\n  scale of the input coordinates. As the function works within an\n  infinite space the value of the coordinates doesn't matter as such,\n  only the distance between successive coordinates does (eg. when\n  using noise within a loop). As a general rule the smaller the\n  difference between coordinates, the smoother the resulting noise\n  sequence will be. Steps of 0.005-0.03 work best for most\n  applications, but this will differ depending on use."],"~$push-style",["^ ","^M","Structure","^N",null,"^O",["^ ","^M","Structure","^P","push()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","pushStyle()","^V",3,"^W",true,"^X",3166,"^Y",3166,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Saves the current style settings onto a 'style stack'. Use with\n  [[pop-style]] which restores the prior settings. Note that these\n  functions are always used together. They allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with [[push-style]], it builds on the current style\n  information. The [[push-style]] and [[pop-style]] functions can be\n  embedded to provide more control.\n\n  The style information controlled by the following functions are\n  included in the\n  style: [[fill]], [[stroke]], [[tint]], [[stroke-weight]],\n  [[stroke-cap]], [[stroke-join]], [[image-mode]], [[rect-mode]],\n  [[ellipse-mode]], [[shape-mode]], [[color-mode]], [[text-align]],\n  [[text-font]], [[text-mode]], [[text-size]], [[text-leading]],\n  [[emissive]], [[specular]], [[shininess]], and [[ambient]]."],"^P","push()","^Q","1.0","^@","~$quil.core/push-style","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","pushStyle()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3159,"^18","^19","^Y",3166,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Saves the current style settings onto a 'style stack'. Use with\n  [[pop-style]] which restores the prior settings. Note that these\n  functions are always used together. They allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with [[push-style]], it builds on the current style\n  information. The [[push-style]] and [[pop-style]] functions can be\n  embedded to provide more control.\n\n  The style information controlled by the following functions are\n  included in the\n  style: [[fill]], [[stroke]], [[tint]], [[stroke-weight]],\n  [[stroke-cap]], [[stroke-join]], [[image-mode]], [[rect-mode]],\n  [[ellipse-mode]], [[shape-mode]], [[color-mode]], [[text-align]],\n  [[text-font]], [[text-mode]], [[text-size]], [[text-leading]],\n  [[emissive]], [[specular]], [[shininess]], and [[ambient]]."],"~$bezier-vertex",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","bezierVertex()","^Q","1.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",false,"^1E",9,"^1:",9,"^14",[["^59","^5:","^5;","^5<","~$x","~$y"],["^59","^5:","^5>","^5;","^5<","^5?","~$x","~$y","~$z"]],"^Z",["^[",[["^59","^5:","^5;","^5<","~$x","~$y"],["^59","^5:","^5>","^5;","^5<","^5?","~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","bezierVertex()","^V",3,"^W",true,"^X",692,"^Y",692,"^Z",["^[",["^10",["^[",[["^59","^5:","^5;","^5<","~$x","~$y"],["^59","^5:","^5>","^5;","^5<","^5?","~$x","~$y","~$z"]]]]],"^12","Specifies vertex coordinates for Bezier curves. Each call to\n  [[bezier-vertex]] defines the position of two control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or\n  shape. The first time [[bezier-vertex]] is used within a [[begin-shape]]\n  call, it must be prefaced with a call to [[vertex]] to set the first\n  anchor point. This function must be used between [[begin-shape]] and\n  [[end-shape]] and only when there is no parameter specified to\n  [[begin-shape]]."],"^P","bezierVertex()","^Q","1.0","^@","~$quil.core/bezier-vertex","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",false,"^1E",9,"^1:",9,"^14",[["^59","^5:","^5;","^5<","~$x","~$y"],["^59","^5:","^5>","^5;","^5<","^5?","~$x","~$y","~$z"]],"^Z",["^[",[["^59","^5:","^5;","^5<","~$x","~$y"],["^59","^5:","^5>","^5;","^5<","^5?","~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","bezierVertex()","^14",[["^59","^5:","^5;","^5<","~$x","~$y"],["^59","^5:","^5>","^5;","^5<","^5?","~$x","~$y","~$z"]],"^15",null,"^1E",9,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",6,"^17",false,"^1H","^19"],["^ ","^1E",9,"^17",false,"^1H","^19"]],"^X",685,"^Y",692,"^1:",9,"^1;",true,"^Z",["^[",[["^59","^5:","^5;","^5<","~$x","~$y"],["^59","^5:","^5>","^5;","^5<","^5?","~$x","~$y","~$z"]]],"^12","Specifies vertex coordinates for Bezier curves. Each call to\n  [[bezier-vertex]] defines the position of two control points and one\n  anchor point of a Bezier curve, adding a new segment to a line or\n  shape. The first time [[bezier-vertex]] is used within a [[begin-shape]]\n  call, it must be prefaced with a call to [[vertex]] to set the first\n  anchor point. This function must be used between [[begin-shape]] and\n  [[end-shape]] and only when there is no parameter specified to\n  [[begin-shape]]."],"~$light-falloff",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^Q","1.0","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","lightFalloff()","^V",3,"^W",true,"^X",2265,"^Y",2265,"^Z",["^[",["^10",["^[",[["~$constant","~$linear","~$quadratic"]]]]],"^12","Sets the falloff rates for point lights, spot lights, and ambient\n  lights. The parameters are used to determine the falloff with the\n  following equation:\n\n  d = distance from light position to vertex position\n  falloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)\n\n  Like fill, it affects only the elements which are created after it\n  in the code. The default value is `(light-falloff 1.0 0.0 0.0)`.\n  Thinking about an ambient light with a falloff can be tricky. It is\n  used, for example, if you wanted a region of your scene to be lit\n  ambiently by one color and another region to be lit ambiently by\n  another color, you would use an ambient light with location and\n  falloff. You can think of it as a point light that doesn't care\n  which direction a surface it is facing."],"^Q","1.0","^@","~$quil.core/light-falloff","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","lightFalloff()","^14",["^[",[["^:R","^:S","^:T"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2259,"^18","^19","^Y",2265,"^1:",3,"^1;",true,"^Z",["^[",["^10",["^[",[["^:R","^:S","^:T"]]]]],"^12","Sets the falloff rates for point lights, spot lights, and ambient\n  lights. The parameters are used to determine the falloff with the\n  following equation:\n\n  d = distance from light position to vertex position\n  falloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)\n\n  Like fill, it affects only the elements which are created after it\n  in the code. The default value is `(light-falloff 1.0 0.0 0.0)`.\n  Thinking about an ambient light with a falloff can be tricky. It is\n  used, for example, if you wanted a region of your scene to be lit\n  ambiently by one color and another region to be lit ambiently by\n  another color, you would use an ambient light with location and\n  falloff. You can think of it as a point light that doesn't care\n  which direction a surface it is facing."],"~$noise-detail",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","noiseDetail()","^Q","1.0","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["~$octaves"],["^:W","~$falloff"]],"^Z",["^[",[["^:W"],["^:W","^:X"]]],"^16",["^[",[null,null]]],"^U","noiseDetail()","^V",3,"^W",true,"^X",2751,"^Y",2751,"^Z",["^[",["^10",["^[",[["^:W"],["^:W","^:X"]]]]],"^12","Adjusts the character and level of detail produced by the Perlin\n  noise function. Similar to harmonics in physics, noise is computed\n  over several octaves. Lower octaves contribute more to the output\n  signal and as such define the overall intensity of the noise, whereas\n  higher octaves create finer grained details in the noise\n  sequence. By default, noise is computed over 4 octaves with each\n  octave contributing exactly half than its predecessor, starting at\n  50% strength for the 1st octave. This falloff amount can be changed\n  by adding an additional function parameter. Eg. a falloff factor of\n  0.75 means each octave will now have 75% impact (25% less) of the\n  previous lower octave. Any value between 0.0 and 1.0 is valid,\n  however note that values greater than 0.5 might result in greater\n  than 1.0 values returned by noise.\n\n  By changing these parameters, the signal created by the noise\n  function can be adapted to fit very specific needs and\n  characteristics."],"^P","noiseDetail()","^Q","1.0","^@","~$quil.core/noise-detail","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^:W"],["^:W","^:X"]],"^Z",["^[",[["^:W"],["^:W","^:X"]]],"^16",["^[",[null,null]]],"^U","noiseDetail()","^14",[["^:W"],["^:W","^:X"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"]],"^X",2744,"^Y",2751,"^1:",2,"^1;",true,"^Z",["^[",[["^:W"],["^:W","^:X"]]],"^12","Adjusts the character and level of detail produced by the Perlin\n  noise function. Similar to harmonics in physics, noise is computed\n  over several octaves. Lower octaves contribute more to the output\n  signal and as such define the overall intensity of the noise, whereas\n  higher octaves create finer grained details in the noise\n  sequence. By default, noise is computed over 4 octaves with each\n  octave contributing exactly half than its predecessor, starting at\n  50% strength for the 1st octave. This falloff amount can be changed\n  by adding an additional function parameter. Eg. a falloff factor of\n  0.75 means each octave will now have 75% impact (25% less) of the\n  previous lower octave. Any value between 0.0 and 1.0 is valid,\n  however note that values greater than 0.5 might result in greater\n  than 1.0 values returned by noise.\n\n  By changing these parameters, the signal created by the noise\n  function can be adapted to fit very specific needs and\n  characteristics."],"~$save",["^ ","^M","Output","^N",null,"^O",["^ ","^M","Output","^P","save()","^Q","1.0","^R","Image","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","save()","^V",3,"^W",true,"^X",3681,"^Y",3681,"^Z",["^[",["^10",["^[",[["^56"]]]]],"^12","Saves an image from the display window. Images are saved in TIFF,\n  TARGA, JPEG, and PNG format depending on the extension within the\n  filename parameter. For example, image.tif will have a TIFF image\n  and image.png will save a PNG image. If no extension is included in\n  the filename, the image will save in TIFF format and .tif will be\n  added to the name. All images saved from the main drawing window\n  will be opaque. To save images without a background, use\n  [[create-graphics]]."],"^P","save()","^Q","1.0","^@","~$quil.core/save","^R","Image","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","save()","^14",["^[",[["^56"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3674,"^18","^19","^Y",3681,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^56"]]]]],"^12","Saves an image from the display window. Images are saved in TIFF,\n  TARGA, JPEG, and PNG format depending on the extension within the\n  filename parameter. For example, image.tif will have a TIFF image\n  and image.png will save a PNG image. If no extension is included in\n  the filename, the image will save in TIFF format and .tif will be\n  added to the name. All images saved from the main drawing window\n  will be opaque. To save images without a background, use\n  [[create-graphics]]."],"~$curve-point",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","curvePoint()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","curvePoint()","^V",3,"^W",true,"^X",1362,"^Y",1362,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^12","Evaluates the curve at point `t` for points `a`, `b`, `c`, `d`. The\n  parameter `t` varies between 0 and 1, `a` and `d` are points on the\n  curve, and `b` and `c` are the control points. This can be done once\n  with the x coordinates and a second time with the y coordinates to\n  get the location of a curve at `t`."],"^P","curvePoint()","^Q","1.0","^@","~$quil.core/curve-point","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","curvePoint()","^14",["^[",[["~$a","~$b","~$c","~$d","~$t"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1355,"^18","^19","^Y",1362,"^1:",5,"^1;",true,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^12","Evaluates the curve at point `t` for points `a`, `b`, `c`, `d`. The\n  parameter `t` varies between 0 and 1, `a` and `d` are points on the\n  curve, and `b` and `c` are the control points. This can be done once\n  with the x coordinates and a second time with the y coordinates to\n  get the location of a curve at `t`."],"~$state",["^ ","^M","State","^N",null,"^O",["^ ","^M","State","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["~$key"]],"^Z",["^[",[[],["^;3"]]],"^16",["^[",[null,null]]],"^V",3,"^W",true,"^X",208,"^Y",208,"^Z",["^[",["^10",["^[",[[],["^;3"]]]]],"^12","Retrieve sketch-specific state by `key`. Must initially call\n  [[set-state!]] to store state. If no parameter is passed the whole\n  state map is returned.\n\n  Example:\n  ```\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (state) ;=> {:foo 1}\n  ```"],"^Q","1.0","^@","~$quil.core/state","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["^;3"]],"^Z",["^[",[[],["^;3"]]],"^16",["^[",[null,null]]],"^14",[[],["^;3"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H",["^>",["^19","^1I"]]]],"^X",203,"^Y",208,"^1:",1,"^1;",true,"^Z",["^[",[[],["^;3"]]],"^12","Retrieve sketch-specific state by `key`. Must initially call\n  [[set-state!]] to store state. If no parameter is passed the whole\n  state map is returned.\n\n  Example:\n  ```\n  (set-state! :foo 1)\n  (state :foo) ;=> 1\n  (state) ;=> {:foo 1}\n  ```"],"~$load-shader",["^ ","^M","Rendering","^N",null,"^O",["^ ","^M","Rendering","^P","loadShader()","^Q","2.0","^R","Shaders","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["~$fragment-filename"],["^;6","~$vertex-filename"]],"^Z",["^[",[["^;6"],["^;6","^;7"]]],"^16",["^[",[null,null]]],"^U","loadShader()","^V",3,"^W",true,"^X",2441,"^Y",2441,"^Z",["^[",["^10",["^[",[["^;6"],["^;6","^;7"]]]]],"^12","Loads a shader into the `PShader` object for clj and `Shader` object for\n  cljs. In clj mode shaders are\n  compatible with the P2D and P3D renderers, but not with the default\n  renderer. In cljs mode shaders are compatible with the P3D renderer."],"^P","loadShader()","^Q","2.0","^@","~$quil.core/load-shader","^R","Shaders","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^;6"],["^;6","^;7"]],"^Z",["^[",[["^;6"],["^;6","^;7"]]],"^16",["^[",[null,null]]],"^U","loadShader()","^14",[["^;6"],["^;6","^;7"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"]],"^X",2434,"^Y",2441,"^1:",2,"^1;",true,"^Z",["^[",[["^;6"],["^;6","^;7"]]],"^12","Loads a shader into the `PShader` object for clj and `Shader` object for\n  cljs. In clj mode shaders are\n  compatible with the P2D and P3D renderers, but not with the default\n  renderer. In cljs mode shaders are compatible with the P3D renderer."],"~$resize",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","Image.resize()","^Q","2.1.0","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","resize()","^V",3,"^3[","https://processing.org/reference/PImage_resize_.html","^W",true,"^X",3517,"^Y",3517,"^Z",["^[",["^10",["^[",[["^2I","~$w","~$h"]]]]],"^12","Resize the image to a new width and height.\n  To make the image scale proportionally, use 0 as the value for the wide or\n  high parameter. For instance, to make the width of an image 150 pixels,\n  and change the height using the same proportion, use `(resize 150 0)`.\n\n  Even though a `PGraphics` is technically a `PImage`, it is not possible\n  to rescale the image data found in a `PGraphics`.\n  (It's simply not possible to do this consistently across renderers:\n  technically infeasible with P3D, or what would it even do with PDF?)\n  If you want to resize `PGraphics` content, first get a copy of its image data\n  using the get() method, and call resize() on the `PImage` that is returned."],"^P","Image.resize()","^Q","2.1.0","^@","~$quil.core/resize","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","resize()","^14",["^[",[["^2I","~$w","~$h"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^3[","https://processing.org/reference/PImage_resize_.html","^17",false,"^W",true,"^X",3510,"^18","^19","^Y",3517,"^1:",3,"^1;",true,"^Z",["^[",["^10",["^[",[["^2I","~$w","~$h"]]]]],"^12","Resize the image to a new width and height.\n  To make the image scale proportionally, use 0 as the value for the wide or\n  high parameter. For instance, to make the width of an image 150 pixels,\n  and change the height using the same proportion, use `(resize 150 0)`.\n\n  Even though a `PGraphics` is technically a `PImage`, it is not possible\n  to rescale the image data found in a `PGraphics`.\n  (It's simply not possible to do this consistently across renderers:\n  technically infeasible with P3D, or what would it even do with PDF?)\n  If you want to resize `PGraphics` content, first get a copy of its image data\n  using the get() method, and call resize() on the `PImage` that is returned."],"~$perspective",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","perspective()","^Q","1.0","^R","Camera","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[[],["~$fovy","~$aspect","~$z-near","~$z-far"]],"^Z",["^[",[[],["^;<","^;=","^;>","^;?"]]],"^16",["^[",[null,null]]],"^U","perspective()","^V",3,"^W",true,"^X",2923,"^Y",2923,"^Z",["^[",["^10",["^[",[[],["^;<","^;=","^;>","^;?"]]]]],"^12","Sets a perspective projection applying foreshortening, making\n  distant objects appear smaller than closer ones. The parameters\n  define a viewing volume with the shape of truncated pyramid. Objects\n  near to the front of the volume appear their actual size, while\n  farther objects appear smaller. This projection simulates the\n  perspective of the world more accurately than orthographic\n  projection. The version of perspective without parameters sets the\n  default perspective and the version with four parameters allows the\n  programmer to set the area precisely. The default values are:\n  `perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0)` where\n  `cameraZ` is `((height/2.0) / tan(PI*60.0/360.0))`"],"^P","perspective()","^Q","1.0","^@","~$quil.core/perspective","^R","Camera","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[[],["^;<","^;=","^;>","^;?"]],"^Z",["^[",[[],["^;<","^;=","^;>","^;?"]]],"^16",["^[",[null,null]]],"^U","perspective()","^14",[[],["^;<","^;=","^;>","^;?"]],"^15",null,"^1E",4,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"]],"^X",2916,"^Y",2923,"^1:",4,"^1;",true,"^Z",["^[",[[],["^;<","^;=","^;>","^;?"]]],"^12","Sets a perspective projection applying foreshortening, making\n  distant objects appear smaller than closer ones. The parameters\n  define a viewing volume with the shape of truncated pyramid. Objects\n  near to the front of the volume appear their actual size, while\n  farther objects appear smaller. This projection simulates the\n  perspective of the world more accurately than orthographic\n  projection. The version of perspective without parameters sets the\n  default perspective and the version with four parameters allows the\n  programmer to set the area precisely. The default values are:\n  `perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0)` where\n  `cameraZ` is `((height/2.0) / tan(PI*60.0/360.0))`"],"~$seconds",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","second()","^Q","1.0","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","second()","^V",3,"^W",false,"^X",3775,"^Y",3775,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current second as a value from 0 - 59."],"^P","second()","^Q","1.0","^@","~$quil.core/seconds","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","second()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",3768,"^18","^19","^Y",3775,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current second as a value from 0 - 59."],"~$vertex",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","vertex()","^Q","1.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]],"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^16",["^[",[null,null,null,null]]],"^U","vertex()","^V",3,"^W",true,"^X",4684,"^Y",4684,"^Z",["^[",["^10",["^[",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]]]],"^12","All shapes are constructed by connecting a series of\n  vertices. [[vertex]] is used to specify the vertex coordinates for\n  points, lines, triangles, quads, and polygons and is used\n  exclusively within the [[begin-shape]] and [[end-shape]] functions.\n\n  Drawing a vertex in 3D using the `z` parameter requires the `:p3d` or\n  `:opengl` renderers to be used.\n\n  This function is also used to map a texture onto the geometry. The\n  [[texture]] function declares the texture to apply to the geometry and the `u`\n  and `v` coordinates set define the mapping of this texture to the\n  form. By default, the coordinates used for `u` and `v` are specified in\n  relation to the image's size in pixels, but this relation can be\n  changed with [[texture-mode]]."],"^P","vertex()","^Q","1.0","^@","~$quil.core/vertex","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]],"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^16",["^[",[null,null,null,null]]],"^U","vertex()","^14",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]],"^15",null,"^1E",5,"^16",["^[",[null,null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",5,"^17",false,"^1H","^19"]],"^X",4677,"^Y",4684,"^1:",5,"^1;",true,"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"],["~$x","~$y","~$u","~$v"],["~$x","~$y","~$z","~$u","~$v"]]],"^12","All shapes are constructed by connecting a series of\n  vertices. [[vertex]] is used to specify the vertex coordinates for\n  points, lines, triangles, quads, and polygons and is used\n  exclusively within the [[begin-shape]] and [[end-shape]] functions.\n\n  Drawing a vertex in 3D using the `z` parameter requires the `:p3d` or\n  `:opengl` renderers to be used.\n\n  This function is also used to map a texture onto the geometry. The\n  [[texture]] function declares the texture to apply to the geometry and the `u`\n  and `v` coordinates set define the mapping of this texture to the\n  form. By default, the coordinates used for `u` and `v` are specified in\n  relation to the image's size in pixels, but this relation can be\n  changed with [[texture-mode]]."],"~$horizontal-alignment-modes",["^ ","^@","~$quil.core/horizontal-alignment-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",74,"^T",28,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",74,"^V",2,"^Y",74,"^T",28],"^1H","^2D"],"~$target-frame-rate",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^Q","1.5.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",20,"^V",3,"^W",true,"^X",4237,"^Y",4237,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the target framerate specified with the function [[frame-rate]]"],"^Q","1.5.0","^@","~$quil.core/target-frame-rate","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",20,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4232,"^18","^19","^Y",4237,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the target framerate specified with the function [[frame-rate]]"],"~$tint",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","tint()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^16",["^[",[null,null,null,null]]],"^U","tint()","^V",3,"^W",true,"^X",4550,"^Y",4550,"^Z",["^[",["^10",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]]]],"^12","Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the `alpha`.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an `alpha` value. For instance,\n  `(tint 255 128)` will make an image 50% transparent (unless\n  [[color-mode]] has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by [[color-mode]]. The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."],"^P","tint()","^Q","1.0","^@","~$quil.core/tint","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^16",["^[",[null,null,null,null]]],"^U","tint()","^14",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]],"^15",null,"^1E",4,"^16",["^[",[null,null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"]],"^X",4543,"^Y",4550,"^1:",4,"^1;",true,"^Z",["^[",[["^69"],["^69","^6:"],["~$r","~$g","~$b"],["~$r","~$g","~$b","~$a"]]],"^12","Sets the fill value for displaying images. Images can be tinted to\n  specified colors or made transparent by setting the `alpha`.\n\n  To make an image transparent, but not change it's color, use white\n  as the tint color and specify an `alpha` value. For instance,\n  `(tint 255 128)` will make an image 50% transparent (unless\n  [[color-mode]] has been used).\n\n  The value for the parameter gray must be less than or equal to the\n  current maximum value as specified by [[color-mode]]. The default\n  maximum value is 255.\n\n  Also used to control the coloring of textures in 3D."],"~$bezier-tangent",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","bezierTangent()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^U","bezierTangent()","^V",3,"^W",true,"^X",678,"^Y",678,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^12","Calculates the tangent of a point on a Bezier curve.\n  (See http://en.wikipedia.org/wiki/Tangent)"],"^P","bezierTangent()","^Q","1.0","^@","~$quil.core/bezier-tangent","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^U","bezierTangent()","^14",["^[",[["~$a","~$b","~$c","~$d","~$t"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",671,"^18","^19","^Y",678,"^1:",5,"^1;",true,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^12","Calculates the tangent of a point on a Bezier curve.\n  (See http://en.wikipedia.org/wiki/Tangent)"],"~$asin",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","asin()","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","asin()","^V",3,"^W",false,"^X",431,"^Y",431,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","The inverse of [[sin]], returns the arc sine of a value. This function\n  expects the values in the range of -1 to 1 and values are returned\n  in the range `-PI/2` to `PI/2`."],"^P","asin()","^Q","1.0","^@","~$quil.core/asin","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","asin()","^14",["^[",[["~$n"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",424,"^18","^19","^Y",431,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","The inverse of [[sin]], returns the arc sine of a value. This function\n  expects the values in the range of -1 to 1 and values are returned\n  in the range `-PI/2` to `PI/2`."],"~$lerp",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","lerp()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","lerp()","^V",3,"^W",false,"^X",2309,"^Y",2309,"^Z",["^[",["^10",["^[",[["^7N","^7O","^2Q"]]]]],"^12","Calculates a number between two numbers at a specific\n  increment. The `amt` parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc. The lerp function\n  is convenient for creating motion along a straight path and for\n  drawing dotted lines."],"^P","lerp()","^Q","1.0","^@","~$quil.core/lerp","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","lerp()","^14",["^[",[["^7N","^7O","^2Q"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",2302,"^18","^19","^Y",2309,"^1:",3,"^1;",true,"^Z",["^[",["^10",["^[",[["^7N","^7O","^2Q"]]]]],"^12","Calculates a number between two numbers at a specific\n  increment. The `amt` parameter is the amount to interpolate between\n  the two values where 0.0 equal to the first point, 0.1 is very near\n  the first point, 0.5 is half-way in between, etc. The lerp function\n  is convenient for creating motion along a straight path and for\n  drawing dotted lines."],"~$unhex",["^ ","^M","Data","^N",null,"^O",["^ ","^M","Data","^P","unhex()","^4F",false,"^R","Conversion","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","unhex()","^V",3,"^X",4648,"^Y",4648,"^Z",["^[",["^10",["^[",[["~$hex-str"]]]]],"^12","Converts a String representation of a hexadecimal number to its\n  equivalent integer value."],"^P","unhex()","^4F",false,"^@","~$quil.core/unhex","^R","Conversion","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","unhex()","^14",["^[",[["^;R"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^X",4642,"^18","^19","^Y",4648,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^;R"]]]]],"^12","Converts a String representation of a hexadecimal number to its\n  equivalent integer value."],"~$text-num",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","text()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^9E","~$x","~$y"],["^9E","~$x","~$y","~$z"]],"^Z",["^[",[["^9E","~$x","~$y"],["^9E","~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","text()","^V",3,"^W",true,"^X",4266,"^Y",4266,"^Z",["^[",["^10",["^[",[["^9E","~$x","~$y"],["^9E","~$x","~$y","~$z"]]]]],"^12","Draws a number to the screen in the specified position. See the\n  [[text]] function for more details."],"^P","text()","^Q","1.0","^@","~$quil.core/text-num","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^9E","~$x","~$y"],["^9E","~$x","~$y","~$z"]],"^Z",["^[",[["^9E","~$x","~$y"],["^9E","~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","text()","^14",[["^9E","~$x","~$y"],["^9E","~$x","~$y","~$z"]],"^15",null,"^1E",4,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",3,"^17",false,"^1H",["^>",["^19","^1I"]]],["^ ","^1E",4,"^17",false,"^1H",["^>",["^19","^1I"]]]],"^X",4259,"^Y",4266,"^1:",4,"^1;",true,"^Z",["^[",[["^9E","~$x","~$y"],["^9E","~$x","~$y","~$z"]]],"^12","Draws a number to the screen in the specified position. See the\n  [[text]] function for more details."],"~$round",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","round()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","round()","^V",3,"^W",false,"^X",3655,"^Y",3655,"^Z",["^[",["^10",["^[",[["^30"]]]]],"^12","Calculates the integer closest to the value parameter. For example,\n  `(round 9.2)` returns the value 9."],"^P","round()","^Q","1.0","^@","~$quil.core/round","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","round()","^14",["^[",[["^30"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",3648,"^18","^19","^Y",3655,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^30"]]]]],"^12","Calculates the integer closest to the value parameter. For example,\n  `(round 9.2)` returns the value 9."],"~$background-image",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","background()","^Q","1.0","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^U","background()","^V",3,"^W",true,"^X",541,"^Y",541,"^Z",["^[",["^10",["^[",[["^2I"]]]]],"^12","Specify an image to be used as the background for a sketch. Its\n  width and height must be the same size as the sketch window. Images\n  used as background will ignore the current [[tint]] setting."],"^P","background()","^Q","1.0","^@","~$quil.core/background-image","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^U","background()","^14",["^[",[["^2I"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",534,"^18","^19","^Y",541,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^2I"]]]]],"^12","Specify an image to be used as the background for a sketch. Its\n  width and height must be the same size as the sketch window. Images\n  used as background will ignore the current [[tint]] setting."],"~$load-shape",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","loadModel()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","loadShape()","^V",3,"^W",true,"^X",2459,"^Y",2459,"^Z",["^[",["^10",["^[",[["^56"]]]]],"^12","Load a geometry from a file as a `PShape` in clj, and a `Geometry`\n  in cljs."],"^P","loadModel()","^Q","1.0","^@","~$quil.core/load-shape","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","loadShape()","^14",["^[",[["^56"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2452,"^18","^19","^Y",2459,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^56"]]]]],"^12","Load a geometry from a file as a `PShape` in clj, and a `Geometry`\n  in cljs."],"~$vertical-alignment-modes",["^ ","^@","~$quil.core/vertical-alignment-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",75,"^T",26,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",75,"^V",2,"^Y",75,"^T",26],"^1H","^2D"],"~$QUARTER-PI",["^ ","^@","~$quil.core/QUARTER-PI","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",88,"^V",1,"^Y",88,"^T",16,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",88,"^V",6,"^Y",88,"^T",16],"^1H","^4B"],"~$stroke-cap",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","strokeCap()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","strokeCap()","^V",3,"^W",true,"^X",4172,"^Y",4172,"^Z",["^[",["^10",["^[",[["~$cap-mode"]]]]],"^12","Sets the style for rendering line endings. These ends are either\n  squared, extended, or rounded and specified with the corresponding\n  parameters `:square`, `:project`, and `:round`. The default cap is `:round`."],"^P","strokeCap()","^Q","1.0","^@","~$quil.core/stroke-cap","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","strokeCap()","^14",["^[",[["^<5"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4165,"^18","^19","^Y",4172,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^<5"]]]]],"^12","Sets the style for rendering line endings. These ends are either\n  squared, extended, or rounded and specified with the corresponding\n  parameters `:square`, `:project`, and `:round`. The default cap is `:round`."],"~$blend-modes",["^ ","^@","~$quil.core/blend-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",54,"^T",13,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",54,"^V",2,"^Y",54,"^T",13],"^1H","^2D"],"~$no-fill",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","noFill()","^Q","1.0","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","noFill()","^V",3,"^W",true,"^X",2696,"^Y",2696,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Disables filling geometry. If both [[no-stroke]] and [[no-fill]] are called,\n  nothing will be drawn to the screen."],"^P","noFill()","^Q","1.0","^@","~$quil.core/no-fill","^R","Setting","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","noFill()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2689,"^18",["^>",[null,"^19"]],"^Y",2696,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Disables filling geometry. If both [[no-stroke]] and [[no-fill]] are called,\n  nothing will be drawn to the screen."],"~$resize-sketch",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^Q","2.7.0","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^V",3,"~:require-bindings",true,"^X",3536,"^Y",3536,"^Z",["^[",["^10",["^[",[["^1S","^1T"]]]]],"^12","Resizes sketch.\n  Note about ClojureScript version: if the `div` element is resized externally\n  (for example from js on a page then you still need to call this\n  method in order to tell Quil that size has changed. Currently there is no\n  good way to automatically detect that size of the `<div>` element changed."],"^Q","2.7.0","^@","~$quil.core/resize-sketch","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^14",["^[",[["^1S","^1T"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^<<",true,"^X",3532,"^18","^19","^Y",3536,"^1:",2,"^1;",true,"^Z",["^[",["^10",["^[",[["^1S","^1T"]]]]],"^12","Resizes sketch.\n  Note about ClojureScript version: if the `div` element is resized externally\n  (for example from js on a page then you still need to call this\n  method in order to tell Quil that size has changed. Currently there is no\n  good way to automatically detect that size of the `<div>` element changed."],"~$year",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","year()","^Q","1.0","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","year()","^V",3,"^W",false,"^X",4713,"^Y",4713,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current year as an integer (2003, 2004, 2005, etc)."],"^P","year()","^Q","1.0","^@","~$quil.core/year","^R","Time & Date","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","year()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",4706,"^18","^19","^Y",4713,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current year as an integer (2003, 2004, 2005, etc)."],"~$cast-color",["^ ","^N",null,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",495,"^V",8,"^Y",495,"^T",18,"^7@",true,"^Z",["^[",["^10",["^[",[["^69"]]]]],"^12","Help cast a single argument gray value for a color setting function.\n\n  In processing, this can be an integer or a numeric float. In p5js, this can be\n  any of an integer, color string (hex or hsb) or other value, numeric float or\n  p5.Color.\n\n  Partial fix to https://github.com/quil/quil/issues/364. Unfortunately pretty\n  expensive check for CLJS and probably does not help for avoiding reflection."],"^7@",true,"^@","~$quil.core/cast-color","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",18,"^14",["^[",[["^69"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^X",495,"^18",["^>",[null,"^4B"]],"^Y",495,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^69"]]]]],"^12","Help cast a single argument gray value for a color setting function.\n\n  In processing, this can be an integer or a numeric float. In p5js, this can be\n  any of an integer, color string (hex or hsb) or other value, numeric float or\n  p5.Color.\n\n  Partial fix to https://github.com/quil/quil/issues/364. Unfortunately pretty\n  expensive check for CLJS and probably does not help for avoiding reflection."],"~$key-coded?",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^Q","1.6","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U",null,"^V",3,"^W",false,"^X",5005,"^Y",5005,"^Z",["^[",["^10",["^[",[["~$c"]]]]],"^12","Returns true if char `c` is a `coded` char i.e. it is necessary to\n  fetch the [[key-code]] as an integer and use that to determine the\n  specific key pressed. See [[key-as-keyword]]."],"^Q","1.6","^@","~$quil.core/key-coded?","^R","Keyboard","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U",null,"^14",["^[",[["~$c"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",5000,"^18","^2>","^Y",5005,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$c"]]]]],"^12","Returns true if char `c` is a `coded` char i.e. it is necessary to\n  fetch the [[key-code]] as an integer and use that to determine the\n  specific key pressed. See [[key-as-keyword]]."],"~$curve-tangent",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","curveTangent()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","curveTangent()","^V",3,"^W",true,"^X",1378,"^Y",1378,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^12","Calculates the tangent of a point on a curve.\n  See: http://en.wikipedia.org/wiki/Tangent"],"^P","curveTangent()","^Q","1.0","^@","~$quil.core/curve-tangent","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^U","curveTangent()","^14",["^[",[["~$a","~$b","~$c","~$d","~$t"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1371,"^18","^19","^Y",1378,"^1:",5,"^1;",true,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^12","Calculates the tangent of a point on a curve.\n  See: http://en.wikipedia.org/wiki/Tangent"],"~$ellipse-modes",["^ ","^@","~$quil.core/ellipse-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",59,"^T",15,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",59,"^V",2,"^Y",59,"^T",15],"^1H","^2D"],"~$pmouse-y",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","pmouseY","^Q","1.0","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","pmouseY","^V",3,"^W",true,"^X",3005,"^Y",3005,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Vertical coordinate of the mouse in the previous frame"],"^P","pmouseY","^Q","1.0","^@","~$quil.core/pmouse-y","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","pmouseY","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2998,"^18","^19","^Y",3005,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Vertical coordinate of the mouse in the previous frame"],"~$hex",["^ ","^M","Data","^N",null,"^O",["^ ","^M","Data","^P","hex()","^4F",false,"^R","Conversion","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^30"],["^30","^4G"]],"^Z",["^[",[["^30"],["^30","^4G"]]],"^16",["^[",[null,null]]],"^U","hex()","^V",3,"^X",1973,"^Y",1973,"^Z",["^[",["^10",["^[",[["^30"],["^30","^4G"]]]]],"^12","Converts a byte, char, int, or color to a String containing the\n  equivalent hexadecimal notation. For example color(0, 102, 153) will\n  convert to the String \"FF006699\". This function can help make your\n  geeky debugging sessions much happier."],"^P","hex()","^4F",false,"^@","~$quil.core/hex","^R","Conversion","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^30"],["^30","^4G"]],"^Z",["^[",[["^30"],["^30","^4G"]]],"^16",["^[",[null,null]]],"^U","hex()","^14",[["^30"],["^30","^4G"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"]],"^X",1967,"^Y",1973,"^1:",2,"^1;",true,"^Z",["^[",[["^30"],["^30","^4G"]]],"^12","Converts a byte, char, int, or color to a String containing the\n  equivalent hexadecimal notation. For example color(0, 102, 153) will\n  convert to the String \"FF006699\". This function can help make your\n  geeky debugging sessions much happier."],"~$with-fill",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^Q","1.7","^R","Utility Macros","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^90","^26"]]]],"^Z",["^[",[["^90","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^V",3,"^W",true,"^X",4739,"^27",true,"^Y",4739,"^Z",["^[",["^10",["^[",[["^90","~$&","^26"]]]]],"^12","Temporarily set the fill color for the body of this macro.\n   The code outside of the [[with-fill]] form will have the previous\n   fill color set.\n\n   A fill argument of nil disables the fill.\n\n   Examples:\n   ```\n   (with-fill 255 ...)\n   (with-fill [10 80 98] ...)\n   (with-fill nil ...)\n   ```"],"^Q","1.7","^@","~$quil.core/with-fill","^R","Utility Macros","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^90","^26"]]]],"^Z",["^[",[["^90","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^14",["^[",[["^[",["^90","^26"]]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^29","^2:"]]]],"^X",4733,"^27",true,"^18","^19","^Y",4739,"^1:",1,"^1;",false,"^Z",["^[",[["^90","~$&","^26"]]],"^12","Temporarily set the fill color for the body of this macro.\n   The code outside of the [[with-fill]] form will have the previous\n   fill color set.\n\n   A fill argument of nil disables the fill.\n\n   Examples:\n   ```\n   (with-fill 255 ...)\n   (with-fill [10 80 98] ...)\n   (with-fill nil ...)\n   ```"],"~$ellipsoid",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","ellipsoid()","^Q","3.0.0","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["~$radius-x","~$radius-y","~$radius-z"],["^<O","^<P","^<Q","~$detail-x"],["^<O","^<P","^<Q","^<R","~$detail-y"]],"^Z",["^[",[["^<O","^<P","^<Q"],["^<O","^<P","^<Q","^<R"],["^<O","^<P","^<Q","^<R","^<S"]]],"^16",["^[",[null,null,null]]],"^V",6,"^W",true,"^X",1594,"^Y",1594,"^Z",["^[",["^10",["^[",[["^<O","^<P","^<Q"],["^<O","^<P","^<Q","^<R"],["^<O","^<P","^<Q","^<R","^<S"]]]]],"^12","Draws an ellipsoid with given radius\n\n      Optional parameters:\n        * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n        * `detail-y` - number of segments, the more segments the smoother geometry default is 16"],"^P","ellipsoid()","^Q","3.0.0","^@","~$quil.core/ellipsoid","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["^<O","^<P","^<Q"],["^<O","^<P","^<Q","^<R"],["^<O","^<P","^<Q","^<R","^<S"]],"^Z",["^[",[["^<O","^<P","^<Q"],["^<O","^<P","^<Q","^<R"],["^<O","^<P","^<Q","^<R","^<S"]]],"^16",["^[",[null,null,null]]],"^14",[["^<O","^<P","^<Q"],["^<O","^<P","^<Q","^<R"],["^<O","^<P","^<Q","^<R","^<S"]],"^15",null,"^1E",5,"^16",["^[",[null,null,null]],"^V",4,"^17",false,"^W",true,"^1G",[["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",5,"^17",false,"^1H","^19"]],"^X",1588,"^Y",1594,"^1:",5,"^1;",true,"^Z",["^[",[["^<O","^<P","^<Q"],["^<O","^<P","^<Q","^<R"],["^<O","^<P","^<Q","^<R","^<S"]]],"^12","Draws an ellipsoid with given radius\n\n      Optional parameters:\n        * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n        * `detail-y` - number of segments, the more segments the smoother geometry default is 16"],"~$no-cursor",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","noCursor()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","noCursor()","^V",3,"^W",true,"^X",2683,"^Y",2683,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Hides the cursor from view. Will not work when running in full\n  screen (Present) mode."],"^P","noCursor()","^Q","1.0","^@","~$quil.core/no-cursor","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","noCursor()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2676,"^18","^19","^Y",2683,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Hides the cursor from view. Will not work when running in full\n  screen (Present) mode."],"~$current-graphics",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^Q","2.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^V",3,"^W",true,"^X",32,"^Y",32,"^1H","~$PGraphics","^Z",["^[",["^10",["^[",[[]]]]],"^12","Graphics currently used for drawing. By default it is sketch graphics,\n  but if called inside [[with-graphics]] macro - graphics passed to the macro\n  is returned. This method should be used if you need to call some methods\n  that are not implemented by quil.\n\n  Example:\n  ```\n  (.beginDraw (current-graphics))\n  ```"],"^Q","2.0","^@","~$quil.core/current-graphics","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",19,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",26,"^18","^<X","^Y",32,"^1:",0,"^1H","^<X","^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Graphics currently used for drawing. By default it is sketch graphics,\n  but if called inside [[with-graphics]] macro - graphics passed to the macro\n  is returned. This method should be used if you need to call some methods\n  that are not implemented by quil.\n\n  Example:\n  ```\n  (.beginDraw (current-graphics))\n  ```"],"~$save-current-stroke",["^ ","^N",null,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",4127,"^V",8,"^Y",4127,"^T",27,"^7@",true,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Save current stroke color vector in the internal state. It can be accessed\n  using the [[current-stroke]] function."],"^7@",true,"^@","~$quil.core/save-current-stroke","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",27,"^14",["^[",[["^7K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^X",4127,"^18",["^>",[null,"^19"]],"^Y",4127,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Save current stroke color vector in the internal state. It can be accessed\n  using the [[current-stroke]] function."],"^?",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","abs()","^Q","1.0","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","abs()","^V",3,"^W",false,"^X",266,"^Y",266,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","Calculates the absolute value (magnitude) of a number. The\n  absolute value of a number is always positive. Dynamically casts to\n  an `int` or `float` appropriately for Clojure."],"^P","abs()","^Q","1.0","^@","~$quil.core/abs","^R","Calculation","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","abs()","^14",["^[",[["~$n"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",259,"^18","^19","^Y",266,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$n"]]]]],"^12","Calculates the absolute value (magnitude) of a number. The\n  absolute value of a number is always positive. Dynamically casts to\n  an `int` or `float` appropriately for Clojure."],"~$pop-style",["^ ","^M","Structure","^N",null,"^O",["^ ","^M","Structure","^P","pop()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","popStyle()","^V",3,"^W",true,"^X",3074,"^Y",3074,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Restores the prior settings on the 'style stack'. Used in\n  conjunction with [[push-style]]. Together they allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with [[push-style]], it builds on the current style information.\n  The [[push-style]] and [[pop-style]] functions can be nested to provide more\n  control"],"^P","pop()","^Q","1.0","^@","~$quil.core/pop-style","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","popStyle()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3067,"^18","^19","^Y",3074,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Restores the prior settings on the 'style stack'. Used in\n  conjunction with [[push-style]]. Together they allow you to change the\n  style settings and later return to what you had. When a new style is\n  started with [[push-style]], it builds on the current style information.\n  The [[push-style]] and [[pop-style]] functions can be nested to provide more\n  control"],"~$focused",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","focused","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","focused","^V",3,"^W",true,"^X",1835,"^Y",1835,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns `true` if the applet has focus, `false` otherwise."],"^P","focused","^Q","1.0","^@","~$quil.core/focused","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","focused","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1828,"^18","^19","^Y",1835,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns `true` if the applet has focus, `false` otherwise."],"~$torus",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","torus()","^Q","3.0.0","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^4T","~$tube-radius"],["^4T","^=6","^<R"],["^4T","^=6","^<R","^<S"]],"^Z",["^[",[["^4T","^=6"],["^4T","^=6","^<R"],["^4T","^=6","^<R","^<S"]]],"^16",["^[",[null,null,null]]],"^V",6,"^W",true,"^X",4576,"^Y",4576,"^Z",["^[",["^10",["^[",[["^4T","^=6"],["^4T","^=6","^<R"],["^4T","^=6","^<R","^<S"]]]]],"^12","Draw a torus with given `radius` and `tube-radius`.\n\n      Optional parameters:\n        * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n        * `detail-y` - number of segments, the more segments the smoother geometry default is 16"],"^P","torus()","^Q","3.0.0","^@","~$quil.core/torus","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^4T","^=6"],["^4T","^=6","^<R"],["^4T","^=6","^<R","^<S"]],"^Z",["^[",[["^4T","^=6"],["^4T","^=6","^<R"],["^4T","^=6","^<R","^<S"]]],"^16",["^[",[null,null,null]]],"^14",[["^4T","^=6"],["^4T","^=6","^<R"],["^4T","^=6","^<R","^<S"]],"^15",null,"^1E",4,"^16",["^[",[null,null,null]],"^V",4,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"]],"^X",4570,"^Y",4576,"^1:",4,"^1;",true,"^Z",["^[",[["^4T","^=6"],["^4T","^=6","^<R"],["^4T","^=6","^<R","^<S"]]],"^12","Draw a torus with given `radius` and `tube-radius`.\n\n      Optional parameters:\n        * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n        * `detail-y` - number of segments, the more segments the smoother geometry default is 16"],"~$print-first-n",["^ ","^M","Debugging","^N",null,"^O",["^ ","^M","Debugging","^P",null,"^Q","3.1.0","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",[["^[",["~$n","^4<"]]],"^Z",["^[",[["~$n","~$&","^4<"]]],"^16",["^[",[null]]],"^U",null,"^V",3,"^W",true,"^X",3409,"^Y",3409,"^Z",["^[",["^10",["^[",[["~$n","~$&","^4<"]]]]],"^12","Prints the provided arguments for the first `n` iterations."],"^P",null,"^Q","3.1.0","^@","~$quil.core/print-first-n","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",[["^[",["~$n","^4<"]]],"^Z",["^[",[["~$n","~$&","^4<"]]],"^16",["^[",[null]]],"^U",null,"^14",[["^[",["~$n","^4<"]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^19","^1I"]]]],"^X",3403,"^18","^19","^Y",3409,"^1:",1,"^1;",true,"^Z",["^[",[["~$n","~$&","^4<"]]],"^12","Prints the provided arguments for the first `n` iterations."],"~$image-mode",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","imageMode()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","imageMode()","^V",3,"^W",true,"^X",2169,"^Y",2169,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Modifies the location from which images draw. The default `mode` is `:corner`.\n   Available modes are:\n\n  * `:corner`  - specifies the location to be the upper left corner and\n                 uses the fourth and fifth parameters of [[image]] to set the\n                 image's width and height.\n  * `:corners` - uses the second and third parameters of [[image]] to set the\n                 location of one corner of the image and uses the fourth\n                  and fifth parameters to set the opposite corner.\n  * `:center`  - draw images centered at the given x and y position."],"^P","imageMode()","^Q","1.0","^@","~$quil.core/image-mode","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^U","imageMode()","^14",["^[",[["^1K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2162,"^18","^19","^Y",2169,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^1K"]]]]],"^12","Modifies the location from which images draw. The default `mode` is `:corner`.\n   Available modes are:\n\n  * `:corner`  - specifies the location to be the upper left corner and\n                 uses the fourth and fifth parameters of [[image]] to set the\n                 image's width and height.\n  * `:corners` - uses the second and third parameters of [[image]] to set the\n                 location of one corner of the image and uses the fourth\n                  and fifth parameters to set the opposite corner.\n  * `:center`  - draw images centered at the given x and y position."],"~$line",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","line()","^Q","1.0","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["~$p1","~$p2"],["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]],"^Z",["^[",[["^==","^=>"],["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]]],"^16",["^[",[null,null,null]]],"^U","line()","^V",3,"^W",true,"^X",2367,"^Y",2367,"^Z",["^[",["^10",["^[",[["^==","^=>"],["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]]]]],"^12","Draws a line (a direct path between two points) to the screen. The\n  version of line with four parameters draws the line in 2D. To color\n  a line, use the [[stroke]] function. A line cannot be filled, therefore\n  the fill method will not affect the color of a line. 2D lines are\n  drawn with a width of one pixel by default, but this can be changed\n  with the [[stroke-weight]] function. The version with six parameters\n  allows the line to be placed anywhere within XYZ space."],"^P","line()","^Q","1.0","^@","~$quil.core/line","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["^==","^=>"],["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]],"^Z",["^[",[["^==","^=>"],["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]]],"^16",["^[",[null,null,null]]],"^U","line()","^14",[["^==","^=>"],["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]],"^15",null,"^1E",6,"^16",["^[",[null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",6,"^17",false,"^1H","^19"]],"^X",2360,"^Y",2367,"^1:",6,"^1;",true,"^Z",["^[",[["^==","^=>"],["^46","^47","^48","^49"],["^46","^47","^5=","^48","^49","^5@"]]],"^12","Draws a line (a direct path between two points) to the screen. The\n  version of line with four parameters draws the line in 2D. To color\n  a line, use the [[stroke]] function. A line cannot be filled, therefore\n  the fill method will not affect the color of a line. 2D lines are\n  drawn with a width of one pixel by default, but this can be changed\n  with the [[stroke-weight]] function. The version with six parameters\n  allows the line to be placed anywhere within XYZ space."],"~$do-record",["^ ","^M","Output","^N",null,"^O",["^ ","^M","Output","^Q","2.5","^R","Files","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^25","^26"]]]],"^Z",["^[",[["^25","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^V",3,"^W",true,"^X",1533,"^27",true,"^Y",1533,"^Z",["^[",["^10",["^[",[["^25","~$&","^26"]]]]],"^12","Macro for drawing on graphics which saves result in the file at the end.\n  Similar to [[with-graphics]] macro. [[do-record]] assumed to be used\n  with `:pdf` graphics.\n\n  Example:\n  ```\n  (q/do-record (q/create-graphics 200 200 :pdf \"output.pdf\")\n    (q/fill 250 0 0)\n    (q/ellipse 100 100 150 150))\n  ```"],"^Q","2.5","^@","~$quil.core/do-record","^R","Files","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^25","^26"]]]],"^Z",["^[",[["^25","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^14",["^[",[["^[",["^25","^26"]]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^29","^2:"]]]],"^X",1527,"^27",true,"^18","^19","^Y",1533,"^1:",1,"^1;",false,"^Z",["^[",[["^25","~$&","^26"]]],"^12","Macro for drawing on graphics which saves result in the file at the end.\n  Similar to [[with-graphics]] macro. [[do-record]] assumed to be used\n  with `:pdf` graphics.\n\n  Example:\n  ```\n  (q/do-record (q/create-graphics 200 200 :pdf \"output.pdf\")\n    (q/fill 250 0 0)\n    (q/ellipse 100 100 150 150))\n  ```"],"~$red",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","red()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","red()","^V",3,"^W",true,"^X",3437,"^Y",3437,"^Z",["^[",["^10",["^[",[["~$c"]]]]],"^12","Extracts the red value from a color, scaled to match the current\n  [[color-mode]]."],"^P","red()","^Q","1.0","^@","~$quil.core/red","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","red()","^14",["^[",[["~$c"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3430,"^18","^19","^Y",3437,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$c"]]]]],"^12","Extracts the red value from a color, scaled to match the current\n  [[color-mode]]."],"~$current-fill",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","PGraphics.fillColor","^V",3,"^3[","http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#fillColor","^W",true,"^X",1259,"^Y",1259,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Return the current fill color."],"^@","~$quil.core/current-fill","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","PGraphics.fillColor","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^3[","http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#fillColor","^17",false,"^W",true,"^X",1253,"^18","^19","^Y",1259,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Return the current fill color."],"~$color-modes",["^ ","^@","~$quil.core/color-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",57,"^T",24,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",57,"^V",13,"^Y",57,"^T",24],"^1H","^2D"],"~$blue",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","blue()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","blue()","^V",3,"^W",true,"^X",883,"^Y",883,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Extracts the blue value from a color, scaled to match current color-mode.\n  Returns a `float`."],"^P","blue()","^Q","1.0","^@","~$quil.core/blue","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","blue()","^14",["^[",[["^7K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",876,"^18","^19","^Y",883,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Extracts the blue value from a color, scaled to match current color-mode.\n  Returns a `float`."],"~$with-rotation",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^Q","1.0","^R","Utility Macros","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["~$rotation","^26"]]]],"^Z",["^[",[["^=K","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^V",3,"^W",true,"^X",4823,"^27",true,"^Y",4823,"^Z",["^[",["^10",["^[",[["^=K","~$&","^26"]]]]],"^12","Performs body with rotation, restores current transformation on exit.\n  Accepts a vector `[angle]` or `[angle x y z]`.\n\n  When 4 arguments provides it produces a rotation of angle degrees\n  around the vector x y z. Check examples to better understand.\n  This rotation follows the right-hand rule, so if the vector x y z points\n  toward the user, the rotation will be counterclockwise.\n\n  Example:\n  ```\n    (with-rotation [angle]\n      (vertex 1 2))\n  ```"],"^Q","1.0","^@","~$quil.core/with-rotation","^R","Utility Macros","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",true,"^1E",1,"^1:",1,"^14",["^[",[["^[",["^=K","^26"]]]],"^Z",["^[",[["^=K","~$&","^26"]]],"^16",["^[",[null]]],"^U",null,"^14",["^[",[["^[",["^=K","^26"]]]],"^15",null,"^1E",1,"^16",["^[",[null]],"^V",1,"^17",true,"^W",true,"^1G",[["^ ","^1E",1,"^17",true,"^1H",["^>",["^29","^2:"]]]],"^X",4817,"^27",true,"^18","^19","^Y",4823,"^1:",1,"^1;",false,"^Z",["^[",[["^=K","~$&","^26"]]],"^12","Performs body with rotation, restores current transformation on exit.\n  Accepts a vector `[angle]` or `[angle x y z]`.\n\n  When 4 arguments provides it produces a rotation of angle degrees\n  around the vector x y z. Check examples to better understand.\n  This rotation follows the right-hand rule, so if the vector x y z points\n  toward the user, the rotation will be counterclockwise.\n\n  Example:\n  ```\n    (with-rotation [angle]\n      (vertex 1 2))\n  ```"],"~$ambient-light",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","ambientLight()","^Q","1.0","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["^=B","^9<","^=H"],["^=B","^9<","^=H","~$x","~$y","~$z"]],"^Z",["^[",[["^=B","^9<","^=H"],["^=B","^9<","^=H","~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","ambientLight()","^V",3,"^W",true,"^X",334,"^Y",334,"^Z",["^[",["^10",["^[",[["^=B","^9<","^=H"],["^=B","^9<","^=H","~$x","~$y","~$z"]]]]],"^12","Adds an ambient light. Ambient light doesn't come from a specific direction,\n  the rays of light have bounced around so much that objects are\n  evenly lit from all sides. Ambient lights are almost always used in\n  combination with other types of lights. Lights need to be included\n  in the draw to remain persistent in a looping program. Placing them\n  in the setup of a looping program will cause them to only have an\n  effect the first time through the loop. The effect of the\n  parameters is determined by the current [[color-mode]]."],"^P","ambientLight()","^Q","1.0","^@","~$quil.core/ambient-light","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["^=B","^9<","^=H"],["^=B","^9<","^=H","~$x","~$y","~$z"]],"^Z",["^[",[["^=B","^9<","^=H"],["^=B","^9<","^=H","~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","ambientLight()","^14",[["^=B","^9<","^=H"],["^=B","^9<","^=H","~$x","~$y","~$z"]],"^15",null,"^1E",6,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",6,"^17",false,"^1H","^19"]],"^X",327,"^Y",334,"^1:",6,"^1;",true,"^Z",["^[",[["^=B","^9<","^=H"],["^=B","^9<","^=H","~$x","~$y","~$z"]]],"^12","Adds an ambient light. Ambient light doesn't come from a specific direction,\n  the rays of light have bounced around so much that objects are\n  evenly lit from all sides. Ambient lights are almost always used in\n  combination with other types of lights. Lights need to be included\n  in the draw to remain persistent in a looping program. Placing them\n  in the setup of a looping program will cause them to only have an\n  effect the first time through the loop. The effect of the\n  parameters is determined by the current [[color-mode]]."],"~$bezier-point",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","bezierPoint()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","bezierPoint()","^V",3,"^W",true,"^X",661,"^Y",661,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^12","Evaluates the Bezier at point `t` for points `a`, `b`, `c`, `d`. The\n  parameter `t` varies between 0 and 1, `a` and `d` are points on the curve,\n  and `b` and `c` are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a bezier curve at `t`."],"^P","bezierPoint()","^Q","1.0","^@","~$quil.core/bezier-point","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","bezierPoint()","^14",["^[",[["~$a","~$b","~$c","~$d","~$t"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",654,"^18","^19","^Y",661,"^1:",5,"^1;",true,"^Z",["^[",["^10",["^[",[["~$a","~$b","~$c","~$d","~$t"]]]]],"^12","Evaluates the Bezier at point `t` for points `a`, `b`, `c`, `d`. The\n  parameter `t` varies between 0 and 1, `a` and `d` are points on the curve,\n  and `b` and `c` are the control points. This can be done once with the x\n  coordinates and a second time with the y coordinates to get the\n  location of a bezier curve at `t`."],"~$stroke-cap-modes",["^ ","^@","~$quil.core/stroke-cap-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",72,"^T",18,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",72,"^V",2,"^Y",72,"^T",18],"^1H","^2D"],"~$quad",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","quad()","^Q","1.0","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","quad()","^V",3,"^W",true,"^X",3193,"^Y",3193,"^Z",["^[",["^10",["^[",[["^46","^47","^48","^49","^6F","^6G","~$x4","~$y4"]]]]],"^12","A quad is a quadrilateral, a four sided polygon. It is similar to a\n  rectangle, but the angles between its edges are not constrained to\n  be ninety degrees. The first pair of parameters `(x1,y1)` sets the\n  first vertex and the subsequent pairs should proceed clockwise or\n  counter-clockwise around the defined shape."],"^P","quad()","^Q","1.0","^@","~$quil.core/quad","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",7,"^U","quad()","^14",["^[",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3186,"^18","^19","^Y",3193,"^1:",8,"^1;",true,"^Z",["^[",["^10",["^[",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"]]]]],"^12","A quad is a quadrilateral, a four sided polygon. It is similar to a\n  rectangle, but the angles between its edges are not constrained to\n  be ninety degrees. The first pair of parameters `(x1,y1)` sets the\n  first vertex and the subsequent pairs should proceed clockwise or\n  counter-clockwise around the defined shape."],"~$text-style",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","textStyle()","^Q","2.8.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^V",6,"^W",true,"^X",4466,"^Y",4466,"^Z",["^[",["^10",["^[",[["~$style"]]]]],"^12","Sets/gets the style of the text for system fonts to `:normal`, `:italic`,\n     or `:bold` or `:bolditalic`.\n\n     Note: this may be overridden by CSS styling. For non-system\n     fonts (opentype, truetype, etc.) please load styled fonts instead."],"^P","textStyle()","^Q","2.8.0","^@","~$quil.core/text-style","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",16,"^14",["^[",[["^=X"]]],"^15",null,"^16",["^[",[null,null]],"^V",4,"^17",false,"^W",true,"^X",4460,"^18","^19","^Y",4466,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^=X"]]]]],"^12","Sets/gets the style of the text for system fonts to `:normal`, `:italic`,\n     or `:bold` or `:bolditalic`.\n\n     Note: this may be overridden by CSS styling. For non-system\n     fonts (opentype, truetype, etc.) please load styled fonts instead."],"~$lights",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^Q","1.0","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","lights()","^V",3,"^W",true,"^X",2326,"^Y",2326,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Sets the default ambient light, directional light, falloff, and\n  specular values. The defaults are:\n\n  `(ambient-light 128 128 128)`\n  `(directional-light 128 128 128 0 0 -1)`\n  `(light-falloff 1 0 0)`\n  `(light-specular 0 0 0)`.\n\n  Lights need to be included in the draw to remain persistent in a\n  looping program. Placing them in the setup of a looping program\n  will cause them to only have an effect the first time through the\n  loop."],"^Q","1.0","^@","~$quil.core/lights","^R","Lights","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^U","lights()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2320,"^18","^19","^Y",2326,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Sets the default ambient light, directional light, falloff, and\n  specular values. The defaults are:\n\n  `(ambient-light 128 128 128)`\n  `(directional-light 128 128 128 0 0 -1)`\n  `(light-falloff 1 0 0)`\n  `(light-specular 0 0 0)`.\n\n  Lights need to be included in the draw to remain persistent in a\n  looping program. Placing them in the setup of a looping program\n  will cause them to only have an effect the first time through the\n  loop."],"~$*graphics*",["^ ","^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",22,"^V",3,"^Y",22,"^T",13,"~:dynamic",true],"^@","~$quil.core/*graphics*","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",13,"^V",1,"^>1",true,"^X",21,"^Y",22,"^1H","^19"],"~$KEY-CODES",["^ ","^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",132,"^V",6,"^Y",132,"^T",15,"^7@",true],"^7@",true,"^@","~$quil.core/KEY-CODES","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^V",4,"^X",131,"^Y",132,"^1H","^2D"],"~$cylinder",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","cylinder()","^Q","3.0.0","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["^4T","^1T"],["^4T","^1T","^<R","^<S","~$bottom-cap","~$top-cap"]],"^Z",["^[",[["^4T","^1T"],["^4T","^1T","^<R","^<S","^>6","^>7"]]],"^16",["^[",[null,null]]],"^V",6,"^W",true,"^X",1430,"^Y",1430,"^Z",["^[",["^10",["^[",[["^4T","^1T"],["^4T","^1T","^<R","^<S","^>6","^>7"]]]]],"^12","Draw a cylinder with given `radius` and `height`."],"^P","cylinder()","^Q","3.0.0","^@","~$quil.core/cylinder","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^1D",["^ ","^17",false,"^1E",6,"^1:",6,"^14",[["^4T","^1T"],["^4T","^1T","^<R","^<S","^>6","^>7"]],"^Z",["^[",[["^4T","^1T"],["^4T","^1T","^<R","^<S","^>6","^>7"]]],"^16",["^[",[null,null]]],"^14",[["^4T","^1T"],["^4T","^1T","^<R","^<S","^>6","^>7"]],"^15",null,"^1E",6,"^16",["^[",[null,null]],"^V",4,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",6,"^17",false,"^1H","^19"]],"^X",1424,"^Y",1430,"^1:",6,"^1;",true,"^Z",["^[",[["^4T","^1T"],["^4T","^1T","^<R","^<S","^>6","^>7"]]],"^12","Draw a cylinder with given `radius` and `height`."],"~$looping?",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^Q","2.7.2","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U",null,"^V",3,"^W",true,"^X",1884,"^Y",1884,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns whether the sketch is looping."],"^Q","2.7.2","^@","~$quil.core/looping?","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U",null,"^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1878,"^18","^19","^Y",1884,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns whether the sketch is looping."],"~$curve-detail",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","curveDetail()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","curveDetail()","^V",3,"^W",true,"^X",1347,"^Y",1347,"^Z",["^[",["^10",["^[",[["^3?"]]]]],"^12","Sets the resolution at which curves display. The default value is\n  20. This function is only useful when using the `:p3d` or `:opengl`\n  renderer as the default (`:java2d`) renderer does not use this\n  information."],"^P","curveDetail()","^Q","1.0","^@","~$quil.core/curve-detail","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","curveDetail()","^14",["^[",[["^3?"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1340,"^18","^19","^Y",1347,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^3?"]]]]],"^12","Sets the resolution at which curves display. The default value is\n  20. This function is only useful when using the `:p3d` or `:opengl`\n  renderer as the default (`:java2d`) renderer does not use this\n  information."],"~$current-frame-rate",["^ ","^M","Environment","^N",null,"^O",["^ ","^M","Environment","^P","frameRate()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",21,"^U","frameRate","^V",3,"^W",true,"^X",1873,"^Y",1873,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current framerate"],"^P","frameRate()","^Q","1.0","^@","~$quil.core/current-frame-rate","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",21,"^U","frameRate","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1866,"^18","^19","^Y",1873,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns the current framerate"],"~$end-contour",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","endContour()","^Q","2.0","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","endContour()","^V",3,"^W",true,"^X",1631,"^Y",1631,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Use the [[begin-contour]] and [[end-contour]] function to create\n  negative shapes within shapes. These functions can only be within a\n  [[begin-shape]]/[[end-shape]] pair and they only work with the\n  `:p2d` and `:p3d` renderers."],"^P","endContour()","^Q","2.0","^@","~$quil.core/end-contour","^R","Vertex","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","endContour()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1624,"^18","^19","^Y",1631,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Use the [[begin-contour]] and [[end-contour]] function to create\n  negative shapes within shapes. These functions can only be within a\n  [[begin-shape]]/[[end-shape]] pair and they only work with the\n  `:p2d` and `:p3d` renderers."],"~$sin",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","sin()","^Q","1.0","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","sin()","^V",3,"^W",false,"^X",3967,"^Y",3967,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Calculates the sine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  6.28). A `float` within the range -1 to 1 is returned."],"^P","sin()","^Q","1.0","^@","~$quil.core/sin","^R","Trigonometry","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",6,"^U","sin()","^14",["^[",[["^11"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",false,"^X",3960,"^18","^19","^Y",3967,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Calculates the sine of an angle. This function expects the values\n  of the angle parameter to be provided in radians (values from 0 to\n  6.28). A `float` within the range -1 to 1 is returned."],"~$cone",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","cone()","^Q","3.0.0","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["^4T","^1T"],["^4T","^1T","^<R"],["^4T","^1T","^<R","^<S"],["^4T","^1T","^<R","^<S","~$cap"]],"^Z",["^[",[["^4T","^1T"],["^4T","^1T","^<R"],["^4T","^1T","^<R","^<S"],["^4T","^1T","^<R","^<S","^>D"]]],"^16",["^[",[null,null,null,null]]],"^V",6,"^W",true,"^X",1056,"^Y",1056,"^Z",["^[",["^10",["^[",[["^4T","^1T"],["^4T","^1T","^<R"],["^4T","^1T","^<R","^<S"],["^4T","^1T","^<R","^<S","^>D"]]]]],"^12","Draw a cone with given `radius` and `height`.\n\n      Optional parameters:\n        * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n        * `detail-y` - number of segments, the more segments the smoother geometry default is 24\n        * `cap`      - whether to draw the base of the cone"],"^P","cone()","^Q","3.0.0","^@","~$quil.core/cone","^R","3D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["^4T","^1T"],["^4T","^1T","^<R"],["^4T","^1T","^<R","^<S"],["^4T","^1T","^<R","^<S","^>D"]],"^Z",["^[",[["^4T","^1T"],["^4T","^1T","^<R"],["^4T","^1T","^<R","^<S"],["^4T","^1T","^<R","^<S","^>D"]]],"^16",["^[",[null,null,null,null]]],"^14",[["^4T","^1T"],["^4T","^1T","^<R"],["^4T","^1T","^<R","^<S"],["^4T","^1T","^<R","^<S","^>D"]],"^15",null,"^1E",5,"^16",["^[",[null,null,null,null]],"^V",4,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",5,"^17",false,"^1H","^19"]],"^X",1050,"^Y",1056,"^1:",5,"^1;",true,"^Z",["^[",[["^4T","^1T"],["^4T","^1T","^<R"],["^4T","^1T","^<R","^<S"],["^4T","^1T","^<R","^<S","^>D"]]],"^12","Draw a cone with given `radius` and `height`.\n\n      Optional parameters:\n        * `detail-x` - number of segments, the more segments the smoother geometry default is 24\n        * `detail-y` - number of segments, the more segments the smoother geometry default is 24\n        * `cap`      - whether to draw the base of the cone"],"~$lightness",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","lightness()","^Q","3.0.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^V",6,"^W",true,"^X",2254,"^Y",2254,"^Z",["^[",["^10",["^[",[["~$c"]]]]],"^12","Extracts the HSL lightness value from a color or pixel array."],"^P","lightness()","^Q","3.0.0","^@","~$quil.core/lightness","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^14",["^[",[["~$c"]]],"^15",null,"^16",["^[",[null,null]],"^V",4,"^17",false,"^W",true,"^X",2248,"^18","^19","^Y",2254,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["~$c"]]]]],"^12","Extracts the HSL lightness value from a color or pixel array."],"~$current-stroke",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^U","PGraphics.strokeColor","^V",3,"^3[","http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#strokeColor","^W",true,"^X",1270,"^Y",1270,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Return the current stroke color."],"^@","~$quil.core/current-stroke","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^U","PGraphics.strokeColor","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^3[","http://processing.github.io/processing-javadocs/core/processing/core/PGraphics.html#strokeColor","^17",false,"^W",true,"^X",1264,"^18","^19","^Y",1270,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Return the current stroke color."],"~$curve",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","curve()","^Q","1.0","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",12,"^1:",12,"^14",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"],["^46","^47","^5=","^48","^49","^5@","^6F","^6G","^6I","^=T","^=U","~$z4"]],"^Z",["^[",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"],["^46","^47","^5=","^48","^49","^5@","^6F","^6G","^6I","^=T","^=U","^>K"]]],"^16",["^[",[null,null]]],"^U","curve()","^V",3,"^W",true,"^X",1318,"^Y",1318,"^Z",["^[",["^10",["^[",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"],["^46","^47","^5=","^48","^49","^5@","^6F","^6G","^6I","^=T","^=U","^>K"]]]]],"^12","Draws a curved line on the screen. The first and second parameters\n  specify the beginning control point and the last two parameters\n  specify the ending control point. The middle parameters specify the\n  start and stop of the curve. Longer curves can be created by putting\n  a series of curve functions together or using [[curve-vertex]]. An additional\n  function called [[curve-tightness]] provides control for the visual quality\n  of the curve. The [[curve]] function is an implementation of Catmull-Rom\n  splines."],"^P","curve()","^Q","1.0","^@","~$quil.core/curve","^R","Curves","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",12,"^1:",12,"^14",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"],["^46","^47","^5=","^48","^49","^5@","^6F","^6G","^6I","^=T","^=U","^>K"]],"^Z",["^[",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"],["^46","^47","^5=","^48","^49","^5@","^6F","^6G","^6I","^=T","^=U","^>K"]]],"^16",["^[",[null,null]]],"^U","curve()","^14",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"],["^46","^47","^5=","^48","^49","^5@","^6F","^6G","^6I","^=T","^=U","^>K"]],"^15",null,"^1E",12,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",8,"^17",false,"^1H","^19"],["^ ","^1E",12,"^17",false,"^1H","^19"]],"^X",1311,"^Y",1318,"^1:",12,"^1;",true,"^Z",["^[",[["^46","^47","^48","^49","^6F","^6G","^=T","^=U"],["^46","^47","^5=","^48","^49","^5@","^6F","^6G","^6I","^=T","^=U","^>K"]]],"^12","Draws a curved line on the screen. The first and second parameters\n  specify the beginning control point and the last two parameters\n  specify the ending control point. The middle parameters specify the\n  start and stop of the curve. Longer curves can be created by putting\n  a series of curve functions together or using [[curve-vertex]]. An additional\n  function called [[curve-tightness]] provides control for the visual quality\n  of the curve. The [[curve]] function is an implementation of Catmull-Rom\n  splines."],"~$shape",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","model()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","shape()","^V",3,"^W",true,"^X",3851,"^Y",3851,"^Z",["^[",["^10",["^[",[["~$sh"]]]]],"^12","Displays shapes to the screen. The shapes must have been loaded\n  with [[load-shape]]. Processing currently works with SVG shapes\n  only. The `sh` parameter specifies the shape to display and the `x` and\n  `y` parameters define the location of the shape from its upper-left\n  corner. The shape is displayed at its original size unless the `width`\n  and `height` parameters specify a different size. The [[shape-mode]]\n  function changes the way the parameters work. A call to\n  `(shape-mode :corners)` for example, will change the width and height\n  parameters to define the x and y values of the opposite corner of\n  the shape.\n\n  Note complex shapes may draw awkwardly with the renderers `:p2d`, `:p3d`, and\n  `:opengl`. Those renderers do not yet support shapes that have holes\n  or complicated breaks."],"^P","model()","^Q","1.0","^@","~$quil.core/shape","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","shape()","^14",["^[",[["^>N"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3844,"^18","^19","^Y",3851,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^>N"]]]]],"^12","Displays shapes to the screen. The shapes must have been loaded\n  with [[load-shape]]. Processing currently works with SVG shapes\n  only. The `sh` parameter specifies the shape to display and the `x` and\n  `y` parameters define the location of the shape from its upper-left\n  corner. The shape is displayed at its original size unless the `width`\n  and `height` parameters specify a different size. The [[shape-mode]]\n  function changes the way the parameters work. A call to\n  `(shape-mode :corners)` for example, will change the width and height\n  parameters to define the x and y values of the opposite corner of\n  the shape.\n\n  Note complex shapes may draw awkwardly with the renderers `:p2d`, `:p3d`, and\n  `:opengl`. Those renderers do not yet support shapes that have holes\n  or complicated breaks."],"~$image-formats",["^ ","^@","~$quil.core/image-formats","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",58,"^T",15,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",58,"^V",2,"^Y",58,"^T",15],"^1H","^2D"],"~$text-descent",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","textDescent()","^Q","1.0","^R","Metrics","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","textDescent()","^V",3,"^W",true,"^X",4367,"^Y",4367,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns descent of the current font at its current size. This\n  information is useful for determining the height of the font below\n  the baseline. For example, adding the [[text-ascent]] and [[text-descent]]\n  values will give you the total height of the line."],"^P","textDescent()","^Q","1.0","^@","~$quil.core/text-descent","^R","Metrics","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","textDescent()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4360,"^18","^19","^Y",4367,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Returns descent of the current font at its current size. This\n  information is useful for determining the height of the font below\n  the baseline. For example, adding the [[text-ascent]] and [[text-descent]]\n  values will give you the total height of the line."],"~$ellipse",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","ellipse()","^Q","1.0","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","ellipse()","^V",3,"^W",true,"^X",1557,"^Y",1557,"^Z",["^[",["^10",["^[",[["~$x","~$y","^1S","^1T"]]]]],"^12","Draws an ellipse (oval) in the display window. An ellipse with an\n  equal `width` and `height` is a circle. The origin may be changed with\n  the [[ellipse-mode]] function."],"^P","ellipse()","^Q","1.0","^@","~$quil.core/ellipse","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","ellipse()","^14",["^[",[["~$x","~$y","^1S","^1T"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",1550,"^18","^19","^Y",1557,"^1:",4,"^1;",true,"^Z",["^[",["^10",["^[",[["~$x","~$y","^1S","^1T"]]]]],"^12","Draws an ellipse (oval) in the display window. An ellipse with an\n  equal `width` and `height` is a circle. The origin may be changed with\n  the [[ellipse-mode]] function."],"~$text-leading",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","textLeading()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","textLeading()","^V",3,"^W",true,"^X",4409,"^Y",4409,"^Z",["^[",["^10",["^[",[["~$leading"]]]]],"^12","Sets the spacing between lines of text in units of pixels. This\n  setting will be used in all subsequent calls to the [[text]] function."],"^P","textLeading()","^Q","1.0","^@","~$quil.core/text-leading","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","textLeading()","^14",["^[",[["^>W"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",4402,"^18","^19","^Y",4409,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^>W"]]]]],"^12","Sets the spacing between lines of text in units of pixels. This\n  setting will be used in all subsequent calls to the [[text]] function."],"~$image-filter",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","filter()","^Q","2.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["^2I","^1K"],["^2I","^1K","^1L"]],"^Z",["^[",[["^2I","^1K"],["^2I","^1K","^1L"]]],"^16",["^[",[null,null]]],"^U","PImage.filter()","^V",3,"^W",true,"^X",2128,"^Y",2128,"^Z",["^[",["^10",["^[",[["^2I","^1K"],["^2I","^1K","^1L"]]]]],"^12","Originally named filter in Processing Language.\n  Filters given image with the specified `mode` and `level`.\n  `level` defines the quality of the filter and `mode` may be one of\n  the following keywords:\n\n  * `:threshold` - converts the image to black and white pixels depending\n                   if they are above or below the threshold defined by\n                   the level parameter. The level must be between\n                   0.0 (black) and 1.0 (white). If no level is specified,\n                   0.5 is used.\n  * `:gray`      - converts any colors in the image to grayscale\n                   equivalents. Doesn't work with level.\n  * `:invert`    - sets each pixel to its inverse value. Doesn't work with\n                   level.\n  * `:posterize` - limits each channel of the image to the number of\n                   colors specified as the level parameter. The parameter can\n                   be set to values between 2 and 255, but results are most\n                   noticeable in the lower ranges.\n  * `:blur`      - executes a Gaussian blur with the `level` parameter\n                   specifying the extent of the blurring. If no level\n                   parameter is used, the blur is equivalent to Gaussian\n                   blur of radius 1.\n  * `:opaque`    - sets the alpha channel to entirely opaque. Doesn't work\n                   with level.\n  * `:erode`     - reduces the light areas. Doesn't work with `level`.\n  * `:dilate`    - increases the light areas. Doesn't work with `level`."],"^P","filter()","^Q","2.0","^@","~$quil.core/image-filter","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["^2I","^1K"],["^2I","^1K","^1L"]],"^Z",["^[",[["^2I","^1K"],["^2I","^1K","^1L"]]],"^16",["^[",[null,null]]],"^U","PImage.filter()","^14",[["^2I","^1K"],["^2I","^1K","^1L"]],"^15",null,"^1E",3,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",2121,"^Y",2128,"^1:",3,"^1;",true,"^Z",["^[",[["^2I","^1K"],["^2I","^1K","^1L"]]],"^12","Originally named filter in Processing Language.\n  Filters given image with the specified `mode` and `level`.\n  `level` defines the quality of the filter and `mode` may be one of\n  the following keywords:\n\n  * `:threshold` - converts the image to black and white pixels depending\n                   if they are above or below the threshold defined by\n                   the level parameter. The level must be between\n                   0.0 (black) and 1.0 (white). If no level is specified,\n                   0.5 is used.\n  * `:gray`      - converts any colors in the image to grayscale\n                   equivalents. Doesn't work with level.\n  * `:invert`    - sets each pixel to its inverse value. Doesn't work with\n                   level.\n  * `:posterize` - limits each channel of the image to the number of\n                   colors specified as the level parameter. The parameter can\n                   be set to values between 2 and 255, but results are most\n                   noticeable in the lower ranges.\n  * `:blur`      - executes a Gaussian blur with the `level` parameter\n                   specifying the extent of the blurring. If no level\n                   parameter is used, the blur is equivalent to Gaussian\n                   blur of radius 1.\n  * `:opaque`    - sets the alpha channel to entirely opaque. Doesn't work\n                   with level.\n  * `:erode`     - reduces the light areas. Doesn't work with `level`.\n  * `:dilate`    - increases the light areas. Doesn't work with `level`."],"~$random",["^ ","^M","Math","^N",null,"^O",["^ ","^M","Math","^P","random()","^Q","1.0","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^3Q"],["~$min","^3Q"]],"^Z",["^[",[["^3Q"],["^?0","^3Q"]]],"^16",["^[",[null,null]]],"^U","random()","^V",3,"^W",true,"^X",3252,"^Y",3252,"^Z",["^[",["^10",["^[",[["^3Q"],["^?0","^3Q"]]]]],"^12","Generates random numbers. Each time the random function is called,\n  it returns an unexpected value within the specified range. If one\n  parameter is passed to the function it will return a `float` between\n  zero and the value of the high parameter. The function call `(random\n  5)` returns values between 0 and 5 (starting at zero, up to but not\n  including 5). If two parameters are passed, it will return a `float`\n  with a value between the parameters. The function call\n  `(random -5 10.2)` returns values starting at -5 up to (but not\n  including) 10.2."],"^P","random()","^Q","1.0","^@","~$quil.core/random","^R","Random","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",2,"^1:",2,"^14",[["^3Q"],["^?0","^3Q"]],"^Z",["^[",[["^3Q"],["^?0","^3Q"]]],"^16",["^[",[null,null]]],"^U","random()","^14",[["^3Q"],["^?0","^3Q"]],"^15",null,"^1E",2,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"]],"^X",3245,"^Y",3252,"^1:",2,"^1;",true,"^Z",["^[",[["^3Q"],["^?0","^3Q"]]],"^12","Generates random numbers. Each time the random function is called,\n  it returns an unexpected value within the specified range. If one\n  parameter is passed to the function it will return a `float` between\n  zero and the value of the high parameter. The function call `(random\n  5)` returns values between 0 and 5 (starting at zero, up to but not\n  including 5). If two parameters are passed, it will return a `float`\n  with a value between the parameters. The function call\n  `(random -5 10.2)` returns values starting at -5 up to (but not\n  including) 10.2."],"~$redraw",["^ ","^M","Structure","^N",null,"^O",["^ ","^M","Structure","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["~$n"]],"^Z",["^[",[[],["~$n"]]],"^16",["^[",[null,null]]],"^U","redraw()","^V",3,"^W",true,"^X",3449,"^Y",3449,"^Z",["^[",["^10",["^[",[[],["~$n"]]]]],"^12","Executes the code within the `draw` function one time (or n times in cljs).\n  This function allows the program to update the display window only\n  when necessary, for example when an event registered by [[mouse-pressed?]] or\n  [[key-pressed?]] occurs.\n\n  In structuring a program, it only makes sense to call [[redraw]]\n  within events such as [[mouse-pressed?]]. This is because [[redraw]] does\n  not run draw immediately (it only sets a flag that indicates an\n  update is needed).\n\n  Calling [[redraw]] within `draw` has no effect because `draw` is\n  continuously called anyway."],"^Q","1.0","^@","~$quil.core/redraw","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",1,"^1:",1,"^14",[[],["~$n"]],"^Z",["^[",[[],["~$n"]]],"^16",["^[",[null,null]]],"^U","redraw()","^14",[[],["~$n"]],"^15",null,"^1E",1,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^68"]],"^X",3443,"^Y",3449,"^1:",1,"^1;",true,"^Z",["^[",[[],["~$n"]]],"^12","Executes the code within the `draw` function one time (or n times in cljs).\n  This function allows the program to update the display window only\n  when necessary, for example when an event registered by [[mouse-pressed?]] or\n  [[key-pressed?]] occurs.\n\n  In structuring a program, it only makes sense to call [[redraw]]\n  within events such as [[mouse-pressed?]]. This is because [[redraw]] does\n  not run draw immediately (it only sets a flag that indicates an\n  update is needed).\n\n  Calling [[redraw]] within `draw` has no effect because `draw` is\n  continuously called anyway."],"~$RAD-TO-DEG",["^ ","^@","~$quil.core/RAD-TO-DEG","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",92,"^V",1,"^Y",92,"^T",16,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",92,"^V",6,"^Y",92,"^T",16],"^1H","^4B"],"~$get-pixel",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","Image.get()","^Q","1.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[[],["^2I"],["~$x","~$y"],["^2I","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2I","~$x","~$y","~$w","~$h"]],"^Z",["^[",[[],["^2I"],["~$x","~$y"],["^2I","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2I","~$x","~$y","~$w","~$h"]]],"^16",["^[",[null,null,null,null,null,null]]],"^U","get()","^V",3,"^W",true,"^X",1931,"^Y",1931,"^Z",["^[",["^10",["^[",[[],["^2I"],["~$x","~$y"],["^2I","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2I","~$x","~$y","~$w","~$h"]]]]],"^12","Reads the color of any pixel or grabs a section of an image. If no\n  parameters are specified, a copy of entire image is returned. Get the\n  value of one pixel by specifying an `x`,`y` coordinate. Get a section of\n  the image by specifying an additional `width` and `height` parameter.\n  If the pixel requested is outside of the image window, black is returned.\n  The numbers returned are scaled according to the current color ranges,\n  but only RGB values are returned by this function. For example, even though\n  you may have drawn a shape with `(color-mode :hsb)`, the numbers returned\n  will be in RGB.\n\n  Getting the color of a single pixel with `(get x y)` is easy, but not\n  as fast as grabbing the data directly using the [[pixels]] function.\n\n  If no `img` specified - [[current-graphics]] is used."],"^P","Image.get()","^Q","1.0","^@","~$quil.core/get-pixel","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[[],["^2I"],["~$x","~$y"],["^2I","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2I","~$x","~$y","~$w","~$h"]],"^Z",["^[",[[],["^2I"],["~$x","~$y"],["^2I","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2I","~$x","~$y","~$w","~$h"]]],"^16",["^[",[null,null,null,null,null,null]]],"^U","get()","^14",[[],["^2I"],["~$x","~$y"],["^2I","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2I","~$x","~$y","~$w","~$h"]],"^15",null,"^1E",5,"^16",["^[",[null,null,null,null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"],["^ ","^1E",5,"^17",false,"^1H","^19"]],"^X",1924,"^Y",1931,"^1:",5,"^1;",true,"^Z",["^[",[[],["^2I"],["~$x","~$y"],["^2I","~$x","~$y"],["~$x","~$y","~$w","~$h"],["^2I","~$x","~$y","~$w","~$h"]]],"^12","Reads the color of any pixel or grabs a section of an image. If no\n  parameters are specified, a copy of entire image is returned. Get the\n  value of one pixel by specifying an `x`,`y` coordinate. Get a section of\n  the image by specifying an additional `width` and `height` parameter.\n  If the pixel requested is outside of the image window, black is returned.\n  The numbers returned are scaled according to the current color ranges,\n  but only RGB values are returned by this function. For example, even though\n  you may have drawn a shape with `(color-mode :hsb)`, the numbers returned\n  will be in RGB.\n\n  Getting the color of a single pixel with `(get x y)` is easy, but not\n  as fast as grabbing the data directly using the [[pixels]] function.\n\n  If no `img` specified - [[current-graphics]] is used."],"~$rotate",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","rotate()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^11"],["^11","~$vx","~$vy","~$vz"]],"^Z",["^[",[["^11"],["^11","^?9","^?:","^?;"]]],"^16",["^[",[null,null]]],"^U","rotate()","^V",3,"^W",true,"^X",3555,"^Y",3555,"^Z",["^[",["^10",["^[",[["^11"],["^11","^?9","^?:","^?;"]]]]],"^12","Rotates a shape the amount specified by the `angle` parameter. Angles\n  should be specified in radians (values from 0 to TWO-PI) or\n  converted to radians with the [[radians]] function.\n\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a clockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling `(rotate HALF-PI)` and then `(rotate HALF-PI)` is the\n  same as `(rotate PI)`. All transformations are reset when draw begins\n  again.\n\n  Technically, rotate multiplies the current transformation matrix by\n  a rotation matrix. This function can be further controlled by the\n  [[push-matrix]] and [[pop-matrix]] functions.\n\n  When 4 arguments are provided it produces a rotation of `angle` degrees\n  around the vector `vx` `vy` `vz`. Check examples to better understand.\n  This rotation follows the right-hand rule, so if the vector x y z points\n  toward the user, the rotation will be counterclockwise."],"^P","rotate()","^Q","1.0","^@","~$quil.core/rotate","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["^11"],["^11","^?9","^?:","^?;"]],"^Z",["^[",[["^11"],["^11","^?9","^?:","^?;"]]],"^16",["^[",[null,null]]],"^U","rotate()","^14",[["^11"],["^11","^?9","^?:","^?;"]],"^15",null,"^1E",4,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"]],"^X",3548,"^Y",3555,"^1:",4,"^1;",true,"^Z",["^[",[["^11"],["^11","^?9","^?:","^?;"]]],"^12","Rotates a shape the amount specified by the `angle` parameter. Angles\n  should be specified in radians (values from 0 to TWO-PI) or\n  converted to radians with the [[radians]] function.\n\n  Objects are always rotated around their relative position to the\n  origin and positive numbers rotate objects in a clockwise\n  direction. Transformations apply to everything that happens after\n  and subsequent calls to the function accumulates the effect. For\n  example, calling `(rotate HALF-PI)` and then `(rotate HALF-PI)` is the\n  same as `(rotate PI)`. All transformations are reset when draw begins\n  again.\n\n  Technically, rotate multiplies the current transformation matrix by\n  a rotation matrix. This function can be further controlled by the\n  [[push-matrix]] and [[pop-matrix]] functions.\n\n  When 4 arguments are provided it produces a rotation of `angle` degrees\n  around the vector `vx` `vy` `vz`. Check examples to better understand.\n  This rotation follows the right-hand rule, so if the vector x y z points\n  toward the user, the rotation will be counterclockwise."],"~$set-pixel",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","Image.set()","^Q","1.0","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["~$x","~$y","~$c"],["^2I","~$x","~$y","~$c"]],"^Z",["^[",[["~$x","~$y","~$c"],["^2I","~$x","~$y","~$c"]]],"^16",["^[",[null,null]]],"^U","PImage.set()","^V",3,"^W",true,"^X",3788,"^Y",3788,"^Z",["^[",["^10",["^[",[["~$x","~$y","~$c"],["^2I","~$x","~$y","~$c"]]]]],"^12","Changes the color of any pixel in the display window. The `x` and `y`\n  parameters specify the pixel to change and the `c` parameter\n  specifies the color value. The color parameter is affected by the\n  current [[color-mode]] (the default is RGB values from 0 to 255).\n\n  Setting the color of a single pixel with `(set-pixel x y)` is easy, but not\n  as fast as putting the data directly into [[pixels]].\n\n  This function ignores [[image-mode]].\n\n  Due to what appears to be a bug in Apple's Java implementation, the\n  [[point]] and [[set-pixel]] methods are extremely slow in some circumstances\n  when used with the default renderer. Using `:p2d` or `:p3d` will fix the\n  problem. Grouping many calls to [[point]] or [[set-pixel]] together can also\n  help. (Bug 1094)"],"^P","Image.set()","^Q","1.0","^@","~$quil.core/set-pixel","^R","Pixels","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",4,"^1:",4,"^14",[["~$x","~$y","~$c"],["^2I","~$x","~$y","~$c"]],"^Z",["^[",[["~$x","~$y","~$c"],["^2I","~$x","~$y","~$c"]]],"^16",["^[",[null,null]]],"^U","PImage.set()","^14",[["~$x","~$y","~$c"],["^2I","~$x","~$y","~$c"]],"^15",null,"^1E",4,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",4,"^17",false,"^1H","^19"]],"^X",3781,"^Y",3788,"^1:",4,"^1;",true,"^Z",["^[",[["~$x","~$y","~$c"],["^2I","~$x","~$y","~$c"]]],"^12","Changes the color of any pixel in the display window. The `x` and `y`\n  parameters specify the pixel to change and the `c` parameter\n  specifies the color value. The color parameter is affected by the\n  current [[color-mode]] (the default is RGB values from 0 to 255).\n\n  Setting the color of a single pixel with `(set-pixel x y)` is easy, but not\n  as fast as putting the data directly into [[pixels]].\n\n  This function ignores [[image-mode]].\n\n  Due to what appears to be a bug in Apple's Java implementation, the\n  [[point]] and [[set-pixel]] methods are extremely slow in some circumstances\n  when used with the default renderer. Using `:p2d` or `:p3d` will fix the\n  problem. Grouping many calls to [[point]] or [[set-pixel]] together can also\n  help. (Bug 1094)"],"~$push-matrix",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","push()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","pushMatrix()","^V",3,"^W",true,"^X",3146,"^Y",3146,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Pushes the current transformation matrix onto the matrix\n  stack. Understanding [[[push-matrix]] and [[pop-matrix]] requires\n  understanding the concept of a matrix stack. The [[push-matrix]]\n  function saves the current coordinate system to the stack and\n  [[pop-matrix]] restores the prior coordinate system. [[push-matrix]] and\n  [[pop-matrix]] are used in conjunction with the other transformation\n  methods and may be embedded to control the scope of the\n  transformations."],"^P","push()","^Q","1.0","^@","~$quil.core/push-matrix","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",14,"^U","pushMatrix()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3139,"^18","^19","^Y",3146,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Pushes the current transformation matrix onto the matrix\n  stack. Understanding [[[push-matrix]] and [[pop-matrix]] requires\n  understanding the concept of a matrix stack. The [[push-matrix]]\n  function saves the current coordinate system to the stack and\n  [[pop-matrix]] restores the prior coordinate system. [[push-matrix]] and\n  [[pop-matrix]] are used in conjunction with the other transformation\n  methods and may be embedded to control the scope of the\n  transformations."],"~$no-smooth",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","noSmooth()","^Q","1.0","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","noSmooth()","^V",3,"^W",true,"^X",2850,"^Y",2850,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Draws all geometry with jagged (aliased) edges. Must be called inside\n  `:settings` handler."],"^P","noSmooth()","^Q","1.0","^@","~$quil.core/no-smooth","^R","Attributes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","noSmooth()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2843,"^18","^19","^Y",2850,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Draws all geometry with jagged (aliased) edges. Must be called inside\n  `:settings` handler."],"^6:",["^ ","^M","Color","^N",null,"^O",["^ ","^M","Color","^P","alpha()","^Q","1.0","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","alpha()","^V",3,"^W",true,"^X",300,"^Y",300,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Extracts the alpha value from a color."],"^P","alpha()","^Q","1.0","^@","~$quil.core/alpha","^R","Creating & Reading","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^U","alpha()","^14",["^[",[["^7K"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",293,"^18","^19","^Y",300,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^7K"]]]]],"^12","Extracts the alpha value from a color."],"~$camera",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","camera()","^Q","1.0","^R","Camera","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",9,"^1:",9,"^14",[[],["~$eyeX","~$eyeY","~$eyeZ","~$centerX","~$centerY","~$centerZ","~$upX","~$upY","~$upZ"]],"^Z",["^[",[[],["^?E","^?F","^?G","^?H","^?I","^?J","^?K","^?L","^?M"]]],"^16",["^[",[null,null]]],"^U","camera()","^V",3,"^W",true,"^X",920,"^Y",920,"^Z",["^[",["^10",["^[",[[],["^?E","^?F","^?G","^?H","^?I","^?J","^?K","^?L","^?M"]]]]],"^12","Sets the position of the camera through setting the eye position,\n  the center of the scene, and which axis is facing upward. Moving the\n  eye position and the direction it is pointing (the center of the\n  scene) allows the images to be seen from different angles. The\n  version without any parameters sets the camera to the default\n  position, pointing to the center of the display window with the Y\n  axis as up. The default values are:\n\n  * `eyeX`    - `(/ (width) 2.0)`\n  * `eyeY`    - `(/ (height) 2.0)`\n  * `eyeZ`    - `(/ (/ (height) 2.0) (tan (/ (* Math/PI 60.0) 360.0)))`\n  * `centerX` - `(/ (width) 2.0)`\n  * `centerY` - `(/ (height) 2.0)`\n  * `centerZ` - `0`\n  * `upX`     - `0`\n  * `upY`     - `1`\n  * `upZ`     - `0`\n\n  Similar to `gluLookAt()` in OpenGL, but it first clears the\n  current camera settings."],"^P","camera()","^Q","1.0","^@","~$quil.core/camera","^R","Camera","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",9,"^1D",["^ ","^17",false,"^1E",9,"^1:",9,"^14",[[],["^?E","^?F","^?G","^?H","^?I","^?J","^?K","^?L","^?M"]],"^Z",["^[",[[],["^?E","^?F","^?G","^?H","^?I","^?J","^?K","^?L","^?M"]]],"^16",["^[",[null,null]]],"^U","camera()","^14",[[],["^?E","^?F","^?G","^?H","^?I","^?J","^?K","^?L","^?M"]],"^15",null,"^1E",9,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",0,"^17",false,"^1H","^19"],["^ ","^1E",9,"^17",false,"^1H","^19"]],"^X",913,"^Y",920,"^1:",9,"^1;",true,"^Z",["^[",[[],["^?E","^?F","^?G","^?H","^?I","^?J","^?K","^?L","^?M"]]],"^12","Sets the position of the camera through setting the eye position,\n  the center of the scene, and which axis is facing upward. Moving the\n  eye position and the direction it is pointing (the center of the\n  scene) allows the images to be seen from different angles. The\n  version without any parameters sets the camera to the default\n  position, pointing to the center of the display window with the Y\n  axis as up. The default values are:\n\n  * `eyeX`    - `(/ (width) 2.0)`\n  * `eyeY`    - `(/ (height) 2.0)`\n  * `eyeZ`    - `(/ (/ (height) 2.0) (tan (/ (* Math/PI 60.0) 360.0)))`\n  * `centerX` - `(/ (width) 2.0)`\n  * `centerY` - `(/ (height) 2.0)`\n  * `centerZ` - `0`\n  * `upX`     - `0`\n  * `upY`     - `1`\n  * `upZ`     - `0`\n\n  Similar to `gluLookAt()` in OpenGL, but it first clears the\n  current camera settings."],"~$translate",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","translate()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$v"],["~$tx","~$ty"],["^?P","^?Q","~$tz"]],"^Z",["^[",[["~$v"],["^?P","^?Q"],["^?P","^?Q","^?R"]]],"^16",["^[",[null,null,null]]],"^U","translate()","^V",3,"^W",true,"^X",4596,"^Y",4596,"^Z",["^[",["^10",["^[",[["~$v"],["^?P","^?Q"],["^?P","^?Q","^?R"]]]]],"^12","Specifies an amount to displace objects within the display\n  window. The `tx` parameter specifies left/right translation, the `ty`\n  parameter specifies up/down translation, and the `tz` parameter\n  specifies translations toward/away from the screen.  Transformations\n  apply to everything that happens after and subsequent calls to the\n  function accumulates the effect. For example, calling `(translate 50\n  0)` and then `(translate 20, 0)` is the same as `(translate 70, 0)`. If\n  [[translate]] is called within draw, the transformation is reset when\n  the loop begins again. This function can be further controlled by\n  the [[push-matrix]] and [[pop-matrix]] functions."],"^P","translate()","^Q","1.0","^@","~$quil.core/translate","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$v"],["^?P","^?Q"],["^?P","^?Q","^?R"]],"^Z",["^[",[["~$v"],["^?P","^?Q"],["^?P","^?Q","^?R"]]],"^16",["^[",[null,null,null]]],"^U","translate()","^14",[["~$v"],["^?P","^?Q"],["^?P","^?Q","^?R"]],"^15",null,"^1E",3,"^16",["^[",[null,null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",4589,"^Y",4596,"^1:",3,"^1;",true,"^Z",["^[",[["~$v"],["^?P","^?Q"],["^?P","^?Q","^?R"]]],"^12","Specifies an amount to displace objects within the display\n  window. The `tx` parameter specifies left/right translation, the `ty`\n  parameter specifies up/down translation, and the `tz` parameter\n  specifies translations toward/away from the screen.  Transformations\n  apply to everything that happens after and subsequent calls to the\n  function accumulates the effect. For example, calling `(translate 50\n  0)` and then `(translate 20, 0)` is the same as `(translate 70, 0)`. If\n  [[translate]] is called within draw, the transformation is reset when\n  the loop begins again. This function can be further controlled by\n  the [[push-matrix]] and [[pop-matrix]] functions."],"~$load-font",["^ ","^M","Typography","^N",null,"^O",["^ ","^M","Typography","^P","loadFont()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","loadFont()","^V",3,"^W",true,"^X",2388,"^Y",2388,"^Z",["^[",["^10",["^[",[["^56"]]]]],"^12","Loads a font into a variable of type `PFont`. To load correctly,\n  fonts must be located in the data directory of the current sketch.\n  To create a font to use with Processing use the [[create-font]] function.\n\n  Like [[load-image]] and other methods that load data, the [[load-font]]\n  function should not be used inside draw, because it will slow down the sketch\n  considerably, as the font will be re-loaded from the disk (or\n  network) on each frame.\n\n  For most renderers, Processing displays fonts using the `.vlw` font\n  format, which uses images for each letter, rather than defining them\n  through vector data. When hint `:enable-native-fonts` is used with the\n  JAVA2D renderer, the native version of a font will be used if it is\n  installed on the user's machine.\n\n  Using [[create-font]] (instead of [[load-font]]) enables vector data to be\n  used with the JAVA2D (default) renderer setting. This can be helpful\n  when many font sizes are needed, or when using any renderer based on\n  JAVA2D, such as the PDF library."],"^P","loadFont()","^Q","1.0","^@","~$quil.core/load-font","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",12,"^U","loadFont()","^14",["^[",[["^56"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2381,"^18","^19","^Y",2388,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^56"]]]]],"^12","Loads a font into a variable of type `PFont`. To load correctly,\n  fonts must be located in the data directory of the current sketch.\n  To create a font to use with Processing use the [[create-font]] function.\n\n  Like [[load-image]] and other methods that load data, the [[load-font]]\n  function should not be used inside draw, because it will slow down the sketch\n  considerably, as the font will be re-loaded from the disk (or\n  network) on each frame.\n\n  For most renderers, Processing displays fonts using the `.vlw` font\n  format, which uses images for each letter, rather than defining them\n  through vector data. When hint `:enable-native-fonts` is used with the\n  JAVA2D renderer, the native version of a font will be used if it is\n  installed on the user's machine.\n\n  Using [[create-font]] (instead of [[load-font]]) enables vector data to be\n  used with the JAVA2D (default) renderer setting. This can be helpful\n  when many font sizes are needed, or when using any renderer based on\n  JAVA2D, such as the PDF library."],"~$ambient",["^ ","^M","Lights, Camera","^N",null,"^O",["^ ","^M","Lights, Camera","^P","ambientMaterial()","^Q","1.0","^R","Material Properties","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["^69"],["~$r","~$g","~$b"]],"^Z",["^[",[["^69"],["~$r","~$g","~$b"]]],"^16",["^[",[null,null]]],"^U","ambient()","^V",3,"^W",true,"^X",312,"^Y",312,"^Z",["^[",["^10",["^[",[["^69"],["~$r","~$g","~$b"]]]]],"^12","Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default [[color-mode]], setting `r=255,\n  g=126, b=0`, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with [[emissive]], [[specular]],\n  and [[shininess]] in setting the material properties of shapes."],"^P","ambientMaterial()","^Q","1.0","^@","~$quil.core/ambient","^R","Material Properties","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["^69"],["~$r","~$g","~$b"]],"^Z",["^[",[["^69"],["~$r","~$g","~$b"]]],"^16",["^[",[null,null]]],"^U","ambient()","^14",[["^69"],["~$r","~$g","~$b"]],"^15",null,"^1E",3,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",1,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",305,"^Y",312,"^1:",3,"^1;",true,"^Z",["^[",[["^69"],["~$r","~$g","~$b"]]],"^12","Sets the ambient reflectance for shapes drawn to the screen. This\n  is combined with the ambient light component of environment. The\n  color components set through the parameters define the\n  reflectance. For example in the default [[color-mode]], setting `r=255,\n  g=126, b=0`, would cause all the red light to reflect and half of the\n  green light to reflect. Used in combination with [[emissive]], [[specular]],\n  and [[shininess]] in setting the material properties of shapes."],"~$shear-y",["^ ","^M","Transform","^N",null,"^O",["^ ","^M","Transform","^P","shearY()","^Q","1.0","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","shearY()","^V",3,"^W",true,"^X",3906,"^Y",3906,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Shears a shape around the y-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the [[radians]] function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling `(shear-y (/ PI 2))` and then `(shear-y (/ PI 2))` is\n  the same as `(shear-y PI)`. If [[shear-y]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, [[shear-y]] multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  [[push-matrix]] and [[pop-matrix]] functions."],"^P","shearY()","^Q","1.0","^@","~$quil.core/shear-y","^R",null,"^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","shearY()","^14",["^[",[["^11"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",3899,"^18","^19","^Y",3906,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^11"]]]]],"^12","Shears a shape around the y-axis the amount specified by the `angle`\n  parameter. Angles should be specified in radians (values from 0 to\n  PI*2) or converted to radians with the [[radians]] function. Objects\n  are always sheared around their relative position to the origin and\n  positive numbers shear objects in a clockwise direction.\n  Transformations apply to everything that happens after and\n  subsequent calls to the function accumulates the effect. For\n  example, calling `(shear-y (/ PI 2))` and then `(shear-y (/ PI 2))` is\n  the same as `(shear-y PI)`. If [[shear-y]] is called within the draw\n  function, the transformation is reset when the loop begins again. This\n  function works in P2D or JAVA2D mode.\n\n  Technically, [[shear-y]] multiplies the current transformation matrix\n  by a rotation matrix. This function can be further controlled by the\n  [[push-matrix]] and [[pop-matrix]] functions."],"~$cursor-modes",["^ ","^@","~$quil.core/cursor-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",81,"^T",14,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",81,"^V",2,"^Y",81,"^T",14],"^1H","^2D"],"~$mouse-y",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","mouseY","^Q","1.0","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","mouseY","^V",3,"^W",true,"^X",2659,"^Y",2659,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Current vertical coordinate of the mouse."],"^P","mouseY","^Q","1.0","^@","~$quil.core/mouse-y","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","mouseY","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2652,"^18","^19","^Y",2659,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Current vertical coordinate of the mouse."],"~$mouse-button",["^ ","^M","Input","^N",null,"^O",["^ ","^M","Input","^P","mouseButton","^Q","1.0","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","mouseButton","^V",3,"^W",true,"^X",2608,"^Y",2608,"^Z",["^[",["^10",["^[",[[]]]]],"^12","The value of the system variable mouseButton is either `:left`, `:right`,\n  or `:center` depending on which button is pressed. `nil` if no button pressed"],"^P","mouseButton","^Q","1.0","^@","~$quil.core/mouse-button","^R","Mouse","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",15,"^U","mouseButton","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2601,"^18",["^>",["^8P","^1I"]],"^Y",2608,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","The value of the system variable mouseButton is either `:left`, `:right`,\n  or `:center` depending on which button is pressed. `nil` if no button pressed"],"~$p-shape-modes",["^ ","^@","~$quil.core/p-shape-modes","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",49,"^V",1,"^Y",71,"^T",15,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",71,"^V",2,"^Y",71,"^T",15],"^1H","^2D"],"~$begin-draw",["^ ","^N",null,"^O",["^ ","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^X",4846,"^V",7,"^Y",4846,"^T",17,"^Z",["^[",["^10",["^[",[["^25"]]]]]],"^@","~$quil.core/begin-draw","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",17,"^14",["^[",[["^25"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^X",4846,"^18","^1I","^Y",4846,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^25"]]]]]],"~$image",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","image()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["^2I","~$x","~$y"],["^2I","~$x","~$y","^1S","^1T"]],"^Z",["^[",[["^2I","~$x","~$y"],["^2I","~$x","~$y","^1S","^1T"]]],"^16",["^[",[null,null]]],"^U","image()","^V",3,"^W",true,"^X",2102,"^Y",2102,"^Z",["^[",["^10",["^[",[["^2I","~$x","~$y"],["^2I","~$x","~$y","^1S","^1T"]]]]],"^12","Displays images to the screen. Processing currently works with `GIF`,\n  `JPEG`, and `Targa` images. The color of an image may be modified with\n  the [[tint]] function and if a `GIF` has transparency, it will maintain\n  its transparency. The `img` parameter specifies the image to display\n  and the `x` and `y` parameters define the location of the image from its\n  upper-left corner. The image is displayed at its original size\n  unless the `width` and `height` parameters specify a different size. The\n  [[image-mode]] function changes the way the parameters work. A call to\n  `(image-mode :corners)` will change the `width` and `height` parameters to\n   define the x and y values of the opposite corner of the image."],"^P","image()","^Q","1.0","^@","~$quil.core/image","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",5,"^1:",5,"^14",[["^2I","~$x","~$y"],["^2I","~$x","~$y","^1S","^1T"]],"^Z",["^[",[["^2I","~$x","~$y"],["^2I","~$x","~$y","^1S","^1T"]]],"^16",["^[",[null,null]]],"^U","image()","^14",[["^2I","~$x","~$y"],["^2I","~$x","~$y","^1S","^1T"]],"^15",null,"^1E",5,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",3,"^17",false,"^1H","^19"],["^ ","^1E",5,"^17",false,"^1H","^19"]],"^X",2095,"^Y",2102,"^1:",5,"^1;",true,"^Z",["^[",[["^2I","~$x","~$y"],["^2I","~$x","~$y","^1S","^1T"]]],"^12","Displays images to the screen. Processing currently works with `GIF`,\n  `JPEG`, and `Targa` images. The color of an image may be modified with\n  the [[tint]] function and if a `GIF` has transparency, it will maintain\n  its transparency. The `img` parameter specifies the image to display\n  and the `x` and `y` parameters define the location of the image from its\n  upper-left corner. The image is displayed at its original size\n  unless the `width` and `height` parameters specify a different size. The\n  [[image-mode]] function changes the way the parameters work. A call to\n  `(image-mode :corners)` will change the `width` and `height` parameters to\n   define the x and y values of the opposite corner of the image."],"~$unbinary",["^ ","^M","Data","^N",null,"^O",["^ ","^M","Data","^4F",false,"^Q","1.0","^R","Conversion","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","unbinary()","^V",3,"^X",4635,"^Y",4635,"^Z",["^[",["^10",["^[",[["~$str-val"]]]]],"^12","Unpack a binary string to an integer. See [[binary]] for converting\n  integers to strings."],"^4F",false,"^Q","1.0","^@","~$quil.core/unbinary","^R","Conversion","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",11,"^U","unbinary()","^14",["^[",[["^@;"]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^X",4629,"^18","^8W","^Y",4635,"^1:",1,"^1;",true,"^Z",["^[",["^10",["^[",[["^@;"]]]]],"^12","Unpack a binary string to an integer. See [[binary]] for converting\n  integers to strings."],"~$no-tint",["^ ","^M","Image","^N",null,"^O",["^ ","^M","Image","^P","noTint()","^Q","1.0","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","noTint()","^V",3,"^W",true,"^X",2876,"^Y",2876,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Removes the current fill value for displaying images and reverts to\n  displaying images with their original hues."],"^P","noTint()","^Q","1.0","^@","~$quil.core/no-tint","^R","Loading & Displaying","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",10,"^U","noTint()","^14",["^[",[[]]],"^15",null,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^X",2869,"^18","^19","^Y",2876,"^1:",0,"^1;",true,"^Z",["^[",["^10",["^[",[[]]]]],"^12","Removes the current fill value for displaying images and reverts to\n  displaying images with their original hues."],"~$point",["^ ","^M","Shape","^N",null,"^O",["^ ","^M","Shape","^P","point()","^Q","1.0","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$x","~$y"],["~$x","~$y","~$z"]],"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","point()","^V",3,"^W",true,"^X",3017,"^Y",3017,"^Z",["^[",["^10",["^[",[["~$x","~$y"],["~$x","~$y","~$z"]]]]],"^12","Draws a point, a coordinate in space at the dimension of one\n  pixel.\n\n  Parameters:\n  * `x` - the horizontal value for the point\n  * `y` - the vertical value for the point\n  * `z` - the depth value (optional)\n\n  Drawing this shape in 3D using the `z` parameter requires the `:p3d`\n  or `:opengl` renderer to be used."],"^P","point()","^Q","1.0","^@","~$quil.core/point","^R","2D Primitives","^S","/Users/unclebob/.cljs/.aot_cache/1.11.132/E2B0490/quil/core.cljc","^T",8,"^1D",["^ ","^17",false,"^1E",3,"^1:",3,"^14",[["~$x","~$y"],["~$x","~$y","~$z"]],"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^16",["^[",[null,null]]],"^U","point()","^14",[["~$x","~$y"],["~$x","~$y","~$z"]],"^15",null,"^1E",3,"^16",["^[",[null,null]],"^V",1,"^17",false,"^W",true,"^1G",[["^ ","^1E",2,"^17",false,"^1H","^19"],["^ ","^1E",3,"^17",false,"^1H","^19"]],"^X",3010,"^Y",3017,"^1:",3,"^1;",true,"^Z",["^[",[["~$x","~$y"],["~$x","~$y","~$z"]]],"^12","Draws a point, a coordinate in space at the dimension of one\n  pixel.\n\n  Parameters:\n  * `x` - the horizontal value for the point\n  * `y` - the vertical value for the point\n  * `z` - the depth value (optional)\n\n  Drawing this shape in 3D using the `z` parameter requires the `:p3d`\n  or `:opengl` renderer to be used."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^F","^G","^G","^G","~$u","^H","^H","^H"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:shift","~:open","~:baseline","~$return-val__952__auto__","~:bold","~:disable-stroke-perspective","~$quil.core/PGraphics","~:hsb","~:quads","~:arrow","~:dilate","^=E","~$try","^>2","~:quad-strip","~:down","~$cljs.core/sequential?","~:disable-depth-mask","~:frame-rate","^<:","~$cljs.core/binding","~:space","~:burn","~:posterize","~$quil.sketch/with-sketch","~:f8","~:bolditalic","^?S","~:screen","~:enable-depth-test","~:gray","~:enable-depth-sort","~:f1","^8I","~:corner","~:disable-texture-mipmaps","~:darkest","~:f10","~:dodge","~:bottom","~:bevel","^7C","~:else","~:disable-stroke-pure","~:replace","~:alt","~:top","~$cljs.core/apply","~:disable-depth-test","~$finally","~:pie","^4N","~:enable-stroke-perspective","^S","^T","~:chord","~:rgb","~$.dispose","~:lines","~:argb","~:move","~:f5","~:command","^6;","~:hsl","~$do","~:miter","~:points","~:hand","~:close","~:radius","~:normal","~$if","~:threshold","~:up","^V","~$previous-fill__940__auto__","~:center","~:round","~:disable-optimized-stroke","~$cljs.core/let","~:corners","~:f11","~$cljs.core/cond","~:opaque","~:overlay","~:enable-opengl-errors","~$previous-stroke__951__auto__","~:enable-stroke-pure","^X","~$fill__939__auto__","~:blur","~:enable-async-saveframe","~:project","~:triangle-fan","~:f3","~:enable-depth-mask","~:f2","~:control","~:current-fill","~:difference","^?@","~$stroke__950__auto__","~:looping?","~:square","~$tr__970__auto__","~:enable-optimized-stroke","~$cljs.core/nil?","~:f12","~:exclusion","^91","~:current-stroke","^Y","~:disable-opengl-errors","~:unknown-key","~:alpha","~:wait","~:right","^>I","~:repeat","~:hard-light","~$quil.sketch$macros/defsketch","~:image","~$gr__800__auto__","~:disable-async-saveframe","~:multiply","~:lightest","^?<","~:f7","~$gr__979__auto__","~$tr__961__auto__","~:blend","~:disable-depth-sort","^@7","^1H","~:f9","~:erode","~:add","~:soft-light","^28","~:subtract","~:clamp","~:italic","~:last-time","~:radians","~:degrees","~:f6","~$return-val__941__auto__","~:f4","~:triangle-strip","~:cross","~:triangles","~:left","~:invert","~:text","~:enable-texture-mipmaps","~:model"]],"~:orderrappers and extensions around the core Processing.org API.","~:as-aliases",["^ "]]