["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$p5",["^ ","~$prototype",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.util","~:imports",null,"~:requires",["^ ","~$cstr","~$clojure.string","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$clj-compilation?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","~:line",88,"~:column",7,"~:end-line",88,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^J",[[]]]]]],"^8","~$quil.util/clj-compilation?","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",23,"~:method-params",["^J",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^F",1,"~:variadic?",false,"^E",88,"~:ret-tag","~$boolean","^G",88,"~:max-fixed-arity",0,"~:fn-var",true,"^I",["^J",["^K",["^J",[[]]]]]],"~$make-quil-constant-map",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",114,"^F",7,"^G",114,"^H",29,"^I",["^J",["^K",["^J",[["~$target","~$const-map-name","~$const-map"]]]]]],"^8","~$quil.util/make-quil-constant-map","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",29,"^M",["^J",[["^V","^W","^X"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",114,"^Q",["^7",["~$seq","~$cljs.core/IList"]],"^G",114,"^S",3,"^T",true,"^I",["^J",["^K",["^J",[["^V","^W","^X"]]]]]],"~$clj-unchecked-int",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",127,"^F",7,"^G",127,"^H",24,"^I",["^J",["^K",["^J",[["~$v"]]]]],"~:doc","In clojure it does `unchecked-int` and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"^8","~$quil.util/clj-unchecked-int","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",24,"^M",["^J",[["~$v"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",127,"^G",127,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["~$v"]]]]],"^11","In clojure it does `unchecked-int` and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"~$initial-internal-state",["^ ","^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",9,"^F",6,"^G",9,"^H",28],"^8","~$quil.util/initial-internal-state","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",28,"^F",1,"^E",9,"^G",9,"~:tag","~$cljs.core/IMap","^11","Internal state map used to initiate all sketches."],"~$print-definition-list",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",77,"^F",7,"^G",77,"^H",28,"^I",["^J",["^K",["^J",[["~$definitions"]]]]]],"^8","~$quil.util/print-definition-list","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",28,"^M",["^J",[["^18"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",77,"^Q","~$clj-nil","^G",77,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^18"]]]]]],"~$generate-quil-constants",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",121,"^F",11,"^G",121,"^H",34,"~:macro",true,"^I",["^J",["^K",["^J",[["^V","~$&","~$opts"]]]]],"~:top-fn",["^ ","^P",true,"~:fixed-arity",1,"^S",1,"^M",["^J",[["^J",["^V","^1="]]]],"^I",["^J",[["^V","~$&","^1="]]],"^O",["^J",[null]]]],"^8","~$quil.util/generate-quil-constants","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",34,"^1>",["^ ","^P",true,"^1?",1,"^S",1,"^M",["^J",[["^J",["^V","^1="]]]],"^I",["^J",[["^V","~$&","^1="]]],"^O",["^J",[null]]],"^M",["^J",[["^J",["^V","^1="]]]],"^N",null,"^1?",1,"^O",["^J",[null]],"^F",1,"^P",true,"~:methods",[["^ ","^1?",1,"^P",true,"^15",["^7",["^Z","^["]]]],"^E",121,"^1<",true,"^Q","~$any","^G",121,"^S",1,"^T",false,"^I",["^J",[["^V","~$&","^1="]]]],"~$resolve-constant-key",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",32,"^F",7,"^G",32,"^H",27,"^I",["^J",["^K",["^J",[["~$key","~$mappings"]]]]],"^11","Returns the val associated with `key` in `mappings` or `key` directly if it\n  is one of the vals in `mappings`. Otherwise throws an exception."],"^8","~$quil.util/resolve-constant-key","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",27,"^M",["^J",[["^1D","^1E"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",32,"^Q",["^7",[null,"^1B","^1:"]],"^G",32,"^S",2,"^T",true,"^I",["^J",["^K",["^J",[["^1D","^1E"]]]]],"^11","Returns the val associated with `key` in `mappings` or `key` directly if it\n  is one of the vals in `mappings`. Otherwise throws an exception."],"~$no-fn",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",5,"^F",7,"^G",5,"^H",12,"^I",["^J",["^K",["^J",[[]]]]],"^11","Function that does nothing."],"^8","~$quil.util/no-fn","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",12,"^M",["^J",[[]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",5,"^Q","^1:","^G",5,"^S",0,"^T",true,"^I",["^J",["^K",["^J",[[]]]]],"^11","Function that does nothing."],"~$prepare-quil-clj-constants",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",102,"^F",7,"^G",102,"^H",33,"^I",["^J",["^K",["^J",[["~$constants"]]]]]],"^8","~$quil.util/prepare-quil-clj-constants","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",33,"^M",["^J",[["^1J"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",102,"^Q",["^7",[null,"~$clj","^1B"]],"^G",102,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^1J"]]]]]],"~$prepare-quil-cljs-constants",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",108,"^F",7,"^G",108,"^H",34,"^I",["^J",["^K",["^J",[["^1J"]]]]]],"^8","~$quil.util/prepare-quil-cljs-constants","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",34,"^M",["^J",[["^1J"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",108,"^Q",["^7",[null,"^1L","^1B"]],"^G",108,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^1J"]]]]]],"~$length-of-longest-key",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",44,"^F",8,"^G",44,"^H",29,"~:private",true,"^I",["^J",["^K",["^J",[["~$m"]]]]],"^11","Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n   and returns 0 if map is empty:\n\n   Examples:\n   ```\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\n   ```"],"^1P",true,"^8","~$quil.util/length-of-longest-key","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",29,"^M",["^J",[["~$m"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",44,"^Q",["^7",["^1B","~$number"]],"^G",44,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["~$m"]]]]],"^11","Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n   and returns 0 if map is empty:\n\n   Examples:\n   ```\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\n   ```"],"~$gen-padding",["^ ","^B",null,"^C",["^ ","^1P",true,"^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",19,"^1>",["^ ","^P",false,"^1?",3,"^S",3,"^M",[["~$len"],["^1T","~$pad"],["~$s","^1T","^1U"]],"^I",["^J",[["^1T"],["^1T","^1U"],["~$s","^1T","^1U"]]],"^O",["^J",[null,null,null]]],"^F",8,"^E",57,"^G",57,"^I",["^J",["^K",["^J",[["^1T"],["^1T","^1U"],["~$s","^1T","^1U"]]]]],"^11","Generates a padding string with `s` concatenated with `len` times `pad`.\n   May be called without starting string `s` in which case it defaults to the\n   empty string and also without `pad` in which case it defaults to a single\n   space.\n\n   Examples:\n   ```\n   (gen-padding \"asdf\" 5 \"b\") ;=> \"asdfbbbbb\"\n   (gen-padding 3 \"b\")          ;=> \"bbb\"\n   (gen-padding 3)                ;=> \"   \"\n   ```\n   "],"^1P",true,"^8","~$quil.util/gen-padding","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",19,"^1>",["^ ","^P",false,"^1?",3,"^S",3,"^M",[["^1T"],["^1T","^1U"],["~$s","^1T","^1U"]],"^I",["^J",[["^1T"],["^1T","^1U"],["~$s","^1T","^1U"]]],"^O",["^J",[null,null,null]]],"^M",[["^1T"],["^1T","^1U"],["~$s","^1T","^1U"]],"^N",null,"^1?",3,"^O",["^J",[null,null,null]],"^F",1,"^P",false,"^1A",[["^ ","^1?",1,"^P",false,"^15","^1B"],["^ ","^1?",2,"^P",false,"^15","^1B"],["^ ","^1?",3,"^P",false,"^15",["^7",[null,"^1B"]]]],"^E",57,"^G",57,"^S",3,"^T",true,"^I",["^J",[["^1T"],["^1T","^1U"],["~$s","^1T","^1U"]]],"^11","Generates a padding string with `s` concatenated with `len` times `pad`.\n   May be called without starting string `s` in which case it defaults to the\n   empty string and also without `pad` in which case it defaults to a single\n   space.\n\n   Examples:\n   ```\n   (gen-padding \"asdf\" 5 \"b\") ;=> \"asdfbbbbb\"\n   (gen-padding 3 \"b\")          ;=> \"bbb\"\n   (gen-padding 3)                ;=> \"   \"\n   ```\n   "],"~$prepare-quil-name",["^ ","^B",null,"^C",["^ ","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^E",97,"^F",7,"^G",97,"^H",24,"^I",["^J",["^K",["^J",[["~$const-keyword"]]]]]],"^8","~$quil.util/prepare-quil-name","^D","/Users/unclebob/.cljs/.aot_cache/1.11.132/A4F8202/quil/util.cljc","^H",24,"^M",["^J",[["^1X"]]],"^N",null,"^O",["^J",[null,null]],"^F",1,"^P",false,"^E",97,"^Q","~$string","^G",97,"^S",1,"^T",true,"^I",["^J",["^K",["^J",[["^1X"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~:frame-rate","~:else","~$do","~:looping?","~$js/p5.prototype","~:clj","~$cljs.core/aget","~$def"]],"~:order",["^23","^26","^24","^29","^27","^2:","^28","^25"]],"^11","Utility fns","~:as-aliases",["^ "]]