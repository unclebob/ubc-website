["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.middleware","~:imports",null,"~:requires",["^ ","~$fun-mode","~$quil.middlewares.fun-mode","^:","^:","~$navigation-3d","~$quil.middlewares.navigation-3d","^<","^<","~$navigation-2d","~$quil.middlewares.navigation-2d","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","^9",["^ ","~:category","Middleware","~:protocol-inline",null,"~:meta",["^ ","^B","Middleware","~:added","2.1.0","~:ns","quil.middleware","~:subcategory",null,"~:file","/Users/unclebob/.cljs/.aot_cache/1.11.132/CF6E5E3/quil/middleware.cljc","~:end-column",11,"~:column",3,"~:requires-bindings",false,"~:line",13,"~:end-line",13,"~:arglists",["~#list",["~$quote",["^O",[["~$options"]]]]],"~:doc","Introduces `function mode`. Adds `update` function which takes current state\n  and returns new state. Makes all other functions (`setup`, `draw`,\n  `mouse-click`, etc) state-aware.\n  See [wiki](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29)\n  for more details."],"^E","2.1.0","^F","quil.middleware","^5","~$quil.middleware/fun-mode","^G",null,"^H","/Users/unclebob/.cljs/.aot_cache/1.11.132/CF6E5E3/quil/middleware.cljc","^I",11,"~:method-params",["^O",[["^Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^J",1,"~:variadic?",false,"^K",false,"^L",8,"~:ret-tag",["^4",[null,"~$clj","~$any"]],"^M",13,"~:max-fixed-arity",1,"~:fn-var",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^R","Introduces `function mode`. Adds `update` function which takes current state\n  and returns new state. Makes all other functions (`setup`, `draw`,\n  `mouse-click`, etc) state-aware.\n  See [wiki](https://github.com/quil/quil/wiki/Functional-mode-%28fun-mode%29)\n  for more details."],"^;",["^ ","^B","Middleware","^C",null,"^D",["^ ","^B","Middleware","^E","2.2.0","^F","quil.middleware","^G",null,"^H","/Users/unclebob/.cljs/.aot_cache/1.11.132/CF6E5E3/quil/middleware.cljc","^I",16,"^J",3,"^K",false,"^L",41,"^M",41,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^R","Enables navigation in 3D space. Similar to how it is done in\n  shooters: WASD navigation, space is go up, drag mouse to look around.\n  This middleware requires [[fun-mode]].\n\n  Navigation\n\n  * Drag mouse to look around. You can change settings to bind\n    mouse-moved instead of mouse-dragged to look around. See\n    customization info below.\n\n  * Keyboard:\n    * `w` - go forward\n    * `s` - go backward\n    * `a` - strafe left\n    * `d` - strafe right\n    * `space` - go up\n    * `z` - go down, can't bind to `ctrl`, limitation of Processing\n\n  Customization\n\n  You can customize this middleware by providing a map as\n  `:navigation-3d` option in [[quil.sketch/defsketch]]/[[quil.sketch/sketch]].\n  The map can have the following optional keys:\n\n  * `:position` - vector of 3 numbers, initial camera position. Default\n                  is the same as in [[quil.core/camera]] function.\n\n  * `:straight` - vector of 3 numbers, direction you'll be looking at.\n                  Default is `[0 0 -1]` (looking down).\n\n  * `:up` - vector of 3 numbers, 'up' direction. Default is `[0 1 0]`.\n\n  * `:pixels-in-360` - number, mouse sensitivity. Defines how many pixels\n                       you need to move/drag your mouse to rotate 360 degrees.\n                       The less the number the more sensitive the mouse.\n                       Default is `1000`.\n\n  * `:step-size` - number, number of pixels you move on each key event (wasd).\n                   Default is `20`.\n\n  * `:rotate-on` - keyword, either `:mouse-dragged` or `:mouse-moved`. Specifies\n                   on which mouse event camera should rotate. Default is\n                   `:mouse-dragged`.\n\n  Accessing position information from a sketch\n\n  [[navigation-3d]] uses [[fun-mode]] under the hood so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under `:navigation-3d` key in the\n  state map. Position consists of 3 values: `:position`, `:straight` and `:up`.\n  See \"Customization\" section above for more details.\n\n  Example:\n  ```\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-3d])\n  ```\n\n  See wiki article for more(?) details:\n  https://github.com/quil/quil/wiki/Navigation-3D"],"^E","2.2.0","^F","quil.middleware","^5","~$quil.middleware/navigation-3d","^G",null,"^H","/Users/unclebob/.cljs/.aot_cache/1.11.132/CF6E5E3/quil/middleware.cljc","^I",16,"^T",["^O",[["^Q"]]],"^U",null,"^V",["^O",[null,null]],"^J",1,"^W",false,"^K",false,"^L",36,"^X",["^4",["^Y","^Z"]],"^M",41,"^[",1,"^10",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^R","Enables navigation in 3D space. Similar to how it is done in\n  shooters: WASD navigation, space is go up, drag mouse to look around.\n  This middleware requires [[fun-mode]].\n\n  Navigation\n\n  * Drag mouse to look around. You can change settings to bind\n    mouse-moved instead of mouse-dragged to look around. See\n    customization info below.\n\n  * Keyboard:\n    * `w` - go forward\n    * `s` - go backward\n    * `a` - strafe left\n    * `d` - strafe right\n    * `space` - go up\n    * `z` - go down, can't bind to `ctrl`, limitation of Processing\n\n  Customization\n\n  You can customize this middleware by providing a map as\n  `:navigation-3d` option in [[quil.sketch/defsketch]]/[[quil.sketch/sketch]].\n  The map can have the following optional keys:\n\n  * `:position` - vector of 3 numbers, initial camera position. Default\n                  is the same as in [[quil.core/camera]] function.\n\n  * `:straight` - vector of 3 numbers, direction you'll be looking at.\n                  Default is `[0 0 -1]` (looking down).\n\n  * `:up` - vector of 3 numbers, 'up' direction. Default is `[0 1 0]`.\n\n  * `:pixels-in-360` - number, mouse sensitivity. Defines how many pixels\n                       you need to move/drag your mouse to rotate 360 degrees.\n                       The less the number the more sensitive the mouse.\n                       Default is `1000`.\n\n  * `:step-size` - number, number of pixels you move on each key event (wasd).\n                   Default is `20`.\n\n  * `:rotate-on` - keyword, either `:mouse-dragged` or `:mouse-moved`. Specifies\n                   on which mouse event camera should rotate. Default is\n                   `:mouse-dragged`.\n\n  Accessing position information from a sketch\n\n  [[navigation-3d]] uses [[fun-mode]] under the hood so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under `:navigation-3d` key in the\n  state map. Position consists of 3 values: `:position`, `:straight` and `:up`.\n  See \"Customization\" section above for more details.\n\n  Example:\n  ```\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-3d])\n  ```\n\n  See wiki article for more(?) details:\n  https://github.com/quil/quil/wiki/Navigation-3D"],"^=",["^ ","^B","Middleware","^C",null,"^D",["^ ","^B","Middleware","^E","2.2.6","^F","quil.middleware","^G",null,"^H","/Users/unclebob/.cljs/.aot_cache/1.11.132/CF6E5E3/quil/middleware.cljc","^I",16,"^J",3,"^K",false,"^L",112,"^M",112,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^R","Enables navigation over 2D sketch. Drag mouse to change the center of the\n  sketch and mouse wheel controls zoom. This middleware requires [[fun-mode]].\n\n  Customization\n\n  You can customize this middleware by providing a map as\n  `:navigation-2d` option in [[quil.sketch/defsketch]]/[[quil.sketch/sketch]].\n  The map can have the following optional keys:\n\n  * `:position` - vector of 2 numbers, x and y - center of the screen.\n                  Default is `width/2`, `height/2`.\n\n  * `:zoom` - number indicating current zoom level. Default is `1`.\n\n  * `:mouse-buttons` - set containing zero or more of the keys `:left`,\n                       `:right`, and `center` indicating which mouse buttons\n                       are used for panning the screen. Default is\n                       `#{:left :right :center}`.\n\n  Accessing position information from a sketch\n\n  [[navigation-2d]] uses [[fun-mode]] under the hood so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under `:navigation-2d` key in the\n  state map. Position consists of 2 values: `:position` and `:zoom`.\n  See \"Customization\" section above for more details.\n\n  Example:\n  ```\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-2d])\n  ```"],"^E","2.2.6","^F","quil.middleware","^5","~$quil.middleware/navigation-2d","^G",null,"^H","/Users/unclebob/.cljs/.aot_cache/1.11.132/CF6E5E3/quil/middleware.cljc","^I",16,"^T",["^O",[["^Q"]]],"^U",null,"^V",["^O",[null,null]],"^J",1,"^W",false,"^K",false,"^L",107,"^X",["^4",["^Y","^Z"]],"^M",112,"^[",1,"^10",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^R","Enables navigation over 2D sketch. Drag mouse to change the center of the\n  sketch and mouse wheel controls zoom. This middleware requires [[fun-mode]].\n\n  Customization\n\n  You can customize this middleware by providing a map as\n  `:navigation-2d` option in [[quil.sketch/defsketch]]/[[quil.sketch/sketch]].\n  The map can have the following optional keys:\n\n  * `:position` - vector of 2 numbers, x and y - center of the screen.\n                  Default is `width/2`, `height/2`.\n\n  * `:zoom` - number indicating current zoom level. Default is `1`.\n\n  * `:mouse-buttons` - set containing zero or more of the keys `:left`,\n                       `:right`, and `center` indicating which mouse buttons\n                       are used for panning the screen. Default is\n                       `#{:left :right :center}`.\n\n  Accessing position information from a sketch\n\n  [[navigation-2d]] uses [[fun-mode]] under the hood so all position-related\n  information is stored in the state map. It means that you can access in\n  draw/update/any handler and modify it if you need to. Position\n  information is a map which is stored under `:navigation-2d` key in the\n  state map. Position consists of 2 values: `:position` and `:zoom`.\n  See \"Customization\" section above for more details.\n\n  Example:\n  ```\n  (q/defsketch my-sketch\n    ...\n    :middleware [m/fun-mode m/navigation-2d])\n  ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^R","Quil middleware.","~:as-aliases",["^ "]]