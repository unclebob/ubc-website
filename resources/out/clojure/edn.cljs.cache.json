["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$clojure.edn","~:imports",null,"~:requires",["^ ","~$reader","~$cljs.reader","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$read",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/unclebob/.cljs/.aot_cache/1.11.132/1A23718/clojure/edn.cljs","~:line",20,"~:column",7,"~:end-line",20,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^G",[["^9"],["~$opts","^9"],["^9","~$eof-error?","~$eof","^I"]]]]],"~:doc","Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",4,"~:max-fixed-arity",4,"~:method-params",[["^9"],["^I","^9"],["^9","^J","^K","^I"]],"^F",["^G",[["^9"],["^I","^9"],["^9","^J","^K","^I"]]],"~:arglists-meta",["^G",[null,null,null]]]],"^5","~$clojure.edn/read","^A","/Users/unclebob/.cljs/.aot_cache/1.11.132/1A23718/clojure/edn.cljs","^E",11,"^M",["^ ","^N",false,"^O",4,"^P",4,"^Q",[["^9"],["^I","^9"],["^9","^J","^K","^I"]],"^F",["^G",[["^9"],["^I","^9"],["^9","^J","^K","^I"]]],"^R",["^G",[null,null,null]]],"^Q",[["^9"],["^I","^9"],["^9","^J","^K","^I"]],"~:protocol-impl",null,"^O",4,"^R",["^G",[null,null,null]],"^C",1,"^N",false,"~:methods",[["^ ","^O",1,"^N",false,"~:tag","~$any"],["^ ","^O",2,"^N",false,"^V","^W"],["^ ","^O",4,"^N",false,"^V","^W"]],"^B",20,"^D",20,"^P",4,"~:fn-var",true,"^F",["^G",[["^9"],["^I","^9"],["^9","^J","^K","^I"]]],"^L","Reads the first object from an cljs.tools.reader.reader-types/IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value."],"~$read-string",["^ ","^?",null,"^@",["^ ","^A","/Users/unclebob/.cljs/.aot_cache/1.11.132/1A23718/clojure/edn.cljs","^B",44,"^C",7,"^D",44,"^E",18,"^F",["^G",["^H",["^G",[["~$s"],["^I","~$s"]]]]],"^L","Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read","^M",["^ ","^N",false,"^O",2,"^P",2,"^Q",[["~$s"],["^I","~$s"]],"^F",["^G",[["~$s"],["^I","~$s"]]],"^R",["^G",[null,null]]]],"^5","~$clojure.edn/read-string","^A","/Users/unclebob/.cljs/.aot_cache/1.11.132/1A23718/clojure/edn.cljs","^E",18,"^M",["^ ","^N",false,"^O",2,"^P",2,"^Q",[["~$s"],["^I","~$s"]],"^F",["^G",[["~$s"],["^I","~$s"]]],"^R",["^G",[null,null]]],"^Q",[["~$s"],["^I","~$s"]],"^T",null,"^O",2,"^R",["^G",[null,null]],"^C",1,"^N",false,"^U",[["^ ","^O",1,"^N",false,"^V",["^4",["^W","~$clj-nil"]]],["^ ","^O",2,"^N",false,"^V",["^4",["^W","^["]]]],"^B",44,"^D",44,"^P",2,"^X",true,"^F",["^G",[["~$s"],["^I","~$s"]]],"^L","Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^9","^:","^:","^:"],"^L","edn reading.\n\n  This namespace provides alias for cljs.reader/read and cljs.reader/read-string.\n  Thus Clojure and ClojureScript source can reference these functions in the same way.\n  In Clojure, read and read-string may cause evaluation,\n  but clojure.edn/read and clojure.edn/read-string will not.\n  In ClojureScript cljs.reader/read and cljs.reader/read-string will not cause evaluation,\n  they only read edn.","~:as-aliases",["^ "]]